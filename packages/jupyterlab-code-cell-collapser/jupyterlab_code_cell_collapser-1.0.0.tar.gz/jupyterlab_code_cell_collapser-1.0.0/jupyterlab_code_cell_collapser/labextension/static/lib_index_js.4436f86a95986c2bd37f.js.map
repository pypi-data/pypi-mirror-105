{"version":3,"sources":["webpack://@epi2melabs/jupyterlab-code-cell-collapser/./lib/index.js","webpack://@epi2melabs/jupyterlab-code-cell-collapser/./lib/widget.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAwD;AACX;AAC7C;AACA;AACA;AACA;AACA;AACA,8BAA8B,sDAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;;AC3C0B;AAC6B;AAC7B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B,MAAM,0DAAmB,YAAY,wEAAwE;AACpK,IAAI,0DAAmB,CAAC,2EAAoB,GAAG,mBAAmB,kEAAW,GAAG,oEAAa,gFAAgF;AAC7K,qCAAqC,QAAQ;AAC7C;AACA,8CAA8C,+CAAQ;AACtD,0CAA0C,+CAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,0DAAmB,kBAAkB,8DAA8D;AAC3G,UAAU,0DAAmB,CAAC,uDAAc;AAC5C;AACO,gCAAgC,6DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB,8BAA8B,kBAAkB;AAClF;AACA","file":"lib_index_js.4436f86a95986c2bd37f.js","sourcesContent":["import { INotebookTracker } from '@jupyterlab/notebook';\nimport { CodeCellCollapser } from './widget';\n/**\n * Helper method\n */\nconst addCodeCellCollapser = (cell, tracker) => {\n    if (cell.model.type === 'code' && !tracker[cell.model.id]) {\n        const collapser = new CodeCellCollapser(cell);\n        tracker[cell.model.id] = collapser;\n        cell.inputArea.layout.insertWidget(0, collapser);\n    }\n};\n/**\n * Initialization data for the jupyterlab-code-cell-collapser extension.\n */\nconst extension = {\n    id: 'jupyterlab-code-cell-collapser',\n    requires: [INotebookTracker],\n    autoStart: true,\n    activate: (app, nbTrack) => {\n        nbTrack.currentChanged.connect(() => {\n            const notebookCellCollapsers = {};\n            const notebookPanel = nbTrack.currentWidget;\n            if (notebookPanel === null) {\n                return;\n            }\n            const notebook = nbTrack.currentWidget.content;\n            notebookPanel.context.ready.then(async () => {\n                // Iterate over all code cells and create a collapser\n                // for each that exists\n                notebook.widgets.map((c) => {\n                    addCodeCellCollapser(c, notebookCellCollapsers);\n                });\n                nbTrack.activeCellChanged.connect(() => {\n                    const cell = notebook.activeCell;\n                    if (cell !== null) {\n                        addCodeCellCollapser(cell, notebookCellCollapsers);\n                    }\n                });\n            });\n        });\n    }\n};\nexport default extension;\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport { caretDownIcon, caretUpIcon, LabIcon } from '@jupyterlab/ui-components';\nimport React, { useState, useEffect } from 'react';\nconst CELL_INPUT_AREA_COLLAPSED_CLASS = 'jp-Cell-inputAreaCollapsed';\n/**\n * isFirstLineComment\n *\n * Note: Helper method to determine whether the cell contains a valid\n * comment on the first line\n *\n * @param cell - The CodeCell parent.\n */\nconst isFirstLineComment = (cell) => {\n    const splitLines = (lines) => lines.split(/\\r?\\n/);\n    const firstLine = splitLines(cell.model.value.text);\n    return firstLine[0].startsWith('#');\n};\nconst CollapseButton = ({ onClick, collapsed = false, }) => (React.createElement(\"button\", { type: \"button\", onClick: () => onClick(), className: \"collapseButton\" },\n    React.createElement(LabIcon.resolveReact, { icon: collapsed ? caretUpIcon : caretDownIcon, className: \"collapseButton-icon\", tag: \"span\", width: \"10px\", height: \"15px\" })));\nconst CodeCellCollapserComponent = ({ cell, }) => {\n    const metadata = cell.model.metadata;\n    const [isCollapsible, setIsCollapsible] = useState(isFirstLineComment(cell));\n    const [isCollapsed, setIsCollapsed] = useState(false);\n    const handleSetCollapsed = () => {\n        cell.inputArea.toggleClass(CELL_INPUT_AREA_COLLAPSED_CLASS);\n        if (!isCollapsed) {\n            metadata.set('partialCollapse', true);\n        }\n        else {\n            metadata.delete('partialCollapse');\n        }\n        setIsCollapsed(!isCollapsed);\n    };\n    useEffect(() => {\n        const initiallyCollapsed = metadata.get('partialCollapse');\n        if (initiallyCollapsed) {\n            setIsCollapsed(initiallyCollapsed);\n            cell.inputArea.addClass(CELL_INPUT_AREA_COLLAPSED_CLASS);\n        }\n        cell.inputArea.model.contentChanged.connect(() => {\n            setIsCollapsible(isFirstLineComment(cell));\n        });\n    }, []);\n    return isCollapsible ?\n        React.createElement(CollapseButton, { onClick: () => handleSetCollapsed(), collapsed: isCollapsed })\n        : React.createElement(React.Fragment, null);\n};\nexport class CodeCellCollapser extends ReactWidget {\n    constructor(cell) {\n        super();\n        /**\n         * Constructs a new CodeCellCollapser widget.\n         */\n        this.cell = null;\n        this.cell = cell;\n        this.addClass('jp-CodeCellCollapser');\n    }\n    render() {\n        return React.createElement(CodeCellCollapserComponent, { cell: this.cell });\n    }\n}\n"],"sourceRoot":""}