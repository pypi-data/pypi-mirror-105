{"version":3,"sources":["webpack://@epi2melabs/jupyterlab-play-cell-button/./lib/index.js","webpack://@epi2melabs/jupyterlab-play-cell-button/./lib/widget.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAwD;AACd;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA,0CAA0C,mDAAc;AACxD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;;;;AC3C0B;AACN;AAC0B;AACpB;AACnD,qBAAqB,gBAAgB,MAAM,0DAAmB,YAAY,wEAAwE;AAClJ,IAAI,0DAAmB,CAAC,2EAAoB,GAAG,2FAA2F;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB,EAAE;AACpC,2EAA2E,EAAE,kDAAkD,EAAE;AACjI;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA,sCAAsC,+CAAQ;AAC9C;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,cAAc,mBAAmB,+DAAQ,GAAG,8DAAO,gEAAgE;AAClJ;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA,YAAY,0DAAmB,cAAc,OAAO,8DAAO,gCAAgC;AAC3F;AACO,6BAA6B,6DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAmB,mCAAmC,kBAAkB;AAC/F;AACA,uBAAuB,0DAAmB,+BAA+B,yCAAyC;AAClH;AACA;AACA;AACA;AACA","file":"lib_index_js.aedef83afa12907abe94.js","sourcesContent":["import { INotebookTracker } from '@jupyterlab/notebook';\nimport { CellPlayButton } from './widget';\n/**\n * Initialization data for the jupyterlab-play-cell-button extension.\n */\nconst extension = {\n    id: 'jupyterlab-play-cell-button',\n    requires: [INotebookTracker],\n    autoStart: true,\n    activate: (app, nbTrack) => {\n        nbTrack.currentChanged.connect(() => {\n            const notebookPanel = nbTrack.currentWidget;\n            const notebook = nbTrack.currentWidget.content;\n            notebookPanel.context.ready.then(async () => {\n                let currentCell = null;\n                let currentCellPlayButton = null;\n                nbTrack.activeCellChanged.connect(() => {\n                    // Remove the existing play button from\n                    // the previously active cell. This may\n                    // well introduce bugs down the road and\n                    // there is likely a better way to do this\n                    if (currentCell) {\n                        notebook.widgets.map((c) => {\n                            const currentLayout = c.layout;\n                            currentLayout.widgets.map(w => {\n                                if (w === currentCellPlayButton) {\n                                    currentLayout.removeWidget(w);\n                                }\n                            });\n                        });\n                    }\n                    const cell = notebook.activeCell;\n                    const newButton = new CellPlayButton(cell, notebookPanel.sessionContext);\n                    cell.layout.addWidget(newButton);\n                    // Set the current cell and button for future\n                    // reference\n                    currentCell = cell;\n                    currentCellPlayButton = newButton;\n                });\n            });\n        });\n    }\n};\nexport default extension;\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport { CodeCell } from '@jupyterlab/cells';\nimport { runIcon, stopIcon, LabIcon } from '@jupyterlab/ui-components';\nimport React, { useEffect, useState } from 'react';\nconst PlayButton = ({ icon, onClick }) => (React.createElement(\"button\", { type: \"button\", onClick: () => onClick(), className: \"cellPlayButton\" },\n    React.createElement(LabIcon.resolveReact, { icon: icon, className: \"cellPlayButton-icon\", tag: \"span\", width: \"15px\", height: \"15px\" })));\n/**\n * makeCancelable\n *\n * Note: Permits a Promise to be cancelled rather than to execute a\n * chained .then callback which is necessary if the component\n * has been unmounted\n *\n * Lifted from the long running discussion here:\n * https://github.com/facebook/react/issues/5465#issuecomment-157888325\n *\n * @param promise - The Promise to make cancellable.\n */\nfunction makeCancelable(promise) {\n    let active = true;\n    return {\n        cancel() { active = false; },\n        promise: promise.then(value => active ? value : new Promise(() => { }), reason => active ? reason : new Promise(() => { }))\n    };\n}\nconst CodeCellPlayButtonComponent = ({ cell, session, }) => {\n    // A hacky way to find out if we're currently running\n    // anything, but doesn't matter greatly because the status\n    // will soon be updated by the returned kernel future promise\n    const [isRunning, setIsRunning] = useState(!!(cell.promptNode.textContent === '[*]:'));\n    const executeCell = async () => {\n        CodeCell.execute(cell, session);\n        setIsRunning(true);\n    };\n    const interruptKernel = () => {\n        var _a, _b;\n        void ((_b = (_a = session.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.interrupt());\n    };\n    useEffect(() => {\n        const codeCellFuture = cell.outputArea.future;\n        if (!codeCellFuture) {\n            return;\n        }\n        const { promise, cancel } = makeCancelable(codeCellFuture.done);\n        promise.then(() => {\n            setIsRunning(false);\n        });\n        return () => {\n            cancel();\n        };\n    }, [isRunning]);\n    return (React.createElement(PlayButton, { icon: isRunning ? stopIcon : runIcon, onClick: () => (isRunning ? interruptKernel : executeCell)() }));\n};\nconst MarkdownCellPlayButtonComponent = ({ cell }) => {\n    const executeCell = () => {\n        cell.rendered = true;\n    };\n    return (React.createElement(PlayButton, { icon: runIcon, onClick: () => executeCell() }));\n};\nexport class CellPlayButton extends ReactWidget {\n    constructor(cell, session) {\n        super();\n        /**\n         * Constructs a new CellPlayButton widget.\n         *\n         * Note: Depending on the type of cell encountered\n         * tries to render an appropriate play button\n         * component.\n         */\n        this.cell = null;\n        this.session = null;\n        this.cell = cell;\n        this.session = session;\n        this.addClass('jp-CellPlayButton');\n    }\n    render() {\n        switch (this.cell.model.type) {\n            case 'markdown':\n                return React.createElement(MarkdownCellPlayButtonComponent, { cell: this.cell });\n            case 'code':\n                return React.createElement(CodeCellPlayButtonComponent, { cell: this.cell, session: this.session });\n            default:\n                break;\n        }\n    }\n}\n"],"sourceRoot":""}