"use strict";
/* Copyright: Ankitects Pty Ltd and contributors
 * License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ankiPlatform = "desktop";
var typeans;
var _updatingQueue = Promise.resolve();
var qFade = 0;
var aFade = 0;
var onUpdateHook;
var onShownHook;
function _runHook(arr) {
    const promises = [];
    for (let i = 0; i < arr.length; i++) {
        promises.push(arr[i]());
    }
    return Promise.all(promises);
}
function _queueAction(action) {
    _updatingQueue = _updatingQueue.then(action);
}
function _updateQA(html, fadeTime, onupdate, onshown) {
    return __awaiter(this, void 0, void 0, function* () {
        onUpdateHook = [onupdate];
        onShownHook = [onshown];
        const qa = $("#qa");
        const renderError = (kind) => (error) => {
            const errorMessage = String(error).substring(0, 2000);
            const errorStack = String(error.stack).substring(0, 2000);
            qa.html(`Invalid ${kind} on card: ${errorMessage}\n${errorStack}`.replace(/\n/g, "<br />"));
        };
        // fade out current text
        yield qa.fadeTo(fadeTime, 0).promise();
        // update text
        try {
            qa.html(html);
        }
        catch (error) {
            renderError("HTML")(error);
        }
        yield _runHook(onUpdateHook);
        // wait for mathjax to ready
        yield MathJax.startup.promise
            .then(() => {
            // clear MathJax buffers from previous typesets
            MathJax.typesetClear();
            return MathJax.typesetPromise(qa.slice(0, 1));
        })
            .catch(renderError("MathJax"));
        // defer display for up to 100ms to allow images to load
        yield Promise.race([allImagesLoaded(), new Promise((r) => setTimeout(r, 100))]);
        // and reveal when processing is done
        yield qa.fadeTo(fadeTime, 1).promise();
        yield _runHook(onShownHook);
    });
}
function _showQuestion(q, bodyclass) {
    _queueAction(() => _updateQA(q, qFade, function () {
        // return to top of window
        window.scrollTo(0, 0);
        document.body.className = bodyclass;
    }, function () {
        // focus typing area if visible
        typeans = document.getElementById("typeans");
        if (typeans) {
            typeans.focus();
        }
    }));
}
function _showAnswer(a, bodyclass) {
    _queueAction(() => _updateQA(a, aFade, function () {
        if (bodyclass) {
            //  when previewing
            document.body.className = bodyclass;
        }
        // avoid scrolling to the answer until images load, even if it
        // takes more than 100ms
        allImagesLoaded().then(scrollToAnswer);
    }, function () { }));
}
const _flagColours = {
    1: "#ff6666",
    2: "#ff9900",
    3: "#77ff77",
    4: "#77aaff",
};
function _drawFlag(flag) {
    var elem = $("#_flag");
    if (flag === 0) {
        elem.hide();
        return;
    }
    elem.show();
    elem.css("color", _flagColours[flag]);
}
function _drawMark(mark) {
    var elem = $("#_mark");
    if (!mark) {
        elem.hide();
    }
    else {
        elem.show();
    }
}
function _typeAnsPress() {
    if (window.event.keyCode === 13) {
        pycmd("ans");
    }
}
function _emulateMobile(enabled) {
    const list = document.documentElement.classList;
    if (enabled) {
        list.add("mobile");
    }
    else {
        list.remove("mobile");
    }
}
function allImagesLoaded() {
    return Promise.all(Array.from(document.getElementsByTagName("img")).map(imageLoaded));
}
function imageLoaded(img) {
    if (img.complete) {
        return;
    }
    return new Promise((resolve) => {
        img.addEventListener("load", () => resolve());
        img.addEventListener("error", () => resolve());
    });
}
function scrollToAnswer() {
    var _a;
    (_a = document.getElementById("answer")) === null || _a === void 0 ? void 0 : _a.scrollIntoView();
}
//# sourceMappingURL=data:application/json;base64,