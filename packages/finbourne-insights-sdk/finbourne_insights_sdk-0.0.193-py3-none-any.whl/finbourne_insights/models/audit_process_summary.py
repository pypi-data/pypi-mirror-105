# coding: utf-8

"""
    FINBOURNE Insights API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.0.193
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class AuditProcessSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'process': 'AuditProcess',
        'latest_entry': 'AuditData',
        'summary': 'AuditDataSummary'
    }

    attribute_map = {
        'process': 'process',
        'latest_entry': 'latestEntry',
        'summary': 'summary'
    }

    required_map = {
        'process': 'optional',
        'latest_entry': 'optional',
        'summary': 'optional'
    }

    def __init__(self, process=None, latest_entry=None, summary=None):  # noqa: E501
        """
        AuditProcessSummary - a model defined in OpenAPI

        :param process: 
        :type process: finbourne_insights.AuditProcess
        :param latest_entry: 
        :type latest_entry: finbourne_insights.AuditData
        :param summary: 
        :type summary: finbourne_insights.AuditDataSummary

        """  # noqa: E501

        self._process = None
        self._latest_entry = None
        self._summary = None
        self.discriminator = None

        if process is not None:
            self.process = process
        if latest_entry is not None:
            self.latest_entry = latest_entry
        if summary is not None:
            self.summary = summary

    @property
    def process(self):
        """Gets the process of this AuditProcessSummary.  # noqa: E501


        :return: The process of this AuditProcessSummary.  # noqa: E501
        :rtype: AuditProcess
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this AuditProcessSummary.


        :param process: The process of this AuditProcessSummary.  # noqa: E501
        :type: AuditProcess
        """

        self._process = process

    @property
    def latest_entry(self):
        """Gets the latest_entry of this AuditProcessSummary.  # noqa: E501


        :return: The latest_entry of this AuditProcessSummary.  # noqa: E501
        :rtype: AuditData
        """
        return self._latest_entry

    @latest_entry.setter
    def latest_entry(self, latest_entry):
        """Sets the latest_entry of this AuditProcessSummary.


        :param latest_entry: The latest_entry of this AuditProcessSummary.  # noqa: E501
        :type: AuditData
        """

        self._latest_entry = latest_entry

    @property
    def summary(self):
        """Gets the summary of this AuditProcessSummary.  # noqa: E501


        :return: The summary of this AuditProcessSummary.  # noqa: E501
        :rtype: AuditDataSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this AuditProcessSummary.


        :param summary: The summary of this AuditProcessSummary.  # noqa: E501
        :type: AuditDataSummary
        """

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditProcessSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
