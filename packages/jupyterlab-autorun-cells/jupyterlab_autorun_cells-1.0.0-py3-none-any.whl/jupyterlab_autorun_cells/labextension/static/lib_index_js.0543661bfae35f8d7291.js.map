{"version":3,"sources":["webpack://@epi2melabs/jupyterlab-autorun-cells/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA6C;AACW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+DAAgB;AACxD;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC","file":"lib_index_js.0543661bfae35f8d7291.js","sourcesContent":["import { CodeCell } from '@jupyterlab/cells';\nimport { INotebookTracker } from '@jupyterlab/notebook';\n/**\n * Extension constants\n */\nconst AUTORUN_ENABLED_CLASS = 'epi2melabs-autorun-enabled';\nconst EXT_NAME = 'epi2melabs-autorun';\nconst AUTORUN = 'autorun';\nconst MARKDOWN = 'markdown';\nconst CODE = 'code';\n/**\n * Helper method\n */\nconst toggleAutorun = (tracker) => {\n    const cell = tracker.activeCell;\n    const metadata = cell.model.metadata;\n    if (!!metadata.get(AUTORUN)) {\n        cell.model.metadata.set(AUTORUN, false);\n        cell.removeClass(AUTORUN_ENABLED_CLASS);\n        return;\n    }\n    cell.model.metadata.set(AUTORUN, true);\n    cell.addClass(AUTORUN_ENABLED_CLASS);\n};\n/**\n * Initialization data for the extension.\n */\nconst extension = {\n    id: EXT_NAME,\n    requires: [INotebookTracker],\n    autoStart: true,\n    activate: (app, nbTrack) => {\n        const command1 = `${EXT_NAME}:toggle_autorun`;\n        app.commands.addCommand(command1, {\n            label: 'Toggle autorun cell at launch',\n            execute: () => {\n                toggleAutorun(nbTrack);\n            }\n        });\n        app.contextMenu.addItem({\n            command: `${EXT_NAME}:toggle_autorun`,\n            selector: '.jp-Cell',\n            rank: 0\n        });\n        nbTrack.currentChanged.connect(() => {\n            const nbIDs = [];\n            const notebookPanel = nbTrack.currentWidget;\n            const notebook = nbTrack.currentWidget.content;\n            notebook.model.stateChanged.connect(async () => {\n                if (notebook.widgets.length > 1) {\n                    const currentId = notebookPanel.id;\n                    if (nbIDs.includes(currentId)) {\n                        return;\n                    }\n                    nbIDs.push(notebookPanel.id);\n                    notebookPanel.context.ready.then(() => {\n                        return notebookPanel.sessionContext.ready;\n                    }).then(async () => {\n                        notebook.widgets.map((cell) => {\n                            const metadata = cell.model.metadata;\n                            if (!!metadata.get(AUTORUN)) {\n                                cell.addClass(AUTORUN_ENABLED_CLASS);\n                                switch (cell.model.type) {\n                                    case CODE:\n                                        CodeCell.execute(cell, notebookPanel.sessionContext, {\n                                            recordTiming: notebook.notebookConfig.recordTiming\n                                        });\n                                        break;\n                                    case MARKDOWN:\n                                        cell.rendered = true;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }\n                        });\n                    });\n                }\n            });\n        });\n    }\n};\nexport default extension;\n"],"sourceRoot":""}