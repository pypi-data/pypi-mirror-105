# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class LLFeedConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'safe_to_update': 'bool',
        'feed_content': 'str',
        'updated_observables': 'int',
        'safe_to_delete': 'bool',
        'feed_status': 'str',
        'type': 'str',
        'download_on': 'bool',
        'next_run': 'int',
        'password': 'str',
        'total_unsupported_observables': 'int',
        '_property': 'LLFeedProperty',
        'id': 'str',
        'client_private_key': 'str',
        'total_updated_observables': 'int',
        'client_cert': 'str',
        'subscribed_collections': 'list[LLCollectionTopic]',
        'discarded_observables': 'int',
        'finish_time': 'int',
        'available_collections': 'list[LLCollectionTopic]',
        'last_run': 'int',
        'refresh_sec': 'int',
        'recurring': 'bool',
        'refresh_min': 'int',
        'consumed_observables': 'int',
        'params': 'LLParams',
        'in_running_state': 'bool',
        'version': 'str',
        'total_updated_indicators': 'int',
        'discovery_info': 'list[LLCollectionTopic]',
        'status_msg': 'LLStatusMsg',
        'passwd': 'str',
        'discarded_indicators': 'int',
        'consumed_unsupported_observables': 'int',
        'name': 'str',
        'total_discarded_observables': 'int',
        'ca_cert': 'str',
        'description': 'str',
        'consumed_indicators': 'int',
        'total_indicators': 'int',
        'total_observables': 'int',
        'checksum': 'str',
        'delivery': 'str',
        'proxy_url': 'str',
        'run_now': 'bool',
        'updated_indicators': 'int',
        'total_consumed_indicators': 'int',
        'refresh': 'int',
        'total_discarded_indicators': 'int',
        'uri': 'str',
        'passwd_as_is': 'str',
        'start_hour': 'int',
        'feed_type': 'str',
        'total_consumed_observables': 'int',
        'username': 'str'
    }

    attribute_map = {
        'safe_to_update': 'safeToUpdate',
        'feed_content': 'feedContent',
        'updated_observables': 'updatedObservables',
        'safe_to_delete': 'safeToDelete',
        'feed_status': 'feedStatus',
        'type': 'type',
        'download_on': 'downloadOn',
        'next_run': 'nextRun',
        'password': 'password',
        'total_unsupported_observables': 'totalUnsupportedObservables',
        '_property': 'property',
        'id': 'id',
        'client_private_key': 'clientPrivateKey',
        'total_updated_observables': 'totalUpdatedObservables',
        'client_cert': 'clientCert',
        'subscribed_collections': 'subscribedCollections',
        'discarded_observables': 'discardedObservables',
        'finish_time': 'finishTime',
        'available_collections': 'availableCollections',
        'last_run': 'lastRun',
        'refresh_sec': 'refreshSec',
        'recurring': 'recurring',
        'refresh_min': 'refreshMin',
        'consumed_observables': 'consumedObservables',
        'params': 'params',
        'in_running_state': 'inRunningState',
        'version': 'version',
        'total_updated_indicators': 'totalUpdatedIndicators',
        'discovery_info': 'discoveryInfo',
        'status_msg': 'statusMsg',
        'passwd': 'passwd',
        'discarded_indicators': 'discardedIndicators',
        'consumed_unsupported_observables': 'consumedUnsupportedObservables',
        'name': 'name',
        'total_discarded_observables': 'totalDiscardedObservables',
        'ca_cert': 'caCert',
        'description': 'description',
        'consumed_indicators': 'consumedIndicators',
        'total_indicators': 'totalIndicators',
        'total_observables': 'totalObservables',
        'checksum': 'checksum',
        'delivery': 'delivery',
        'proxy_url': 'proxyURL',
        'run_now': 'runNow',
        'updated_indicators': 'updatedIndicators',
        'total_consumed_indicators': 'totalConsumedIndicators',
        'refresh': 'refresh',
        'total_discarded_indicators': 'totalDiscardedIndicators',
        'uri': 'uri',
        'passwd_as_is': 'passwdAsIs',
        'start_hour': 'startHour',
        'feed_type': 'feedType',
        'total_consumed_observables': 'totalConsumedObservables',
        'username': 'username'
    }

    def __init__(self, safe_to_update=None, feed_content=None, updated_observables=None, safe_to_delete=None, feed_status=None, type=None, download_on=None, next_run=None, password=None, total_unsupported_observables=None, _property=None, id=None, client_private_key=None, total_updated_observables=None, client_cert=None, subscribed_collections=None, discarded_observables=None, finish_time=None, available_collections=None, last_run=None, refresh_sec=None, recurring=None, refresh_min=None, consumed_observables=None, params=None, in_running_state=None, version=None, total_updated_indicators=None, discovery_info=None, status_msg=None, passwd=None, discarded_indicators=None, consumed_unsupported_observables=None, name=None, total_discarded_observables=None, ca_cert=None, description=None, consumed_indicators=None, total_indicators=None, total_observables=None, checksum=None, delivery=None, proxy_url=None, run_now=None, updated_indicators=None, total_consumed_indicators=None, refresh=None, total_discarded_indicators=None, uri=None, passwd_as_is=None, start_hour=None, feed_type=None, total_consumed_observables=None, username=None, _configuration=None):  # noqa: E501
        """LLFeedConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._safe_to_update = None
        self._feed_content = None
        self._updated_observables = None
        self._safe_to_delete = None
        self._feed_status = None
        self._type = None
        self._download_on = None
        self._next_run = None
        self._password = None
        self._total_unsupported_observables = None
        self.__property = None
        self._id = None
        self._client_private_key = None
        self._total_updated_observables = None
        self._client_cert = None
        self._subscribed_collections = None
        self._discarded_observables = None
        self._finish_time = None
        self._available_collections = None
        self._last_run = None
        self._refresh_sec = None
        self._recurring = None
        self._refresh_min = None
        self._consumed_observables = None
        self._params = None
        self._in_running_state = None
        self._version = None
        self._total_updated_indicators = None
        self._discovery_info = None
        self._status_msg = None
        self._passwd = None
        self._discarded_indicators = None
        self._consumed_unsupported_observables = None
        self._name = None
        self._total_discarded_observables = None
        self._ca_cert = None
        self._description = None
        self._consumed_indicators = None
        self._total_indicators = None
        self._total_observables = None
        self._checksum = None
        self._delivery = None
        self._proxy_url = None
        self._run_now = None
        self._updated_indicators = None
        self._total_consumed_indicators = None
        self._refresh = None
        self._total_discarded_indicators = None
        self._uri = None
        self._passwd_as_is = None
        self._start_hour = None
        self._feed_type = None
        self._total_consumed_observables = None
        self._username = None
        self.discriminator = None

        if safe_to_update is not None:
            self.safe_to_update = safe_to_update
        if feed_content is not None:
            self.feed_content = feed_content
        if updated_observables is not None:
            self.updated_observables = updated_observables
        if safe_to_delete is not None:
            self.safe_to_delete = safe_to_delete
        if feed_status is not None:
            self.feed_status = feed_status
        if type is not None:
            self.type = type
        if download_on is not None:
            self.download_on = download_on
        if next_run is not None:
            self.next_run = next_run
        if password is not None:
            self.password = password
        if total_unsupported_observables is not None:
            self.total_unsupported_observables = total_unsupported_observables
        if _property is not None:
            self._property = _property
        if id is not None:
            self.id = id
        if client_private_key is not None:
            self.client_private_key = client_private_key
        if total_updated_observables is not None:
            self.total_updated_observables = total_updated_observables
        if client_cert is not None:
            self.client_cert = client_cert
        if subscribed_collections is not None:
            self.subscribed_collections = subscribed_collections
        if discarded_observables is not None:
            self.discarded_observables = discarded_observables
        if finish_time is not None:
            self.finish_time = finish_time
        if available_collections is not None:
            self.available_collections = available_collections
        if last_run is not None:
            self.last_run = last_run
        if refresh_sec is not None:
            self.refresh_sec = refresh_sec
        if recurring is not None:
            self.recurring = recurring
        if refresh_min is not None:
            self.refresh_min = refresh_min
        if consumed_observables is not None:
            self.consumed_observables = consumed_observables
        if params is not None:
            self.params = params
        if in_running_state is not None:
            self.in_running_state = in_running_state
        if version is not None:
            self.version = version
        if total_updated_indicators is not None:
            self.total_updated_indicators = total_updated_indicators
        if discovery_info is not None:
            self.discovery_info = discovery_info
        if status_msg is not None:
            self.status_msg = status_msg
        if passwd is not None:
            self.passwd = passwd
        if discarded_indicators is not None:
            self.discarded_indicators = discarded_indicators
        if consumed_unsupported_observables is not None:
            self.consumed_unsupported_observables = consumed_unsupported_observables
        if name is not None:
            self.name = name
        if total_discarded_observables is not None:
            self.total_discarded_observables = total_discarded_observables
        if ca_cert is not None:
            self.ca_cert = ca_cert
        if description is not None:
            self.description = description
        if consumed_indicators is not None:
            self.consumed_indicators = consumed_indicators
        if total_indicators is not None:
            self.total_indicators = total_indicators
        if total_observables is not None:
            self.total_observables = total_observables
        if checksum is not None:
            self.checksum = checksum
        if delivery is not None:
            self.delivery = delivery
        if proxy_url is not None:
            self.proxy_url = proxy_url
        if run_now is not None:
            self.run_now = run_now
        if updated_indicators is not None:
            self.updated_indicators = updated_indicators
        if total_consumed_indicators is not None:
            self.total_consumed_indicators = total_consumed_indicators
        if refresh is not None:
            self.refresh = refresh
        if total_discarded_indicators is not None:
            self.total_discarded_indicators = total_discarded_indicators
        if uri is not None:
            self.uri = uri
        if passwd_as_is is not None:
            self.passwd_as_is = passwd_as_is
        if start_hour is not None:
            self.start_hour = start_hour
        if feed_type is not None:
            self.feed_type = feed_type
        if total_consumed_observables is not None:
            self.total_consumed_observables = total_consumed_observables
        if username is not None:
            self.username = username

    @property
    def safe_to_update(self):
        """Gets the safe_to_update of this LLFeedConfig.  # noqa: E501


        :return: The safe_to_update of this LLFeedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_update

    @safe_to_update.setter
    def safe_to_update(self, safe_to_update):
        """Sets the safe_to_update of this LLFeedConfig.


        :param safe_to_update: The safe_to_update of this LLFeedConfig.  # noqa: E501
        :type: bool
        """

        self._safe_to_update = safe_to_update

    @property
    def feed_content(self):
        """Gets the feed_content of this LLFeedConfig.  # noqa: E501


        :return: The feed_content of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._feed_content

    @feed_content.setter
    def feed_content(self, feed_content):
        """Sets the feed_content of this LLFeedConfig.


        :param feed_content: The feed_content of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._feed_content = feed_content

    @property
    def updated_observables(self):
        """Gets the updated_observables of this LLFeedConfig.  # noqa: E501


        :return: The updated_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._updated_observables

    @updated_observables.setter
    def updated_observables(self, updated_observables):
        """Sets the updated_observables of this LLFeedConfig.


        :param updated_observables: The updated_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._updated_observables = updated_observables

    @property
    def safe_to_delete(self):
        """Gets the safe_to_delete of this LLFeedConfig.  # noqa: E501


        :return: The safe_to_delete of this LLFeedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_delete

    @safe_to_delete.setter
    def safe_to_delete(self, safe_to_delete):
        """Sets the safe_to_delete of this LLFeedConfig.


        :param safe_to_delete: The safe_to_delete of this LLFeedConfig.  # noqa: E501
        :type: bool
        """

        self._safe_to_delete = safe_to_delete

    @property
    def feed_status(self):
        """Gets the feed_status of this LLFeedConfig.  # noqa: E501


        :return: The feed_status of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._feed_status

    @feed_status.setter
    def feed_status(self, feed_status):
        """Sets the feed_status of this LLFeedConfig.


        :param feed_status: The feed_status of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._feed_status = feed_status

    @property
    def type(self):
        """Gets the type of this LLFeedConfig.  # noqa: E501


        :return: The type of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LLFeedConfig.


        :param type: The type of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def download_on(self):
        """Gets the download_on of this LLFeedConfig.  # noqa: E501


        :return: The download_on of this LLFeedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._download_on

    @download_on.setter
    def download_on(self, download_on):
        """Sets the download_on of this LLFeedConfig.


        :param download_on: The download_on of this LLFeedConfig.  # noqa: E501
        :type: bool
        """

        self._download_on = download_on

    @property
    def next_run(self):
        """Gets the next_run of this LLFeedConfig.  # noqa: E501


        :return: The next_run of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this LLFeedConfig.


        :param next_run: The next_run of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._next_run = next_run

    @property
    def password(self):
        """Gets the password of this LLFeedConfig.  # noqa: E501


        :return: The password of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LLFeedConfig.


        :param password: The password of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def total_unsupported_observables(self):
        """Gets the total_unsupported_observables of this LLFeedConfig.  # noqa: E501


        :return: The total_unsupported_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_unsupported_observables

    @total_unsupported_observables.setter
    def total_unsupported_observables(self, total_unsupported_observables):
        """Sets the total_unsupported_observables of this LLFeedConfig.


        :param total_unsupported_observables: The total_unsupported_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_unsupported_observables = total_unsupported_observables

    @property
    def _property(self):
        """Gets the _property of this LLFeedConfig.  # noqa: E501


        :return: The _property of this LLFeedConfig.  # noqa: E501
        :rtype: LLFeedProperty
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this LLFeedConfig.


        :param _property: The _property of this LLFeedConfig.  # noqa: E501
        :type: LLFeedProperty
        """

        self.__property = _property

    @property
    def id(self):
        """Gets the id of this LLFeedConfig.  # noqa: E501


        :return: The id of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LLFeedConfig.


        :param id: The id of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_private_key(self):
        """Gets the client_private_key of this LLFeedConfig.  # noqa: E501


        :return: The client_private_key of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_private_key

    @client_private_key.setter
    def client_private_key(self, client_private_key):
        """Sets the client_private_key of this LLFeedConfig.


        :param client_private_key: The client_private_key of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._client_private_key = client_private_key

    @property
    def total_updated_observables(self):
        """Gets the total_updated_observables of this LLFeedConfig.  # noqa: E501


        :return: The total_updated_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_updated_observables

    @total_updated_observables.setter
    def total_updated_observables(self, total_updated_observables):
        """Sets the total_updated_observables of this LLFeedConfig.


        :param total_updated_observables: The total_updated_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_updated_observables = total_updated_observables

    @property
    def client_cert(self):
        """Gets the client_cert of this LLFeedConfig.  # noqa: E501


        :return: The client_cert of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_cert

    @client_cert.setter
    def client_cert(self, client_cert):
        """Sets the client_cert of this LLFeedConfig.


        :param client_cert: The client_cert of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._client_cert = client_cert

    @property
    def subscribed_collections(self):
        """Gets the subscribed_collections of this LLFeedConfig.  # noqa: E501


        :return: The subscribed_collections of this LLFeedConfig.  # noqa: E501
        :rtype: list[LLCollectionTopic]
        """
        return self._subscribed_collections

    @subscribed_collections.setter
    def subscribed_collections(self, subscribed_collections):
        """Sets the subscribed_collections of this LLFeedConfig.


        :param subscribed_collections: The subscribed_collections of this LLFeedConfig.  # noqa: E501
        :type: list[LLCollectionTopic]
        """

        self._subscribed_collections = subscribed_collections

    @property
    def discarded_observables(self):
        """Gets the discarded_observables of this LLFeedConfig.  # noqa: E501


        :return: The discarded_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._discarded_observables

    @discarded_observables.setter
    def discarded_observables(self, discarded_observables):
        """Sets the discarded_observables of this LLFeedConfig.


        :param discarded_observables: The discarded_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._discarded_observables = discarded_observables

    @property
    def finish_time(self):
        """Gets the finish_time of this LLFeedConfig.  # noqa: E501


        :return: The finish_time of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this LLFeedConfig.


        :param finish_time: The finish_time of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._finish_time = finish_time

    @property
    def available_collections(self):
        """Gets the available_collections of this LLFeedConfig.  # noqa: E501


        :return: The available_collections of this LLFeedConfig.  # noqa: E501
        :rtype: list[LLCollectionTopic]
        """
        return self._available_collections

    @available_collections.setter
    def available_collections(self, available_collections):
        """Sets the available_collections of this LLFeedConfig.


        :param available_collections: The available_collections of this LLFeedConfig.  # noqa: E501
        :type: list[LLCollectionTopic]
        """

        self._available_collections = available_collections

    @property
    def last_run(self):
        """Gets the last_run of this LLFeedConfig.  # noqa: E501


        :return: The last_run of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this LLFeedConfig.


        :param last_run: The last_run of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._last_run = last_run

    @property
    def refresh_sec(self):
        """Gets the refresh_sec of this LLFeedConfig.  # noqa: E501


        :return: The refresh_sec of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._refresh_sec

    @refresh_sec.setter
    def refresh_sec(self, refresh_sec):
        """Sets the refresh_sec of this LLFeedConfig.


        :param refresh_sec: The refresh_sec of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._refresh_sec = refresh_sec

    @property
    def recurring(self):
        """Gets the recurring of this LLFeedConfig.  # noqa: E501


        :return: The recurring of this LLFeedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this LLFeedConfig.


        :param recurring: The recurring of this LLFeedConfig.  # noqa: E501
        :type: bool
        """

        self._recurring = recurring

    @property
    def refresh_min(self):
        """Gets the refresh_min of this LLFeedConfig.  # noqa: E501


        :return: The refresh_min of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._refresh_min

    @refresh_min.setter
    def refresh_min(self, refresh_min):
        """Sets the refresh_min of this LLFeedConfig.


        :param refresh_min: The refresh_min of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._refresh_min = refresh_min

    @property
    def consumed_observables(self):
        """Gets the consumed_observables of this LLFeedConfig.  # noqa: E501


        :return: The consumed_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._consumed_observables

    @consumed_observables.setter
    def consumed_observables(self, consumed_observables):
        """Sets the consumed_observables of this LLFeedConfig.


        :param consumed_observables: The consumed_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._consumed_observables = consumed_observables

    @property
    def params(self):
        """Gets the params of this LLFeedConfig.  # noqa: E501


        :return: The params of this LLFeedConfig.  # noqa: E501
        :rtype: LLParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this LLFeedConfig.


        :param params: The params of this LLFeedConfig.  # noqa: E501
        :type: LLParams
        """

        self._params = params

    @property
    def in_running_state(self):
        """Gets the in_running_state of this LLFeedConfig.  # noqa: E501


        :return: The in_running_state of this LLFeedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._in_running_state

    @in_running_state.setter
    def in_running_state(self, in_running_state):
        """Sets the in_running_state of this LLFeedConfig.


        :param in_running_state: The in_running_state of this LLFeedConfig.  # noqa: E501
        :type: bool
        """

        self._in_running_state = in_running_state

    @property
    def version(self):
        """Gets the version of this LLFeedConfig.  # noqa: E501


        :return: The version of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LLFeedConfig.


        :param version: The version of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def total_updated_indicators(self):
        """Gets the total_updated_indicators of this LLFeedConfig.  # noqa: E501


        :return: The total_updated_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_updated_indicators

    @total_updated_indicators.setter
    def total_updated_indicators(self, total_updated_indicators):
        """Sets the total_updated_indicators of this LLFeedConfig.


        :param total_updated_indicators: The total_updated_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_updated_indicators = total_updated_indicators

    @property
    def discovery_info(self):
        """Gets the discovery_info of this LLFeedConfig.  # noqa: E501


        :return: The discovery_info of this LLFeedConfig.  # noqa: E501
        :rtype: list[LLCollectionTopic]
        """
        return self._discovery_info

    @discovery_info.setter
    def discovery_info(self, discovery_info):
        """Sets the discovery_info of this LLFeedConfig.


        :param discovery_info: The discovery_info of this LLFeedConfig.  # noqa: E501
        :type: list[LLCollectionTopic]
        """

        self._discovery_info = discovery_info

    @property
    def status_msg(self):
        """Gets the status_msg of this LLFeedConfig.  # noqa: E501


        :return: The status_msg of this LLFeedConfig.  # noqa: E501
        :rtype: LLStatusMsg
        """
        return self._status_msg

    @status_msg.setter
    def status_msg(self, status_msg):
        """Sets the status_msg of this LLFeedConfig.


        :param status_msg: The status_msg of this LLFeedConfig.  # noqa: E501
        :type: LLStatusMsg
        """

        self._status_msg = status_msg

    @property
    def passwd(self):
        """Gets the passwd of this LLFeedConfig.  # noqa: E501


        :return: The passwd of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this LLFeedConfig.


        :param passwd: The passwd of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._passwd = passwd

    @property
    def discarded_indicators(self):
        """Gets the discarded_indicators of this LLFeedConfig.  # noqa: E501


        :return: The discarded_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._discarded_indicators

    @discarded_indicators.setter
    def discarded_indicators(self, discarded_indicators):
        """Sets the discarded_indicators of this LLFeedConfig.


        :param discarded_indicators: The discarded_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._discarded_indicators = discarded_indicators

    @property
    def consumed_unsupported_observables(self):
        """Gets the consumed_unsupported_observables of this LLFeedConfig.  # noqa: E501


        :return: The consumed_unsupported_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._consumed_unsupported_observables

    @consumed_unsupported_observables.setter
    def consumed_unsupported_observables(self, consumed_unsupported_observables):
        """Sets the consumed_unsupported_observables of this LLFeedConfig.


        :param consumed_unsupported_observables: The consumed_unsupported_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._consumed_unsupported_observables = consumed_unsupported_observables

    @property
    def name(self):
        """Gets the name of this LLFeedConfig.  # noqa: E501


        :return: The name of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LLFeedConfig.


        :param name: The name of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def total_discarded_observables(self):
        """Gets the total_discarded_observables of this LLFeedConfig.  # noqa: E501


        :return: The total_discarded_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_discarded_observables

    @total_discarded_observables.setter
    def total_discarded_observables(self, total_discarded_observables):
        """Sets the total_discarded_observables of this LLFeedConfig.


        :param total_discarded_observables: The total_discarded_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_discarded_observables = total_discarded_observables

    @property
    def ca_cert(self):
        """Gets the ca_cert of this LLFeedConfig.  # noqa: E501


        :return: The ca_cert of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this LLFeedConfig.


        :param ca_cert: The ca_cert of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._ca_cert = ca_cert

    @property
    def description(self):
        """Gets the description of this LLFeedConfig.  # noqa: E501


        :return: The description of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LLFeedConfig.


        :param description: The description of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def consumed_indicators(self):
        """Gets the consumed_indicators of this LLFeedConfig.  # noqa: E501


        :return: The consumed_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._consumed_indicators

    @consumed_indicators.setter
    def consumed_indicators(self, consumed_indicators):
        """Sets the consumed_indicators of this LLFeedConfig.


        :param consumed_indicators: The consumed_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._consumed_indicators = consumed_indicators

    @property
    def total_indicators(self):
        """Gets the total_indicators of this LLFeedConfig.  # noqa: E501


        :return: The total_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_indicators

    @total_indicators.setter
    def total_indicators(self, total_indicators):
        """Sets the total_indicators of this LLFeedConfig.


        :param total_indicators: The total_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_indicators = total_indicators

    @property
    def total_observables(self):
        """Gets the total_observables of this LLFeedConfig.  # noqa: E501


        :return: The total_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_observables

    @total_observables.setter
    def total_observables(self, total_observables):
        """Sets the total_observables of this LLFeedConfig.


        :param total_observables: The total_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_observables = total_observables

    @property
    def checksum(self):
        """Gets the checksum of this LLFeedConfig.  # noqa: E501


        :return: The checksum of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this LLFeedConfig.


        :param checksum: The checksum of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def delivery(self):
        """Gets the delivery of this LLFeedConfig.  # noqa: E501


        :return: The delivery of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this LLFeedConfig.


        :param delivery: The delivery of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._delivery = delivery

    @property
    def proxy_url(self):
        """Gets the proxy_url of this LLFeedConfig.  # noqa: E501


        :return: The proxy_url of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this LLFeedConfig.


        :param proxy_url: The proxy_url of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def run_now(self):
        """Gets the run_now of this LLFeedConfig.  # noqa: E501


        :return: The run_now of this LLFeedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._run_now

    @run_now.setter
    def run_now(self, run_now):
        """Sets the run_now of this LLFeedConfig.


        :param run_now: The run_now of this LLFeedConfig.  # noqa: E501
        :type: bool
        """

        self._run_now = run_now

    @property
    def updated_indicators(self):
        """Gets the updated_indicators of this LLFeedConfig.  # noqa: E501


        :return: The updated_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._updated_indicators

    @updated_indicators.setter
    def updated_indicators(self, updated_indicators):
        """Sets the updated_indicators of this LLFeedConfig.


        :param updated_indicators: The updated_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._updated_indicators = updated_indicators

    @property
    def total_consumed_indicators(self):
        """Gets the total_consumed_indicators of this LLFeedConfig.  # noqa: E501


        :return: The total_consumed_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_consumed_indicators

    @total_consumed_indicators.setter
    def total_consumed_indicators(self, total_consumed_indicators):
        """Sets the total_consumed_indicators of this LLFeedConfig.


        :param total_consumed_indicators: The total_consumed_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_consumed_indicators = total_consumed_indicators

    @property
    def refresh(self):
        """Gets the refresh of this LLFeedConfig.  # noqa: E501


        :return: The refresh of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this LLFeedConfig.


        :param refresh: The refresh of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._refresh = refresh

    @property
    def total_discarded_indicators(self):
        """Gets the total_discarded_indicators of this LLFeedConfig.  # noqa: E501


        :return: The total_discarded_indicators of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_discarded_indicators

    @total_discarded_indicators.setter
    def total_discarded_indicators(self, total_discarded_indicators):
        """Sets the total_discarded_indicators of this LLFeedConfig.


        :param total_discarded_indicators: The total_discarded_indicators of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_discarded_indicators = total_discarded_indicators

    @property
    def uri(self):
        """Gets the uri of this LLFeedConfig.  # noqa: E501


        :return: The uri of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this LLFeedConfig.


        :param uri: The uri of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def passwd_as_is(self):
        """Gets the passwd_as_is of this LLFeedConfig.  # noqa: E501


        :return: The passwd_as_is of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._passwd_as_is

    @passwd_as_is.setter
    def passwd_as_is(self, passwd_as_is):
        """Sets the passwd_as_is of this LLFeedConfig.


        :param passwd_as_is: The passwd_as_is of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._passwd_as_is = passwd_as_is

    @property
    def start_hour(self):
        """Gets the start_hour of this LLFeedConfig.  # noqa: E501


        :return: The start_hour of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._start_hour

    @start_hour.setter
    def start_hour(self, start_hour):
        """Sets the start_hour of this LLFeedConfig.


        :param start_hour: The start_hour of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._start_hour = start_hour

    @property
    def feed_type(self):
        """Gets the feed_type of this LLFeedConfig.  # noqa: E501


        :return: The feed_type of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this LLFeedConfig.


        :param feed_type: The feed_type of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._feed_type = feed_type

    @property
    def total_consumed_observables(self):
        """Gets the total_consumed_observables of this LLFeedConfig.  # noqa: E501


        :return: The total_consumed_observables of this LLFeedConfig.  # noqa: E501
        :rtype: int
        """
        return self._total_consumed_observables

    @total_consumed_observables.setter
    def total_consumed_observables(self, total_consumed_observables):
        """Sets the total_consumed_observables of this LLFeedConfig.


        :param total_consumed_observables: The total_consumed_observables of this LLFeedConfig.  # noqa: E501
        :type: int
        """

        self._total_consumed_observables = total_consumed_observables

    @property
    def username(self):
        """Gets the username of this LLFeedConfig.  # noqa: E501


        :return: The username of this LLFeedConfig.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LLFeedConfig.


        :param username: The username of this LLFeedConfig.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LLFeedConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LLFeedConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LLFeedConfig):
            return True

        return self.to_dict() != other.to_dict()
