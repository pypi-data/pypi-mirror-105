# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class INeighborRoutes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertisement_interval': 'int',
        'name': 'str',
        'neighbor_advertise_maps': 'list[INeighborAdvertiseMaps]',
        'links': 'ILinks',
        'remove_private_as': 'bool',
        'id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'advertisement_interval': 'advertisementInterval',
        'name': 'name',
        'neighbor_advertise_maps': 'neighborAdvertiseMaps',
        'links': 'links',
        'remove_private_as': 'removePrivateAs',
        'id': 'id',
        'type': 'type'
    }

    def __init__(self, advertisement_interval=None, name=None, neighbor_advertise_maps=None, links=None, remove_private_as=None, id=None, type=None, _configuration=None):  # noqa: E501
        """INeighborRoutes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._advertisement_interval = None
        self._name = None
        self._neighbor_advertise_maps = None
        self._links = None
        self._remove_private_as = None
        self._id = None
        self._type = None
        self.discriminator = None

        if advertisement_interval is not None:
            self.advertisement_interval = advertisement_interval
        if name is not None:
            self.name = name
        if neighbor_advertise_maps is not None:
            self.neighbor_advertise_maps = neighbor_advertise_maps
        if links is not None:
            self.links = links
        if remove_private_as is not None:
            self.remove_private_as = remove_private_as
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type

    @property
    def advertisement_interval(self):
        """Gets the advertisement_interval of this INeighborRoutes.  # noqa: E501


        :return: The advertisement_interval of this INeighborRoutes.  # noqa: E501
        :rtype: int
        """
        return self._advertisement_interval

    @advertisement_interval.setter
    def advertisement_interval(self, advertisement_interval):
        """Sets the advertisement_interval of this INeighborRoutes.


        :param advertisement_interval: The advertisement_interval of this INeighborRoutes.  # noqa: E501
        :type: int
        """

        self._advertisement_interval = advertisement_interval

    @property
    def name(self):
        """Gets the name of this INeighborRoutes.  # noqa: E501


        :return: The name of this INeighborRoutes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this INeighborRoutes.


        :param name: The name of this INeighborRoutes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def neighbor_advertise_maps(self):
        """Gets the neighbor_advertise_maps of this INeighborRoutes.  # noqa: E501


        :return: The neighbor_advertise_maps of this INeighborRoutes.  # noqa: E501
        :rtype: list[INeighborAdvertiseMaps]
        """
        return self._neighbor_advertise_maps

    @neighbor_advertise_maps.setter
    def neighbor_advertise_maps(self, neighbor_advertise_maps):
        """Sets the neighbor_advertise_maps of this INeighborRoutes.


        :param neighbor_advertise_maps: The neighbor_advertise_maps of this INeighborRoutes.  # noqa: E501
        :type: list[INeighborAdvertiseMaps]
        """

        self._neighbor_advertise_maps = neighbor_advertise_maps

    @property
    def links(self):
        """Gets the links of this INeighborRoutes.  # noqa: E501


        :return: The links of this INeighborRoutes.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this INeighborRoutes.


        :param links: The links of this INeighborRoutes.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def remove_private_as(self):
        """Gets the remove_private_as of this INeighborRoutes.  # noqa: E501


        :return: The remove_private_as of this INeighborRoutes.  # noqa: E501
        :rtype: bool
        """
        return self._remove_private_as

    @remove_private_as.setter
    def remove_private_as(self, remove_private_as):
        """Sets the remove_private_as of this INeighborRoutes.


        :param remove_private_as: The remove_private_as of this INeighborRoutes.  # noqa: E501
        :type: bool
        """

        self._remove_private_as = remove_private_as

    @property
    def id(self):
        """Gets the id of this INeighborRoutes.  # noqa: E501


        :return: The id of this INeighborRoutes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this INeighborRoutes.


        :param id: The id of this INeighborRoutes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this INeighborRoutes.  # noqa: E501


        :return: The type of this INeighborRoutes.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this INeighborRoutes.


        :param type: The type of this INeighborRoutes.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(INeighborRoutes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, INeighborRoutes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, INeighborRoutes):
            return True

        return self.to_dict() != other.to_dict()
