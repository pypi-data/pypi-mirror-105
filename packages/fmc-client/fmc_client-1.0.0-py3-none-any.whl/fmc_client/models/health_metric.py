# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class HealthMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'Metadata',
        'metric': 'str',
        'regex_filter': 'str',
        'response': 'str',
        'name': 'str',
        'description': 'str',
        'links': 'ILinks',
        'id': 'str',
        'type': 'str',
        'version': 'str',
        'device_uuid': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'metric': 'metric',
        'regex_filter': 'regexFilter',
        'response': 'response',
        'name': 'name',
        'description': 'description',
        'links': 'links',
        'id': 'id',
        'type': 'type',
        'version': 'version',
        'device_uuid': 'deviceUUID'
    }

    def __init__(self, metadata=None, metric=None, regex_filter=None, response=None, name=None, description=None, links=None, id=None, type=None, version=None, device_uuid=None, _configuration=None):  # noqa: E501
        """HealthMetric - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._metric = None
        self._regex_filter = None
        self._response = None
        self._name = None
        self._description = None
        self._links = None
        self._id = None
        self._type = None
        self._version = None
        self._device_uuid = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if metric is not None:
            self.metric = metric
        if regex_filter is not None:
            self.regex_filter = regex_filter
        if response is not None:
            self.response = response
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if device_uuid is not None:
            self.device_uuid = device_uuid

    @property
    def metadata(self):
        """Gets the metadata of this HealthMetric.  # noqa: E501


        :return: The metadata of this HealthMetric.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this HealthMetric.


        :param metadata: The metadata of this HealthMetric.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def metric(self):
        """Gets the metric of this HealthMetric.  # noqa: E501

        Name of the metric.  # noqa: E501

        :return: The metric of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this HealthMetric.

        Name of the metric.  # noqa: E501

        :param metric: The metric of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def regex_filter(self):
        """Gets the regex_filter of this HealthMetric.  # noqa: E501

        Regular expression as filter to be applied on the metric. Supports RE2 Syntax documented here : https://github.com/google/re2/wiki/Syntax. Example regexFilter for fetching metrics for cpu for only CPU01 would be cpu=~\"CPU01\"   # noqa: E501

        :return: The regex_filter of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._regex_filter

    @regex_filter.setter
    def regex_filter(self, regex_filter):
        """Sets the regex_filter of this HealthMetric.

        Regular expression as filter to be applied on the metric. Supports RE2 Syntax documented here : https://github.com/google/re2/wiki/Syntax. Example regexFilter for fetching metrics for cpu for only CPU01 would be cpu=~\"CPU01\"   # noqa: E501

        :param regex_filter: The regex_filter of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._regex_filter = regex_filter

    @property
    def response(self):
        """Gets the response of this HealthMetric.  # noqa: E501

        Response containing the values for the metric specified meeting the criteria for the regular expression between the start time and end time at every step interval specified.  # noqa: E501

        :return: The response of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this HealthMetric.

        Response containing the values for the metric specified meeting the criteria for the regular expression between the start time and end time at every step interval specified.  # noqa: E501

        :param response: The response of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def name(self):
        """Gets the name of this HealthMetric.  # noqa: E501


        :return: The name of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthMetric.


        :param name: The name of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this HealthMetric.  # noqa: E501


        :return: The description of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthMetric.


        :param description: The description of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this HealthMetric.  # noqa: E501


        :return: The links of this HealthMetric.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this HealthMetric.


        :param links: The links of this HealthMetric.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this HealthMetric.  # noqa: E501


        :return: The id of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HealthMetric.


        :param id: The id of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this HealthMetric.  # noqa: E501

        Type of the health metric; this value is always Metric.  # noqa: E501

        :return: The type of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HealthMetric.

        Type of the health metric; this value is always Metric.  # noqa: E501

        :param type: The type of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this HealthMetric.  # noqa: E501


        :return: The version of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthMetric.


        :param version: The version of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def device_uuid(self):
        """Gets the device_uuid of this HealthMetric.  # noqa: E501

        UUID of the device associated with this metric.  # noqa: E501

        :return: The device_uuid of this HealthMetric.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this HealthMetric.

        UUID of the device associated with this metric.  # noqa: E501

        :param device_uuid: The device_uuid of this HealthMetric.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthMetric):
            return True

        return self.to_dict() != other.to_dict()
