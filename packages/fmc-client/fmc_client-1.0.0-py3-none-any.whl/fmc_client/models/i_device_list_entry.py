# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IDeviceListEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_status': 'str',
        'device_name': 'str',
        'device_uuid': 'str',
        'deployed_version': 'int'
    }

    attribute_map = {
        'deployment_status': 'deploymentStatus',
        'device_name': 'deviceName',
        'device_uuid': 'deviceUUID',
        'deployed_version': 'deployedVersion'
    }

    def __init__(self, deployment_status=None, device_name=None, device_uuid=None, deployed_version=None, _configuration=None):  # noqa: E501
        """IDeviceListEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deployment_status = None
        self._device_name = None
        self._device_uuid = None
        self._deployed_version = None
        self.discriminator = None

        if deployment_status is not None:
            self.deployment_status = deployment_status
        if device_name is not None:
            self.device_name = device_name
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if deployed_version is not None:
            self.deployed_version = deployed_version

    @property
    def deployment_status(self):
        """Gets the deployment_status of this IDeviceListEntry.  # noqa: E501

        Deployment status of the device in the deployment job  # noqa: E501

        :return: The deployment_status of this IDeviceListEntry.  # noqa: E501
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this IDeviceListEntry.

        Deployment status of the device in the deployment job  # noqa: E501

        :param deployment_status: The deployment_status of this IDeviceListEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYING", "SUCCEEDED", "PARTIALLY_SUCCEEDED", "FAILED", "SSP_SUCCEEDED", "SSP_FAILED", "SSP_PRIMARY_BOOTSTRAP_SUCCEEDED", "SSP_PRIMARY_BOOTSTRAP_FAILED", "SSP_SECONDARY_BOOTSTRAP_SUCCEEDED", "SSP_SECONDARY_BOOTSTRAP_FAILED", "PRIMARY_BOOTSTRAP_SUCCEEDED", "PRIMARY_BOOTSTRAP_FAILED", "SECONDARY_BOOTSTRAP_SUCCEEDED", "SECONDARY_BOOTSTRAP_FAILED", "BREAK_SUCCEEDED", "BREAK_FAILED", "PRIMARY_BOOTSTRAP_PARTIALLY_SUCCEEDED", "SECONDARY_BOOTSTRAP_PARTIALLY_SUCCEEDED", "SSP_PRIMARY_BOOTSTRAP_PARTIALLY_SUCCEEDED", "SSP_SECONDARY_BOOTSTRAP_PARTIALLY_SUCCEEDED", "BREAK_PARTIALLY_SUCCEEDED", "CANCELLED", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_status, allowed_values)
            )

        self._deployment_status = deployment_status

    @property
    def device_name(self):
        """Gets the device_name of this IDeviceListEntry.  # noqa: E501

        Name of the device  # noqa: E501

        :return: The device_name of this IDeviceListEntry.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this IDeviceListEntry.

        Name of the device  # noqa: E501

        :param device_name: The device_name of this IDeviceListEntry.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_uuid(self):
        """Gets the device_uuid of this IDeviceListEntry.  # noqa: E501

        UUID of the device  # noqa: E501

        :return: The device_uuid of this IDeviceListEntry.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this IDeviceListEntry.

        UUID of the device  # noqa: E501

        :param device_uuid: The device_uuid of this IDeviceListEntry.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def deployed_version(self):
        """Gets the deployed_version of this IDeviceListEntry.  # noqa: E501

        Config version of the device in the deployment job  # noqa: E501

        :return: The deployed_version of this IDeviceListEntry.  # noqa: E501
        :rtype: int
        """
        return self._deployed_version

    @deployed_version.setter
    def deployed_version(self, deployed_version):
        """Sets the deployed_version of this IDeviceListEntry.

        Config version of the device in the deployment job  # noqa: E501

        :param deployed_version: The deployed_version of this IDeviceListEntry.  # noqa: E501
        :type: int
        """

        self._deployed_version = deployed_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IDeviceListEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDeviceListEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IDeviceListEntry):
            return True

        return self.to_dict() != other.to_dict()
