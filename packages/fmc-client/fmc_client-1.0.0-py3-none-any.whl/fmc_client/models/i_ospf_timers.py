# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfTimers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spf_throttle_timer': 'ISpfThrottleTimer',
        'lsa_throttle_timer': 'ILsaThrottleTimer',
        'lsa_group': 'int',
        'retransmission': 'int',
        'lsa_arrival': 'int',
        'flood_pacing': 'int'
    }

    attribute_map = {
        'spf_throttle_timer': 'spfThrottleTimer',
        'lsa_throttle_timer': 'lsaThrottleTimer',
        'lsa_group': 'lsaGroup',
        'retransmission': 'retransmission',
        'lsa_arrival': 'lsaArrival',
        'flood_pacing': 'floodPacing'
    }

    def __init__(self, spf_throttle_timer=None, lsa_throttle_timer=None, lsa_group=None, retransmission=None, lsa_arrival=None, flood_pacing=None, _configuration=None):  # noqa: E501
        """IOspfTimers - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._spf_throttle_timer = None
        self._lsa_throttle_timer = None
        self._lsa_group = None
        self._retransmission = None
        self._lsa_arrival = None
        self._flood_pacing = None
        self.discriminator = None

        if spf_throttle_timer is not None:
            self.spf_throttle_timer = spf_throttle_timer
        if lsa_throttle_timer is not None:
            self.lsa_throttle_timer = lsa_throttle_timer
        if lsa_group is not None:
            self.lsa_group = lsa_group
        if retransmission is not None:
            self.retransmission = retransmission
        if lsa_arrival is not None:
            self.lsa_arrival = lsa_arrival
        if flood_pacing is not None:
            self.flood_pacing = flood_pacing

    @property
    def spf_throttle_timer(self):
        """Gets the spf_throttle_timer of this IOspfTimers.  # noqa: E501


        :return: The spf_throttle_timer of this IOspfTimers.  # noqa: E501
        :rtype: ISpfThrottleTimer
        """
        return self._spf_throttle_timer

    @spf_throttle_timer.setter
    def spf_throttle_timer(self, spf_throttle_timer):
        """Sets the spf_throttle_timer of this IOspfTimers.


        :param spf_throttle_timer: The spf_throttle_timer of this IOspfTimers.  # noqa: E501
        :type: ISpfThrottleTimer
        """

        self._spf_throttle_timer = spf_throttle_timer

    @property
    def lsa_throttle_timer(self):
        """Gets the lsa_throttle_timer of this IOspfTimers.  # noqa: E501


        :return: The lsa_throttle_timer of this IOspfTimers.  # noqa: E501
        :rtype: ILsaThrottleTimer
        """
        return self._lsa_throttle_timer

    @lsa_throttle_timer.setter
    def lsa_throttle_timer(self, lsa_throttle_timer):
        """Sets the lsa_throttle_timer of this IOspfTimers.


        :param lsa_throttle_timer: The lsa_throttle_timer of this IOspfTimers.  # noqa: E501
        :type: ILsaThrottleTimer
        """

        self._lsa_throttle_timer = lsa_throttle_timer

    @property
    def lsa_group(self):
        """Gets the lsa_group of this IOspfTimers.  # noqa: E501


        :return: The lsa_group of this IOspfTimers.  # noqa: E501
        :rtype: int
        """
        return self._lsa_group

    @lsa_group.setter
    def lsa_group(self, lsa_group):
        """Sets the lsa_group of this IOspfTimers.


        :param lsa_group: The lsa_group of this IOspfTimers.  # noqa: E501
        :type: int
        """

        self._lsa_group = lsa_group

    @property
    def retransmission(self):
        """Gets the retransmission of this IOspfTimers.  # noqa: E501


        :return: The retransmission of this IOspfTimers.  # noqa: E501
        :rtype: int
        """
        return self._retransmission

    @retransmission.setter
    def retransmission(self, retransmission):
        """Sets the retransmission of this IOspfTimers.


        :param retransmission: The retransmission of this IOspfTimers.  # noqa: E501
        :type: int
        """

        self._retransmission = retransmission

    @property
    def lsa_arrival(self):
        """Gets the lsa_arrival of this IOspfTimers.  # noqa: E501


        :return: The lsa_arrival of this IOspfTimers.  # noqa: E501
        :rtype: int
        """
        return self._lsa_arrival

    @lsa_arrival.setter
    def lsa_arrival(self, lsa_arrival):
        """Sets the lsa_arrival of this IOspfTimers.


        :param lsa_arrival: The lsa_arrival of this IOspfTimers.  # noqa: E501
        :type: int
        """

        self._lsa_arrival = lsa_arrival

    @property
    def flood_pacing(self):
        """Gets the flood_pacing of this IOspfTimers.  # noqa: E501


        :return: The flood_pacing of this IOspfTimers.  # noqa: E501
        :rtype: int
        """
        return self._flood_pacing

    @flood_pacing.setter
    def flood_pacing(self, flood_pacing):
        """Sets the flood_pacing of this IOspfTimers.


        :param flood_pacing: The flood_pacing of this IOspfTimers.  # noqa: E501
        :type: int
        """

        self._flood_pacing = flood_pacing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfTimers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfTimers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfTimers):
            return True

        return self.to_dict() != other.to_dict()
