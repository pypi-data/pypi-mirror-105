# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class ISLAMonitorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'no_of_packets': 'int',
        'sla_id': 'int',
        'data_size': 'int',
        'description': 'str',
        'threshold': 'int',
        'interface_names': 'list[str]',
        'type': 'str',
        'version': 'str',
        'timeout': 'int',
        'interface_objects': 'list[IInterfaceObjectModel]',
        'frequency': 'int',
        'monitor_address': 'str',
        'name': 'str',
        'tos': 'int',
        'links': 'ILinks',
        'id': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'no_of_packets': 'noOfPackets',
        'sla_id': 'slaId',
        'data_size': 'dataSize',
        'description': 'description',
        'threshold': 'threshold',
        'interface_names': 'interfaceNames',
        'type': 'type',
        'version': 'version',
        'timeout': 'timeout',
        'interface_objects': 'interfaceObjects',
        'frequency': 'frequency',
        'monitor_address': 'monitorAddress',
        'name': 'name',
        'tos': 'tos',
        'links': 'links',
        'id': 'id'
    }

    def __init__(self, metadata=None, no_of_packets=None, sla_id=None, data_size=None, description=None, threshold=None, interface_names=None, type=None, version=None, timeout=None, interface_objects=None, frequency=None, monitor_address=None, name=None, tos=None, links=None, id=None, _configuration=None):  # noqa: E501
        """ISLAMonitorModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._no_of_packets = None
        self._sla_id = None
        self._data_size = None
        self._description = None
        self._threshold = None
        self._interface_names = None
        self._type = None
        self._version = None
        self._timeout = None
        self._interface_objects = None
        self._frequency = None
        self._monitor_address = None
        self._name = None
        self._tos = None
        self._links = None
        self._id = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if no_of_packets is not None:
            self.no_of_packets = no_of_packets
        self.sla_id = sla_id
        if data_size is not None:
            self.data_size = data_size
        if description is not None:
            self.description = description
        if threshold is not None:
            self.threshold = threshold
        if interface_names is not None:
            self.interface_names = interface_names
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if timeout is not None:
            self.timeout = timeout
        self.interface_objects = interface_objects
        if frequency is not None:
            self.frequency = frequency
        self.monitor_address = monitor_address
        if name is not None:
            self.name = name
        if tos is not None:
            self.tos = tos
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id

    @property
    def metadata(self):
        """Gets the metadata of this ISLAMonitorModel.  # noqa: E501


        :return: The metadata of this ISLAMonitorModel.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ISLAMonitorModel.


        :param metadata: The metadata of this ISLAMonitorModel.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def no_of_packets(self):
        """Gets the no_of_packets of this ISLAMonitorModel.  # noqa: E501


        :return: The no_of_packets of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._no_of_packets

    @no_of_packets.setter
    def no_of_packets(self, no_of_packets):
        """Sets the no_of_packets of this ISLAMonitorModel.


        :param no_of_packets: The no_of_packets of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """

        self._no_of_packets = no_of_packets

    @property
    def sla_id(self):
        """Gets the sla_id of this ISLAMonitorModel.  # noqa: E501


        :return: The sla_id of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._sla_id

    @sla_id.setter
    def sla_id(self, sla_id):
        """Sets the sla_id of this ISLAMonitorModel.


        :param sla_id: The sla_id of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and sla_id is None:
            raise ValueError("Invalid value for `sla_id`, must not be `None`")  # noqa: E501

        self._sla_id = sla_id

    @property
    def data_size(self):
        """Gets the data_size of this ISLAMonitorModel.  # noqa: E501


        :return: The data_size of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._data_size

    @data_size.setter
    def data_size(self, data_size):
        """Sets the data_size of this ISLAMonitorModel.


        :param data_size: The data_size of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """

        self._data_size = data_size

    @property
    def description(self):
        """Gets the description of this ISLAMonitorModel.  # noqa: E501


        :return: The description of this ISLAMonitorModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ISLAMonitorModel.


        :param description: The description of this ISLAMonitorModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def threshold(self):
        """Gets the threshold of this ISLAMonitorModel.  # noqa: E501


        :return: The threshold of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ISLAMonitorModel.


        :param threshold: The threshold of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    @property
    def interface_names(self):
        """Gets the interface_names of this ISLAMonitorModel.  # noqa: E501


        :return: The interface_names of this ISLAMonitorModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._interface_names

    @interface_names.setter
    def interface_names(self, interface_names):
        """Sets the interface_names of this ISLAMonitorModel.


        :param interface_names: The interface_names of this ISLAMonitorModel.  # noqa: E501
        :type: list[str]
        """

        self._interface_names = interface_names

    @property
    def type(self):
        """Gets the type of this ISLAMonitorModel.  # noqa: E501


        :return: The type of this ISLAMonitorModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ISLAMonitorModel.


        :param type: The type of this ISLAMonitorModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this ISLAMonitorModel.  # noqa: E501


        :return: The version of this ISLAMonitorModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ISLAMonitorModel.


        :param version: The version of this ISLAMonitorModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def timeout(self):
        """Gets the timeout of this ISLAMonitorModel.  # noqa: E501


        :return: The timeout of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ISLAMonitorModel.


        :param timeout: The timeout of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def interface_objects(self):
        """Gets the interface_objects of this ISLAMonitorModel.  # noqa: E501


        :return: The interface_objects of this ISLAMonitorModel.  # noqa: E501
        :rtype: list[IInterfaceObjectModel]
        """
        return self._interface_objects

    @interface_objects.setter
    def interface_objects(self, interface_objects):
        """Sets the interface_objects of this ISLAMonitorModel.


        :param interface_objects: The interface_objects of this ISLAMonitorModel.  # noqa: E501
        :type: list[IInterfaceObjectModel]
        """
        if self._configuration.client_side_validation and interface_objects is None:
            raise ValueError("Invalid value for `interface_objects`, must not be `None`")  # noqa: E501

        self._interface_objects = interface_objects

    @property
    def frequency(self):
        """Gets the frequency of this ISLAMonitorModel.  # noqa: E501


        :return: The frequency of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ISLAMonitorModel.


        :param frequency: The frequency of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def monitor_address(self):
        """Gets the monitor_address of this ISLAMonitorModel.  # noqa: E501


        :return: The monitor_address of this ISLAMonitorModel.  # noqa: E501
        :rtype: str
        """
        return self._monitor_address

    @monitor_address.setter
    def monitor_address(self, monitor_address):
        """Sets the monitor_address of this ISLAMonitorModel.


        :param monitor_address: The monitor_address of this ISLAMonitorModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and monitor_address is None:
            raise ValueError("Invalid value for `monitor_address`, must not be `None`")  # noqa: E501

        self._monitor_address = monitor_address

    @property
    def name(self):
        """Gets the name of this ISLAMonitorModel.  # noqa: E501


        :return: The name of this ISLAMonitorModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ISLAMonitorModel.


        :param name: The name of this ISLAMonitorModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tos(self):
        """Gets the tos of this ISLAMonitorModel.  # noqa: E501


        :return: The tos of this ISLAMonitorModel.  # noqa: E501
        :rtype: int
        """
        return self._tos

    @tos.setter
    def tos(self, tos):
        """Sets the tos of this ISLAMonitorModel.


        :param tos: The tos of this ISLAMonitorModel.  # noqa: E501
        :type: int
        """

        self._tos = tos

    @property
    def links(self):
        """Gets the links of this ISLAMonitorModel.  # noqa: E501


        :return: The links of this ISLAMonitorModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ISLAMonitorModel.


        :param links: The links of this ISLAMonitorModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this ISLAMonitorModel.  # noqa: E501


        :return: The id of this ISLAMonitorModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ISLAMonitorModel.


        :param id: The id of this ISLAMonitorModel.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ISLAMonitorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ISLAMonitorModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ISLAMonitorModel):
            return True

        return self.to_dict() != other.to_dict()
