# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class ISSOAdvancedConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_role': 'IReference',
        'roles': 'list[ISSORole]',
        'member_attr': 'str'
    }

    attribute_map = {
        'default_role': 'defaultRole',
        'roles': 'roles',
        'member_attr': 'memberAttr'
    }

    def __init__(self, default_role=None, roles=None, member_attr=None, _configuration=None):  # noqa: E501
        """ISSOAdvancedConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default_role = None
        self._roles = None
        self._member_attr = None
        self.discriminator = None

        if default_role is not None:
            self.default_role = default_role
        if roles is not None:
            self.roles = roles
        if member_attr is not None:
            self.member_attr = member_attr

    @property
    def default_role(self):
        """Gets the default_role of this ISSOAdvancedConfig.  # noqa: E501


        :return: The default_role of this ISSOAdvancedConfig.  # noqa: E501
        :rtype: IReference
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """Sets the default_role of this ISSOAdvancedConfig.


        :param default_role: The default_role of this ISSOAdvancedConfig.  # noqa: E501
        :type: IReference
        """

        self._default_role = default_role

    @property
    def roles(self):
        """Gets the roles of this ISSOAdvancedConfig.  # noqa: E501


        :return: The roles of this ISSOAdvancedConfig.  # noqa: E501
        :rtype: list[ISSORole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ISSOAdvancedConfig.


        :param roles: The roles of this ISSOAdvancedConfig.  # noqa: E501
        :type: list[ISSORole]
        """

        self._roles = roles

    @property
    def member_attr(self):
        """Gets the member_attr of this ISSOAdvancedConfig.  # noqa: E501


        :return: The member_attr of this ISSOAdvancedConfig.  # noqa: E501
        :rtype: str
        """
        return self._member_attr

    @member_attr.setter
    def member_attr(self, member_attr):
        """Sets the member_attr of this ISSOAdvancedConfig.


        :param member_attr: The member_attr of this ISSOAdvancedConfig.  # noqa: E501
        :type: str
        """

        self._member_attr = member_attr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ISSOAdvancedConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ISSOAdvancedConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ISSOAdvancedConfig):
            return True

        return self.to_dict() != other.to_dict()
