# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IDependentPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependency_reason': 'str',
        'dependent_type_list': 'list[str]'
    }

    attribute_map = {
        'dependency_reason': 'dependencyReason',
        'dependent_type_list': 'dependentTypeList'
    }

    def __init__(self, dependency_reason=None, dependent_type_list=None, _configuration=None):  # noqa: E501
        """IDependentPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dependency_reason = None
        self._dependent_type_list = None
        self.discriminator = None

        if dependency_reason is not None:
            self.dependency_reason = dependency_reason
        if dependent_type_list is not None:
            self.dependent_type_list = dependent_type_list

    @property
    def dependency_reason(self):
        """Gets the dependency_reason of this IDependentPolicy.  # noqa: E501

        Describes the reason for the inter-dependency between the out-of-date policies.  # noqa: E501

        :return: The dependency_reason of this IDependentPolicy.  # noqa: E501
        :rtype: str
        """
        return self._dependency_reason

    @dependency_reason.setter
    def dependency_reason(self, dependency_reason):
        """Sets the dependency_reason of this IDependentPolicy.

        Describes the reason for the inter-dependency between the out-of-date policies.  # noqa: E501

        :param dependency_reason: The dependency_reason of this IDependentPolicy.  # noqa: E501
        :type: str
        """

        self._dependency_reason = dependency_reason

    @property
    def dependent_type_list(self):
        """Gets the dependent_type_list of this IDependentPolicy.  # noqa: E501

        List of out-of-date policies which are inter-dependent.  # noqa: E501

        :return: The dependent_type_list of this IDependentPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependent_type_list

    @dependent_type_list.setter
    def dependent_type_list(self, dependent_type_list):
        """Sets the dependent_type_list of this IDependentPolicy.

        List of out-of-date policies which are inter-dependent.  # noqa: E501

        :param dependent_type_list: The dependent_type_list of this IDependentPolicy.  # noqa: E501
        :type: list[str]
        """

        self._dependent_type_list = dependent_type_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IDependentPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDependentPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IDependentPolicy):
            return True

        return self.to_dict() != other.to_dict()
