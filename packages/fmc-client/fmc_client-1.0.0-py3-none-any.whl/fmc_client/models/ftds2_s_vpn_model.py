# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class FTDS2SVpnModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoints': 'object',
        'metadata': 'IMetadata',
        'description': 'str',
        'type': 'str',
        'route_based': 'bool',
        'ipsec_settings': 'IReference',
        'version': 'str',
        'ike_v1_enabled': 'bool',
        'ike_v2_enabled': 'bool',
        'topology_type': 'str',
        'advanced_settings': 'IReference',
        'name': 'str',
        'links': 'ILinks',
        'ike_settings': 'IReference',
        'id': 'str'
    }

    attribute_map = {
        'endpoints': 'endpoints',
        'metadata': 'metadata',
        'description': 'description',
        'type': 'type',
        'route_based': 'routeBased',
        'ipsec_settings': 'ipsecSettings',
        'version': 'version',
        'ike_v1_enabled': 'ikeV1Enabled',
        'ike_v2_enabled': 'ikeV2Enabled',
        'topology_type': 'topologyType',
        'advanced_settings': 'advancedSettings',
        'name': 'name',
        'links': 'links',
        'ike_settings': 'ikeSettings',
        'id': 'id'
    }

    def __init__(self, endpoints=None, metadata=None, description=None, type=None, route_based=None, ipsec_settings=None, version=None, ike_v1_enabled=None, ike_v2_enabled=None, topology_type=None, advanced_settings=None, name=None, links=None, ike_settings=None, id=None, _configuration=None):  # noqa: E501
        """FTDS2SVpnModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._endpoints = None
        self._metadata = None
        self._description = None
        self._type = None
        self._route_based = None
        self._ipsec_settings = None
        self._version = None
        self._ike_v1_enabled = None
        self._ike_v2_enabled = None
        self._topology_type = None
        self._advanced_settings = None
        self._name = None
        self._links = None
        self._ike_settings = None
        self._id = None
        self.discriminator = None

        if endpoints is not None:
            self.endpoints = endpoints
        if metadata is not None:
            self.metadata = metadata
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if route_based is not None:
            self.route_based = route_based
        if ipsec_settings is not None:
            self.ipsec_settings = ipsec_settings
        if version is not None:
            self.version = version
        if ike_v1_enabled is not None:
            self.ike_v1_enabled = ike_v1_enabled
        if ike_v2_enabled is not None:
            self.ike_v2_enabled = ike_v2_enabled
        if topology_type is not None:
            self.topology_type = topology_type
        if advanced_settings is not None:
            self.advanced_settings = advanced_settings
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if ike_settings is not None:
            self.ike_settings = ike_settings
        if id is not None:
            self.id = id

    @property
    def endpoints(self):
        """Gets the endpoints of this FTDS2SVpnModel.  # noqa: E501

        Contains information for VPN endpoints.  # noqa: E501

        :return: The endpoints of this FTDS2SVpnModel.  # noqa: E501
        :rtype: object
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this FTDS2SVpnModel.

        Contains information for VPN endpoints.  # noqa: E501

        :param endpoints: The endpoints of this FTDS2SVpnModel.  # noqa: E501
        :type: object
        """

        self._endpoints = endpoints

    @property
    def metadata(self):
        """Gets the metadata of this FTDS2SVpnModel.  # noqa: E501

        Object representing metadata properties of response object.  # noqa: E501

        :return: The metadata of this FTDS2SVpnModel.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FTDS2SVpnModel.

        Object representing metadata properties of response object.  # noqa: E501

        :param metadata: The metadata of this FTDS2SVpnModel.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def description(self):
        """Gets the description of this FTDS2SVpnModel.  # noqa: E501

        User provided description.  # noqa: E501

        :return: The description of this FTDS2SVpnModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FTDS2SVpnModel.

        User provided description.  # noqa: E501

        :param description: The description of this FTDS2SVpnModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this FTDS2SVpnModel.  # noqa: E501

        Response object associated with resource.  # noqa: E501

        :return: The type of this FTDS2SVpnModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FTDS2SVpnModel.

        Response object associated with resource.  # noqa: E501

        :param type: The type of this FTDS2SVpnModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def route_based(self):
        """Gets the route_based of this FTDS2SVpnModel.  # noqa: E501


        :return: The route_based of this FTDS2SVpnModel.  # noqa: E501
        :rtype: bool
        """
        return self._route_based

    @route_based.setter
    def route_based(self, route_based):
        """Sets the route_based of this FTDS2SVpnModel.


        :param route_based: The route_based of this FTDS2SVpnModel.  # noqa: E501
        :type: bool
        """

        self._route_based = route_based

    @property
    def ipsec_settings(self):
        """Gets the ipsec_settings of this FTDS2SVpnModel.  # noqa: E501

        Object representing IPSEC settings for the VPN.  # noqa: E501

        :return: The ipsec_settings of this FTDS2SVpnModel.  # noqa: E501
        :rtype: IReference
        """
        return self._ipsec_settings

    @ipsec_settings.setter
    def ipsec_settings(self, ipsec_settings):
        """Sets the ipsec_settings of this FTDS2SVpnModel.

        Object representing IPSEC settings for the VPN.  # noqa: E501

        :param ipsec_settings: The ipsec_settings of this FTDS2SVpnModel.  # noqa: E501
        :type: IReference
        """

        self._ipsec_settings = ipsec_settings

    @property
    def version(self):
        """Gets the version of this FTDS2SVpnModel.  # noqa: E501

        Version number of the response object.  # noqa: E501

        :return: The version of this FTDS2SVpnModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FTDS2SVpnModel.

        Version number of the response object.  # noqa: E501

        :param version: The version of this FTDS2SVpnModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def ike_v1_enabled(self):
        """Gets the ike_v1_enabled of this FTDS2SVpnModel.  # noqa: E501

        Boolean indicating whether the VPN connection is using INternet Key Exchange v1.  # noqa: E501

        :return: The ike_v1_enabled of this FTDS2SVpnModel.  # noqa: E501
        :rtype: bool
        """
        return self._ike_v1_enabled

    @ike_v1_enabled.setter
    def ike_v1_enabled(self, ike_v1_enabled):
        """Sets the ike_v1_enabled of this FTDS2SVpnModel.

        Boolean indicating whether the VPN connection is using INternet Key Exchange v1.  # noqa: E501

        :param ike_v1_enabled: The ike_v1_enabled of this FTDS2SVpnModel.  # noqa: E501
        :type: bool
        """

        self._ike_v1_enabled = ike_v1_enabled

    @property
    def ike_v2_enabled(self):
        """Gets the ike_v2_enabled of this FTDS2SVpnModel.  # noqa: E501

        Boolean indicating whether the VPN connection is using INternet Key Exchange v2.  # noqa: E501

        :return: The ike_v2_enabled of this FTDS2SVpnModel.  # noqa: E501
        :rtype: bool
        """
        return self._ike_v2_enabled

    @ike_v2_enabled.setter
    def ike_v2_enabled(self, ike_v2_enabled):
        """Sets the ike_v2_enabled of this FTDS2SVpnModel.

        Boolean indicating whether the VPN connection is using INternet Key Exchange v2.  # noqa: E501

        :param ike_v2_enabled: The ike_v2_enabled of this FTDS2SVpnModel.  # noqa: E501
        :type: bool
        """

        self._ike_v2_enabled = ike_v2_enabled

    @property
    def topology_type(self):
        """Gets the topology_type of this FTDS2SVpnModel.  # noqa: E501

        Indicates the type of topolgy used by the VPN.  # noqa: E501

        :return: The topology_type of this FTDS2SVpnModel.  # noqa: E501
        :rtype: str
        """
        return self._topology_type

    @topology_type.setter
    def topology_type(self, topology_type):
        """Sets the topology_type of this FTDS2SVpnModel.

        Indicates the type of topolgy used by the VPN.  # noqa: E501

        :param topology_type: The topology_type of this FTDS2SVpnModel.  # noqa: E501
        :type: str
        """

        self._topology_type = topology_type

    @property
    def advanced_settings(self):
        """Gets the advanced_settings of this FTDS2SVpnModel.  # noqa: E501

        Contains advanced settings for the VPN.  # noqa: E501

        :return: The advanced_settings of this FTDS2SVpnModel.  # noqa: E501
        :rtype: IReference
        """
        return self._advanced_settings

    @advanced_settings.setter
    def advanced_settings(self, advanced_settings):
        """Sets the advanced_settings of this FTDS2SVpnModel.

        Contains advanced settings for the VPN.  # noqa: E501

        :param advanced_settings: The advanced_settings of this FTDS2SVpnModel.  # noqa: E501
        :type: IReference
        """

        self._advanced_settings = advanced_settings

    @property
    def name(self):
        """Gets the name of this FTDS2SVpnModel.  # noqa: E501

        User chosen resource name.  # noqa: E501

        :return: The name of this FTDS2SVpnModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FTDS2SVpnModel.

        User chosen resource name.  # noqa: E501

        :param name: The name of this FTDS2SVpnModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this FTDS2SVpnModel.  # noqa: E501

        Object containing links to this resource.  # noqa: E501

        :return: The links of this FTDS2SVpnModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FTDS2SVpnModel.

        Object containing links to this resource.  # noqa: E501

        :param links: The links of this FTDS2SVpnModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def ike_settings(self):
        """Gets the ike_settings of this FTDS2SVpnModel.  # noqa: E501

        Object representing Internet Key Exchange settings for the VPN.  # noqa: E501

        :return: The ike_settings of this FTDS2SVpnModel.  # noqa: E501
        :rtype: IReference
        """
        return self._ike_settings

    @ike_settings.setter
    def ike_settings(self, ike_settings):
        """Sets the ike_settings of this FTDS2SVpnModel.

        Object representing Internet Key Exchange settings for the VPN.  # noqa: E501

        :param ike_settings: The ike_settings of this FTDS2SVpnModel.  # noqa: E501
        :type: IReference
        """

        self._ike_settings = ike_settings

    @property
    def id(self):
        """Gets the id of this FTDS2SVpnModel.  # noqa: E501

        Unique identifier representing resource.  # noqa: E501

        :return: The id of this FTDS2SVpnModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FTDS2SVpnModel.

        Unique identifier representing resource.  # noqa: E501

        :param id: The id of this FTDS2SVpnModel.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FTDS2SVpnModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FTDS2SVpnModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FTDS2SVpnModel):
            return True

        return self.to_dict() != other.to_dict()
