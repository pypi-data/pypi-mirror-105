# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class TimeZoneObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'Metadata',
        'time_zone_id': 'str',
        'time_zone': 'str',
        'description': 'str',
        'overrides': 'IOverride',
        'type': 'str',
        'version': 'str',
        'override_target_id': 'str',
        'dst_date_range': 'ITimeZoneDateRangeFragment',
        'dst_day_recurrence': 'ITimeZoneDayRecurrenceFragment',
        'name': 'str',
        'overridable': 'bool',
        'links': 'Links',
        'id': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'time_zone_id': 'timeZoneId',
        'time_zone': 'timeZone',
        'description': 'description',
        'overrides': 'overrides',
        'type': 'type',
        'version': 'version',
        'override_target_id': 'overrideTargetId',
        'dst_date_range': 'dstDateRange',
        'dst_day_recurrence': 'dstDayRecurrence',
        'name': 'name',
        'overridable': 'overridable',
        'links': 'links',
        'id': 'id'
    }

    def __init__(self, metadata=None, time_zone_id=None, time_zone=None, description=None, overrides=None, type=None, version=None, override_target_id=None, dst_date_range=None, dst_day_recurrence=None, name=None, overridable=None, links=None, id=None, _configuration=None):  # noqa: E501
        """TimeZoneObject - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._time_zone_id = None
        self._time_zone = None
        self._description = None
        self._overrides = None
        self._type = None
        self._version = None
        self._override_target_id = None
        self._dst_date_range = None
        self._dst_day_recurrence = None
        self._name = None
        self._overridable = None
        self._links = None
        self._id = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if time_zone is not None:
            self.time_zone = time_zone
        if description is not None:
            self.description = description
        if overrides is not None:
            self.overrides = overrides
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if override_target_id is not None:
            self.override_target_id = override_target_id
        if dst_date_range is not None:
            self.dst_date_range = dst_date_range
        if dst_day_recurrence is not None:
            self.dst_day_recurrence = dst_day_recurrence
        if name is not None:
            self.name = name
        if overridable is not None:
            self.overridable = overridable
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id

    @property
    def metadata(self):
        """Gets the metadata of this TimeZoneObject.  # noqa: E501

        Object representing metadata properties of the response object.  # noqa: E501

        :return: The metadata of this TimeZoneObject.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TimeZoneObject.

        Object representing metadata properties of the response object.  # noqa: E501

        :param metadata: The metadata of this TimeZoneObject.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this TimeZoneObject.  # noqa: E501

        Unique identifier of the global time zone from the IANA time zone (tz) database.  # noqa: E501

        :return: The time_zone_id of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this TimeZoneObject.

        Unique identifier of the global time zone from the IANA time zone (tz) database.  # noqa: E501

        :param time_zone_id: The time_zone_id of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def time_zone(self):
        """Gets the time_zone of this TimeZoneObject.  # noqa: E501

        Read-only field containing description of the specified global time zone (timeZoneId).  # noqa: E501

        :return: The time_zone of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TimeZoneObject.

        Read-only field containing description of the specified global time zone (timeZoneId).  # noqa: E501

        :param time_zone: The time_zone of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def description(self):
        """Gets the description of this TimeZoneObject.  # noqa: E501

        User provided resource description.   # noqa: E501

        :return: The description of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeZoneObject.

        User provided resource description.   # noqa: E501

        :param description: The description of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def overrides(self):
        """Gets the overrides of this TimeZoneObject.  # noqa: E501

        An object override allows you to define an alternate value for an object on a device or domain.  # noqa: E501

        :return: The overrides of this TimeZoneObject.  # noqa: E501
        :rtype: IOverride
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this TimeZoneObject.

        An object override allows you to define an alternate value for an object on a device or domain.  # noqa: E501

        :param overrides: The overrides of this TimeZoneObject.  # noqa: E501
        :type: IOverride
        """

        self._overrides = overrides

    @property
    def type(self):
        """Gets the type of this TimeZoneObject.  # noqa: E501

        Type of the response object. This value is always TimeZoneObject.  # noqa: E501

        :return: The type of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeZoneObject.

        Type of the response object. This value is always TimeZoneObject.  # noqa: E501

        :param type: The type of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this TimeZoneObject.  # noqa: E501

        Version number of the response object.  # noqa: E501

        :return: The version of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TimeZoneObject.

        Version number of the response object.  # noqa: E501

        :param version: The version of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def override_target_id(self):
        """Gets the override_target_id of this TimeZoneObject.  # noqa: E501

        Unique identifier of domain or device when override assigned to child domain. Used as path parameter to GET override details for a specific object on a specific target (device or domain).  # noqa: E501

        :return: The override_target_id of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._override_target_id

    @override_target_id.setter
    def override_target_id(self, override_target_id):
        """Sets the override_target_id of this TimeZoneObject.

        Unique identifier of domain or device when override assigned to child domain. Used as path parameter to GET override details for a specific object on a specific target (device or domain).  # noqa: E501

        :param override_target_id: The override_target_id of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._override_target_id = override_target_id

    @property
    def dst_date_range(self):
        """Gets the dst_date_range of this TimeZoneObject.  # noqa: E501

        Object representing the daylight saving configuration by date range. Either dstDateRange or dstDayRecurrence field must be configured to enable daylight saving for the object.  # noqa: E501

        :return: The dst_date_range of this TimeZoneObject.  # noqa: E501
        :rtype: ITimeZoneDateRangeFragment
        """
        return self._dst_date_range

    @dst_date_range.setter
    def dst_date_range(self, dst_date_range):
        """Sets the dst_date_range of this TimeZoneObject.

        Object representing the daylight saving configuration by date range. Either dstDateRange or dstDayRecurrence field must be configured to enable daylight saving for the object.  # noqa: E501

        :param dst_date_range: The dst_date_range of this TimeZoneObject.  # noqa: E501
        :type: ITimeZoneDateRangeFragment
        """

        self._dst_date_range = dst_date_range

    @property
    def dst_day_recurrence(self):
        """Gets the dst_day_recurrence of this TimeZoneObject.  # noqa: E501

        Object representing the daylight saving configuration by day-based recurrence. Either dstDateRange or dstDayRecurrence field must be configured to enable daylight saving.  # noqa: E501

        :return: The dst_day_recurrence of this TimeZoneObject.  # noqa: E501
        :rtype: ITimeZoneDayRecurrenceFragment
        """
        return self._dst_day_recurrence

    @dst_day_recurrence.setter
    def dst_day_recurrence(self, dst_day_recurrence):
        """Sets the dst_day_recurrence of this TimeZoneObject.

        Object representing the daylight saving configuration by day-based recurrence. Either dstDateRange or dstDayRecurrence field must be configured to enable daylight saving.  # noqa: E501

        :param dst_day_recurrence: The dst_day_recurrence of this TimeZoneObject.  # noqa: E501
        :type: ITimeZoneDayRecurrenceFragment
        """

        self._dst_day_recurrence = dst_day_recurrence

    @property
    def name(self):
        """Gets the name of this TimeZoneObject.  # noqa: E501

        User assigned resource name.  # noqa: E501

        :return: The name of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeZoneObject.

        User assigned resource name.  # noqa: E501

        :param name: The name of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def overridable(self):
        """Gets the overridable of this TimeZoneObject.  # noqa: E501

        Boolean indicating whether object values can be overridden.  # noqa: E501

        :return: The overridable of this TimeZoneObject.  # noqa: E501
        :rtype: bool
        """
        return self._overridable

    @overridable.setter
    def overridable(self, overridable):
        """Sets the overridable of this TimeZoneObject.

        Boolean indicating whether object values can be overridden.  # noqa: E501

        :param overridable: The overridable of this TimeZoneObject.  # noqa: E501
        :type: bool
        """

        self._overridable = overridable

    @property
    def links(self):
        """Gets the links of this TimeZoneObject.  # noqa: E501

        Object containing related links.  # noqa: E501

        :return: The links of this TimeZoneObject.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TimeZoneObject.

        Object containing related links.  # noqa: E501

        :param links: The links of this TimeZoneObject.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this TimeZoneObject.  # noqa: E501

        Unique identifier representing response object.  # noqa: E501

        :return: The id of this TimeZoneObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeZoneObject.

        Unique identifier representing response object.  # noqa: E501

        :param id: The id of this TimeZoneObject.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeZoneObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeZoneObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeZoneObject):
            return True

        return self.to_dict() != other.to_dict()
