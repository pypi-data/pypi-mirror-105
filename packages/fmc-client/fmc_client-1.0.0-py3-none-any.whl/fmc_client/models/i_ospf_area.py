# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_networks': 'list[INetworkAddress]',
        'default_cost': 'int',
        'area_id': 'str',
        'area_type': 'IOspfAreaType',
        'virtual_links': 'list[IOspfVirtualLinks]',
        'area_ranges': 'list[IOspfAreaRanges]',
        'filter_list': 'list[IOspfFilterList]',
        'authentication': 'str'
    }

    attribute_map = {
        'area_networks': 'areaNetworks',
        'default_cost': 'defaultCost',
        'area_id': 'areaId',
        'area_type': 'areaType',
        'virtual_links': 'virtualLinks',
        'area_ranges': 'areaRanges',
        'filter_list': 'filterList',
        'authentication': 'authentication'
    }

    def __init__(self, area_networks=None, default_cost=None, area_id=None, area_type=None, virtual_links=None, area_ranges=None, filter_list=None, authentication=None, _configuration=None):  # noqa: E501
        """IOspfArea - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._area_networks = None
        self._default_cost = None
        self._area_id = None
        self._area_type = None
        self._virtual_links = None
        self._area_ranges = None
        self._filter_list = None
        self._authentication = None
        self.discriminator = None

        if area_networks is not None:
            self.area_networks = area_networks
        if default_cost is not None:
            self.default_cost = default_cost
        if area_id is not None:
            self.area_id = area_id
        if area_type is not None:
            self.area_type = area_type
        if virtual_links is not None:
            self.virtual_links = virtual_links
        if area_ranges is not None:
            self.area_ranges = area_ranges
        if filter_list is not None:
            self.filter_list = filter_list
        if authentication is not None:
            self.authentication = authentication

    @property
    def area_networks(self):
        """Gets the area_networks of this IOspfArea.  # noqa: E501


        :return: The area_networks of this IOspfArea.  # noqa: E501
        :rtype: list[INetworkAddress]
        """
        return self._area_networks

    @area_networks.setter
    def area_networks(self, area_networks):
        """Sets the area_networks of this IOspfArea.


        :param area_networks: The area_networks of this IOspfArea.  # noqa: E501
        :type: list[INetworkAddress]
        """

        self._area_networks = area_networks

    @property
    def default_cost(self):
        """Gets the default_cost of this IOspfArea.  # noqa: E501


        :return: The default_cost of this IOspfArea.  # noqa: E501
        :rtype: int
        """
        return self._default_cost

    @default_cost.setter
    def default_cost(self, default_cost):
        """Sets the default_cost of this IOspfArea.


        :param default_cost: The default_cost of this IOspfArea.  # noqa: E501
        :type: int
        """

        self._default_cost = default_cost

    @property
    def area_id(self):
        """Gets the area_id of this IOspfArea.  # noqa: E501


        :return: The area_id of this IOspfArea.  # noqa: E501
        :rtype: str
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this IOspfArea.


        :param area_id: The area_id of this IOspfArea.  # noqa: E501
        :type: str
        """

        self._area_id = area_id

    @property
    def area_type(self):
        """Gets the area_type of this IOspfArea.  # noqa: E501


        :return: The area_type of this IOspfArea.  # noqa: E501
        :rtype: IOspfAreaType
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this IOspfArea.


        :param area_type: The area_type of this IOspfArea.  # noqa: E501
        :type: IOspfAreaType
        """

        self._area_type = area_type

    @property
    def virtual_links(self):
        """Gets the virtual_links of this IOspfArea.  # noqa: E501


        :return: The virtual_links of this IOspfArea.  # noqa: E501
        :rtype: list[IOspfVirtualLinks]
        """
        return self._virtual_links

    @virtual_links.setter
    def virtual_links(self, virtual_links):
        """Sets the virtual_links of this IOspfArea.


        :param virtual_links: The virtual_links of this IOspfArea.  # noqa: E501
        :type: list[IOspfVirtualLinks]
        """

        self._virtual_links = virtual_links

    @property
    def area_ranges(self):
        """Gets the area_ranges of this IOspfArea.  # noqa: E501


        :return: The area_ranges of this IOspfArea.  # noqa: E501
        :rtype: list[IOspfAreaRanges]
        """
        return self._area_ranges

    @area_ranges.setter
    def area_ranges(self, area_ranges):
        """Sets the area_ranges of this IOspfArea.


        :param area_ranges: The area_ranges of this IOspfArea.  # noqa: E501
        :type: list[IOspfAreaRanges]
        """

        self._area_ranges = area_ranges

    @property
    def filter_list(self):
        """Gets the filter_list of this IOspfArea.  # noqa: E501


        :return: The filter_list of this IOspfArea.  # noqa: E501
        :rtype: list[IOspfFilterList]
        """
        return self._filter_list

    @filter_list.setter
    def filter_list(self, filter_list):
        """Sets the filter_list of this IOspfArea.


        :param filter_list: The filter_list of this IOspfArea.  # noqa: E501
        :type: list[IOspfFilterList]
        """

        self._filter_list = filter_list

    @property
    def authentication(self):
        """Gets the authentication of this IOspfArea.  # noqa: E501


        :return: The authentication of this IOspfArea.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this IOspfArea.


        :param authentication: The authentication of this IOspfArea.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASSWORD", "MESSAGE_DIGEST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                authentication not in allowed_values):
            raise ValueError(
                "Invalid value for `authentication` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication, allowed_values)
            )

        self._authentication = authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfArea):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfArea):
            return True

        return self.to_dict() != other.to_dict()
