# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class HealthAlertModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'module_uuid': 'str',
        'description': 'str',
        'params': 'str',
        'type': 'str',
        'version': 'str',
        'name': 'str',
        'details': 'str',
        'links': 'ILinks',
        'id': 'str',
        'module_id': 'str',
        'device_uuid': 'str',
        'timestamp': 'int',
        'status': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'module_uuid': 'moduleUUID',
        'description': 'description',
        'params': 'params',
        'type': 'type',
        'version': 'version',
        'name': 'name',
        'details': 'details',
        'links': 'links',
        'id': 'id',
        'module_id': 'moduleID',
        'device_uuid': 'deviceUUID',
        'timestamp': 'timestamp',
        'status': 'status'
    }

    def __init__(self, metadata=None, module_uuid=None, description=None, params=None, type=None, version=None, name=None, details=None, links=None, id=None, module_id=None, device_uuid=None, timestamp=None, status=None, _configuration=None):  # noqa: E501
        """HealthAlertModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._module_uuid = None
        self._description = None
        self._params = None
        self._type = None
        self._version = None
        self._name = None
        self._details = None
        self._links = None
        self._id = None
        self._module_id = None
        self._device_uuid = None
        self._timestamp = None
        self._status = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if module_uuid is not None:
            self.module_uuid = module_uuid
        if description is not None:
            self.description = description
        if params is not None:
            self.params = params
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if details is not None:
            self.details = details
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if module_id is not None:
            self.module_id = module_id
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if timestamp is not None:
            self.timestamp = timestamp
        if status is not None:
            self.status = status

    @property
    def metadata(self):
        """Gets the metadata of this HealthAlertModel.  # noqa: E501


        :return: The metadata of this HealthAlertModel.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this HealthAlertModel.


        :param metadata: The metadata of this HealthAlertModel.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def module_uuid(self):
        """Gets the module_uuid of this HealthAlertModel.  # noqa: E501

        UUID of the module on which the alert is raised  # noqa: E501

        :return: The module_uuid of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._module_uuid

    @module_uuid.setter
    def module_uuid(self, module_uuid):
        """Sets the module_uuid of this HealthAlertModel.

        UUID of the module on which the alert is raised  # noqa: E501

        :param module_uuid: The module_uuid of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._module_uuid = module_uuid

    @property
    def description(self):
        """Gets the description of this HealthAlertModel.  # noqa: E501


        :return: The description of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthAlertModel.


        :param description: The description of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def params(self):
        """Gets the params of this HealthAlertModel.  # noqa: E501


        :return: The params of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this HealthAlertModel.


        :param params: The params of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def type(self):
        """Gets the type of this HealthAlertModel.  # noqa: E501

        Type of the alert. This will always be Alert  # noqa: E501

        :return: The type of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HealthAlertModel.

        Type of the alert. This will always be Alert  # noqa: E501

        :param type: The type of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this HealthAlertModel.  # noqa: E501


        :return: The version of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthAlertModel.


        :param version: The version of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this HealthAlertModel.  # noqa: E501


        :return: The name of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthAlertModel.


        :param name: The name of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def details(self):
        """Gets the details of this HealthAlertModel.  # noqa: E501


        :return: The details of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this HealthAlertModel.


        :param details: The details of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def links(self):
        """Gets the links of this HealthAlertModel.  # noqa: E501


        :return: The links of this HealthAlertModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this HealthAlertModel.


        :param links: The links of this HealthAlertModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this HealthAlertModel.  # noqa: E501


        :return: The id of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HealthAlertModel.


        :param id: The id of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def module_id(self):
        """Gets the module_id of this HealthAlertModel.  # noqa: E501

        ID of the module, it is one of APPLICATION_BYPASS, CARD_RESET, CPU, CPU_LINA, CPU_SNORT, CPU_SYSTEM, DISK_USAGE, EVENT_STREAM, HEALTH_MONITOR, HEARTBEAT, INTERFACE, HARDWARE_ALARM, POWER_SUPPLY, LIC, LIC_MONITOR, LINKSTATE_PROPAGATION, MEMORY_USAGE, MEMORY_USAGE_LINA, MEMORY_USAGE_SNORT, PEP, PROCESS, DISCOVERY_HEALTH, HOST_LIMIT, RRD_SERVER, SENSOR_HUB, INTRUSION_FILE_STATS, TEST, TIME_SYNC, TIME_SERIES_DATA_MONITOR, URLFILTER, SECURITY_INTELLIGENCE, AMP_FOR_ENDPOINTS, USER_AGENT, SMART_LICENSE, VPN, HIGH_AVAILABILITY, DATABASE, PLATFORM_FAULTS, THREAT_DATA_UPDATES, REALM, ISE, SNORT_IDENTITY_MEMORY_USAGE, MALWARE, DISK_STATUS, BACKLOG, STATIC_ANALYSIS, CLUSTER, INLINELINK_ALARM, RECONFIG_DETECTION, CONNECTIONS, CRITICAL_PROCESS, DEPLOYED_CONFIGURATION, SNORT_STATS and FTD_HA  # noqa: E501

        :return: The module_id of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """Sets the module_id of this HealthAlertModel.

        ID of the module, it is one of APPLICATION_BYPASS, CARD_RESET, CPU, CPU_LINA, CPU_SNORT, CPU_SYSTEM, DISK_USAGE, EVENT_STREAM, HEALTH_MONITOR, HEARTBEAT, INTERFACE, HARDWARE_ALARM, POWER_SUPPLY, LIC, LIC_MONITOR, LINKSTATE_PROPAGATION, MEMORY_USAGE, MEMORY_USAGE_LINA, MEMORY_USAGE_SNORT, PEP, PROCESS, DISCOVERY_HEALTH, HOST_LIMIT, RRD_SERVER, SENSOR_HUB, INTRUSION_FILE_STATS, TEST, TIME_SYNC, TIME_SERIES_DATA_MONITOR, URLFILTER, SECURITY_INTELLIGENCE, AMP_FOR_ENDPOINTS, USER_AGENT, SMART_LICENSE, VPN, HIGH_AVAILABILITY, DATABASE, PLATFORM_FAULTS, THREAT_DATA_UPDATES, REALM, ISE, SNORT_IDENTITY_MEMORY_USAGE, MALWARE, DISK_STATUS, BACKLOG, STATIC_ANALYSIS, CLUSTER, INLINELINK_ALARM, RECONFIG_DETECTION, CONNECTIONS, CRITICAL_PROCESS, DEPLOYED_CONFIGURATION, SNORT_STATS and FTD_HA  # noqa: E501

        :param module_id: The module_id of this HealthAlertModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["APPLICATION_BYPASS", "CARD_RESET", "CPU", "CPU_LINA", "CPU_SNORT", "CPU_SYSTEM", "DISK_USAGE", "EVENT_STREAM", "HEALTH_MONITOR", "HEARTBEAT", "INTERFACE", "HARDWARE_ALARM", "POWER_SUPPLY", "LICENSE", "LICENSE_MONITOR", "LINKSTATE_PROPAGATION", "MEMORY_USAGE", "MEMORY_USAGE_LINA", "MEMORY_USAGE_SNORT", "PEP", "PROCESS", "DISCOVERY_HEALTH", "HOST_LIMIT", "RRD_SERVER", "APPLIANCE_HEARTBEAT", "INTRUSION_FILE_STATS", "TEST", "TIME_SYNC", "TIME_SERIES_DATA_MONITOR", "URLFILTER", "SECURITY_INTELLIGENCE", "AMP_FOR_ENDPOINTS", "USER_AGENT", "SMART_LICENSE", "VPN", "HIGH_AVAILABILITY", "DATABASE", "PLATFORM_FAULTS", "THREAT_DATA_UPDATES", "REALM", "ISE", "SNORT_IDENTITY_MEMORY_USAGE", "AMP_FOR_FIREPOWER_STATUS", "DISK_STATUS", "BACKLOG", "LOCAL_MALWARE_ANALYSIS", "CLUSTER", "INLINELINK_ALARM", "RECONFIG_DETECTION", "CONNECTIONS", "CRITICAL_PROCESS", "DEPLOYED_CONFIGURATION", "SNORT_STATS", "FTD_HA", "FILE_SYSTEM_INTEGRITY_CHECK", "ASP_DROP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                module_id not in allowed_values):
            raise ValueError(
                "Invalid value for `module_id` ({0}), must be one of {1}"  # noqa: E501
                .format(module_id, allowed_values)
            )

        self._module_id = module_id

    @property
    def device_uuid(self):
        """Gets the device_uuid of this HealthAlertModel.  # noqa: E501

        UUID of the device on which the alert is raised  # noqa: E501

        :return: The device_uuid of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this HealthAlertModel.

        UUID of the device on which the alert is raised  # noqa: E501

        :param device_uuid: The device_uuid of this HealthAlertModel.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def timestamp(self):
        """Gets the timestamp of this HealthAlertModel.  # noqa: E501

        Time in seconds at which the alert is raised, timestamp is in unix format  # noqa: E501

        :return: The timestamp of this HealthAlertModel.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HealthAlertModel.

        Time in seconds at which the alert is raised, timestamp is in unix format  # noqa: E501

        :param timestamp: The timestamp of this HealthAlertModel.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def status(self):
        """Gets the status of this HealthAlertModel.  # noqa: E501

        Status of the alert, it is one of GREEN, RED, YELLOW, DISABLED and RECOVERED  # noqa: E501

        :return: The status of this HealthAlertModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HealthAlertModel.

        Status of the alert, it is one of GREEN, RED, YELLOW, DISABLED and RECOVERED  # noqa: E501

        :param status: The status of this HealthAlertModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["GREEN", "DISABLED", "RECOVERED", "RED", "ERROR", "YELLOW"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthAlertModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthAlertModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthAlertModel):
            return True

        return self.to_dict() != other.to_dict()
