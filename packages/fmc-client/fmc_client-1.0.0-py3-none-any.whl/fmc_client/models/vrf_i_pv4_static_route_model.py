# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class VrfIPv4StaticRouteModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_tracking': 'ISLAMonitorModel',
        'metadata': 'Metadata',
        'selected_networks': 'list[INetworkAddress]',
        'metric_value': 'int',
        'description': 'str',
        'type': 'str',
        'version': 'str',
        'name': 'str',
        'links': 'ILinks',
        'is_tunneled': 'bool',
        'interface_name': 'str',
        'id': 'str',
        'gateway': 'IHostObjectContainer'
    }

    attribute_map = {
        'route_tracking': 'routeTracking',
        'metadata': 'metadata',
        'selected_networks': 'selectedNetworks',
        'metric_value': 'metricValue',
        'description': 'description',
        'type': 'type',
        'version': 'version',
        'name': 'name',
        'links': 'links',
        'is_tunneled': 'isTunneled',
        'interface_name': 'interfaceName',
        'id': 'id',
        'gateway': 'gateway'
    }

    def __init__(self, route_tracking=None, metadata=None, selected_networks=None, metric_value=None, description=None, type=None, version=None, name=None, links=None, is_tunneled=None, interface_name=None, id=None, gateway=None, _configuration=None):  # noqa: E501
        """VrfIPv4StaticRouteModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._route_tracking = None
        self._metadata = None
        self._selected_networks = None
        self._metric_value = None
        self._description = None
        self._type = None
        self._version = None
        self._name = None
        self._links = None
        self._is_tunneled = None
        self._interface_name = None
        self._id = None
        self._gateway = None
        self.discriminator = None

        if route_tracking is not None:
            self.route_tracking = route_tracking
        if metadata is not None:
            self.metadata = metadata
        self.selected_networks = selected_networks
        self.metric_value = metric_value
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if is_tunneled is not None:
            self.is_tunneled = is_tunneled
        self.interface_name = interface_name
        if id is not None:
            self.id = id
        self.gateway = gateway

    @property
    def route_tracking(self):
        """Gets the route_tracking of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The route_tracking of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: ISLAMonitorModel
        """
        return self._route_tracking

    @route_tracking.setter
    def route_tracking(self, route_tracking):
        """Sets the route_tracking of this VrfIPv4StaticRouteModel.


        :param route_tracking: The route_tracking of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: ISLAMonitorModel
        """

        self._route_tracking = route_tracking

    @property
    def metadata(self):
        """Gets the metadata of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The metadata of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VrfIPv4StaticRouteModel.


        :param metadata: The metadata of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def selected_networks(self):
        """Gets the selected_networks of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The selected_networks of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: list[INetworkAddress]
        """
        return self._selected_networks

    @selected_networks.setter
    def selected_networks(self, selected_networks):
        """Sets the selected_networks of this VrfIPv4StaticRouteModel.


        :param selected_networks: The selected_networks of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: list[INetworkAddress]
        """
        if self._configuration.client_side_validation and selected_networks is None:
            raise ValueError("Invalid value for `selected_networks`, must not be `None`")  # noqa: E501

        self._selected_networks = selected_networks

    @property
    def metric_value(self):
        """Gets the metric_value of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The metric_value of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: int
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this VrfIPv4StaticRouteModel.


        :param metric_value: The metric_value of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and metric_value is None:
            raise ValueError("Invalid value for `metric_value`, must not be `None`")  # noqa: E501

        self._metric_value = metric_value

    @property
    def description(self):
        """Gets the description of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The description of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VrfIPv4StaticRouteModel.


        :param description: The description of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The type of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VrfIPv4StaticRouteModel.


        :param type: The type of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The version of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VrfIPv4StaticRouteModel.


        :param version: The version of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The name of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VrfIPv4StaticRouteModel.


        :param name: The name of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The links of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VrfIPv4StaticRouteModel.


        :param links: The links of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def is_tunneled(self):
        """Gets the is_tunneled of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The is_tunneled of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_tunneled

    @is_tunneled.setter
    def is_tunneled(self, is_tunneled):
        """Sets the is_tunneled of this VrfIPv4StaticRouteModel.


        :param is_tunneled: The is_tunneled of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: bool
        """

        self._is_tunneled = is_tunneled

    @property
    def interface_name(self):
        """Gets the interface_name of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The interface_name of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this VrfIPv4StaticRouteModel.


        :param interface_name: The interface_name of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and interface_name is None:
            raise ValueError("Invalid value for `interface_name`, must not be `None`")  # noqa: E501

        self._interface_name = interface_name

    @property
    def id(self):
        """Gets the id of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The id of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VrfIPv4StaticRouteModel.


        :param id: The id of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gateway(self):
        """Gets the gateway of this VrfIPv4StaticRouteModel.  # noqa: E501


        :return: The gateway of this VrfIPv4StaticRouteModel.  # noqa: E501
        :rtype: IHostObjectContainer
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this VrfIPv4StaticRouteModel.


        :param gateway: The gateway of this VrfIPv4StaticRouteModel.  # noqa: E501
        :type: IHostObjectContainer
        """
        if self._configuration.client_side_validation and gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VrfIPv4StaticRouteModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VrfIPv4StaticRouteModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VrfIPv4StaticRouteModel):
            return True

        return self.to_dict() != other.to_dict()
