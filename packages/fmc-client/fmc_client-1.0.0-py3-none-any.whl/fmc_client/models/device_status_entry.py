# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class DeviceStatusEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_be_deployed': 'bool',
        'message_key': 'str',
        'policy_status_list': 'list[PolicyStatusEntry]',
        'domain_name': 'str',
        'is_deploying': 'bool',
        'device_name': 'str',
        'device_uuid': 'str',
        'selected': 'bool',
        'current_version': 'int'
    }

    attribute_map = {
        'can_be_deployed': 'canBeDeployed',
        'message_key': 'messageKey',
        'policy_status_list': 'policyStatusList',
        'domain_name': 'domainName',
        'is_deploying': 'isDeploying',
        'device_name': 'deviceName',
        'device_uuid': 'deviceUUID',
        'selected': 'selected',
        'current_version': 'currentVersion'
    }

    def __init__(self, can_be_deployed=None, message_key=None, policy_status_list=None, domain_name=None, is_deploying=None, device_name=None, device_uuid=None, selected=None, current_version=None, _configuration=None):  # noqa: E501
        """DeviceStatusEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_be_deployed = None
        self._message_key = None
        self._policy_status_list = None
        self._domain_name = None
        self._is_deploying = None
        self._device_name = None
        self._device_uuid = None
        self._selected = None
        self._current_version = None
        self.discriminator = None

        if can_be_deployed is not None:
            self.can_be_deployed = can_be_deployed
        if message_key is not None:
            self.message_key = message_key
        if policy_status_list is not None:
            self.policy_status_list = policy_status_list
        if domain_name is not None:
            self.domain_name = domain_name
        if is_deploying is not None:
            self.is_deploying = is_deploying
        if device_name is not None:
            self.device_name = device_name
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if selected is not None:
            self.selected = selected
        if current_version is not None:
            self.current_version = current_version

    @property
    def can_be_deployed(self):
        """Gets the can_be_deployed of this DeviceStatusEntry.  # noqa: E501


        :return: The can_be_deployed of this DeviceStatusEntry.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_deployed

    @can_be_deployed.setter
    def can_be_deployed(self, can_be_deployed):
        """Sets the can_be_deployed of this DeviceStatusEntry.


        :param can_be_deployed: The can_be_deployed of this DeviceStatusEntry.  # noqa: E501
        :type: bool
        """

        self._can_be_deployed = can_be_deployed

    @property
    def message_key(self):
        """Gets the message_key of this DeviceStatusEntry.  # noqa: E501


        :return: The message_key of this DeviceStatusEntry.  # noqa: E501
        :rtype: str
        """
        return self._message_key

    @message_key.setter
    def message_key(self, message_key):
        """Sets the message_key of this DeviceStatusEntry.


        :param message_key: The message_key of this DeviceStatusEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYING", "NOTCLUSTERED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                message_key not in allowed_values):
            raise ValueError(
                "Invalid value for `message_key` ({0}), must be one of {1}"  # noqa: E501
                .format(message_key, allowed_values)
            )

        self._message_key = message_key

    @property
    def policy_status_list(self):
        """Gets the policy_status_list of this DeviceStatusEntry.  # noqa: E501


        :return: The policy_status_list of this DeviceStatusEntry.  # noqa: E501
        :rtype: list[PolicyStatusEntry]
        """
        return self._policy_status_list

    @policy_status_list.setter
    def policy_status_list(self, policy_status_list):
        """Sets the policy_status_list of this DeviceStatusEntry.


        :param policy_status_list: The policy_status_list of this DeviceStatusEntry.  # noqa: E501
        :type: list[PolicyStatusEntry]
        """

        self._policy_status_list = policy_status_list

    @property
    def domain_name(self):
        """Gets the domain_name of this DeviceStatusEntry.  # noqa: E501


        :return: The domain_name of this DeviceStatusEntry.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DeviceStatusEntry.


        :param domain_name: The domain_name of this DeviceStatusEntry.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def is_deploying(self):
        """Gets the is_deploying of this DeviceStatusEntry.  # noqa: E501


        :return: The is_deploying of this DeviceStatusEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_deploying

    @is_deploying.setter
    def is_deploying(self, is_deploying):
        """Sets the is_deploying of this DeviceStatusEntry.


        :param is_deploying: The is_deploying of this DeviceStatusEntry.  # noqa: E501
        :type: bool
        """

        self._is_deploying = is_deploying

    @property
    def device_name(self):
        """Gets the device_name of this DeviceStatusEntry.  # noqa: E501


        :return: The device_name of this DeviceStatusEntry.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceStatusEntry.


        :param device_name: The device_name of this DeviceStatusEntry.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceStatusEntry.  # noqa: E501


        :return: The device_uuid of this DeviceStatusEntry.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceStatusEntry.


        :param device_uuid: The device_uuid of this DeviceStatusEntry.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def selected(self):
        """Gets the selected of this DeviceStatusEntry.  # noqa: E501


        :return: The selected of this DeviceStatusEntry.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this DeviceStatusEntry.


        :param selected: The selected of this DeviceStatusEntry.  # noqa: E501
        :type: bool
        """

        self._selected = selected

    @property
    def current_version(self):
        """Gets the current_version of this DeviceStatusEntry.  # noqa: E501


        :return: The current_version of this DeviceStatusEntry.  # noqa: E501
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this DeviceStatusEntry.


        :param current_version: The current_version of this DeviceStatusEntry.  # noqa: E501
        :type: int
        """

        self._current_version = current_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceStatusEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceStatusEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceStatusEntry):
            return True

        return self.to_dict() != other.to_dict()
