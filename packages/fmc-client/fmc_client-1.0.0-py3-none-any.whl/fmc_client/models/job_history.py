# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class JobHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_name': 'str',
        'job_status': 'str',
        'device_list': 'list[IDeviceListEntry]',
        'start_time': 'str',
        'id': 'str',
        'end_time': 'str',
        'job_type': 'str',
        'type': 'str',
        'user': 'str'
    }

    attribute_map = {
        'job_name': 'jobName',
        'job_status': 'jobStatus',
        'device_list': 'deviceList',
        'start_time': 'startTime',
        'id': 'id',
        'end_time': 'endTime',
        'job_type': 'jobType',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, job_name=None, job_status=None, device_list=None, start_time=None, id=None, end_time=None, job_type=None, type=None, user=None, _configuration=None):  # noqa: E501
        """JobHistory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._job_name = None
        self._job_status = None
        self._device_list = None
        self._start_time = None
        self._id = None
        self._end_time = None
        self._job_type = None
        self._type = None
        self._user = None
        self.discriminator = None

        if job_name is not None:
            self.job_name = job_name
        if job_status is not None:
            self.job_status = job_status
        if device_list is not None:
            self.device_list = device_list
        if start_time is not None:
            self.start_time = start_time
        if id is not None:
            self.id = id
        if end_time is not None:
            self.end_time = end_time
        if job_type is not None:
            self.job_type = job_type
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user

    @property
    def job_name(self):
        """Gets the job_name of this JobHistory.  # noqa: E501

        Name of the deployed job  # noqa: E501

        :return: The job_name of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this JobHistory.

        Name of the deployed job  # noqa: E501

        :param job_name: The job_name of this JobHistory.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def job_status(self):
        """Gets the job_status of this JobHistory.  # noqa: E501

        Represents the status of the job  # noqa: E501

        :return: The job_status of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this JobHistory.

        Represents the status of the job  # noqa: E501

        :param job_status: The job_status of this JobHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYING", "DEPLOYED", "FAILED", "ABORTED", "EDIT_INUSE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_status not in allowed_values):
            raise ValueError(
                "Invalid value for `job_status` ({0}), must be one of {1}"  # noqa: E501
                .format(job_status, allowed_values)
            )

        self._job_status = job_status

    @property
    def device_list(self):
        """Gets the device_list of this JobHistory.  # noqa: E501

        List of devices which have been part of the job.  # noqa: E501

        :return: The device_list of this JobHistory.  # noqa: E501
        :rtype: list[IDeviceListEntry]
        """
        return self._device_list

    @device_list.setter
    def device_list(self, device_list):
        """Sets the device_list of this JobHistory.

        List of devices which have been part of the job.  # noqa: E501

        :param device_list: The device_list of this JobHistory.  # noqa: E501
        :type: list[IDeviceListEntry]
        """

        self._device_list = device_list

    @property
    def start_time(self):
        """Gets the start_time of this JobHistory.  # noqa: E501

        Indicates the start time (in ISO 8601 format) of the deployment job.  # noqa: E501

        :return: The start_time of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobHistory.

        Indicates the start time (in ISO 8601 format) of the deployment job.  # noqa: E501

        :param start_time: The start_time of this JobHistory.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def id(self):
        """Gets the id of this JobHistory.  # noqa: E501

        UUID of the deployment job.  # noqa: E501

        :return: The id of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobHistory.

        UUID of the deployment job.  # noqa: E501

        :param id: The id of this JobHistory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def end_time(self):
        """Gets the end_time of this JobHistory.  # noqa: E501

        Indicates the end time (in ISO 8601 format) of the deployment job.  # noqa: E501

        :return: The end_time of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobHistory.

        Indicates the end time (in ISO 8601 format) of the deployment job.  # noqa: E501

        :param end_time: The end_time of this JobHistory.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def job_type(self):
        """Gets the job_type of this JobHistory.  # noqa: E501


        :return: The job_type of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobHistory.


        :param job_type: The job_type of this JobHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYMENT", "ROLLBACK", "UNKNOWN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_type not in allowed_values):
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def type(self):
        """Gets the type of this JobHistory.  # noqa: E501

        Type must be JobHistory.  # noqa: E501

        :return: The type of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobHistory.

        Type must be JobHistory.  # noqa: E501

        :param type: The type of this JobHistory.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this JobHistory.  # noqa: E501

        Creator of the deployment task.  # noqa: E501

        :return: The user of this JobHistory.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobHistory.

        Creator of the deployment task.  # noqa: E501

        :param user: The user of this JobHistory.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobHistory):
            return True

        return self.to_dict() != other.to_dict()
