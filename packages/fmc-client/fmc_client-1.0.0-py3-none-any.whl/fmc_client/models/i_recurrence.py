# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IRecurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'range_start_time': 'str',
        'range_end_day': 'str',
        'range_end_time': 'str',
        'range_start_day': 'str',
        'daily_start_time': 'str',
        'days': 'list[str]',
        'daily_end_time': 'str',
        'recurrence_type': 'str'
    }

    attribute_map = {
        'range_start_time': 'rangeStartTime',
        'range_end_day': 'rangeEndDay',
        'range_end_time': 'rangeEndTime',
        'range_start_day': 'rangeStartDay',
        'daily_start_time': 'dailyStartTime',
        'days': 'days',
        'daily_end_time': 'dailyEndTime',
        'recurrence_type': 'recurrenceType'
    }

    def __init__(self, range_start_time=None, range_end_day=None, range_end_time=None, range_start_day=None, daily_start_time=None, days=None, daily_end_time=None, recurrence_type=None, _configuration=None):  # noqa: E501
        """IRecurrence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._range_start_time = None
        self._range_end_day = None
        self._range_end_time = None
        self._range_start_day = None
        self._daily_start_time = None
        self._days = None
        self._daily_end_time = None
        self._recurrence_type = None
        self.discriminator = None

        self.range_start_time = range_start_time
        self.range_end_day = range_end_day
        self.range_end_time = range_end_time
        self.range_start_day = range_start_day
        self.daily_start_time = daily_start_time
        self.days = days
        self.daily_end_time = daily_end_time
        self.recurrence_type = recurrence_type

    @property
    def range_start_time(self):
        """Gets the range_start_time of this IRecurrence.  # noqa: E501

        Represents the time (in ISO 8601 format) at which the time range starts being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :return: The range_start_time of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._range_start_time

    @range_start_time.setter
    def range_start_time(self, range_start_time):
        """Sets the range_start_time of this IRecurrence.

        Represents the time (in ISO 8601 format) at which the time range starts being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :param range_start_time: The range_start_time of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and range_start_time is None:
            raise ValueError("Invalid value for `range_start_time`, must not be `None`")  # noqa: E501

        self._range_start_time = range_start_time

    @property
    def range_end_day(self):
        """Gets the range_end_day of this IRecurrence.  # noqa: E501

        Represents the time (in ISO 8601 format) at which the time range stops being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :return: The range_end_day of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._range_end_day

    @range_end_day.setter
    def range_end_day(self, range_end_day):
        """Sets the range_end_day of this IRecurrence.

        Represents the time (in ISO 8601 format) at which the time range stops being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :param range_end_day: The range_end_day of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and range_end_day is None:
            raise ValueError("Invalid value for `range_end_day`, must not be `None`")  # noqa: E501
        allowed_values = ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                range_end_day not in allowed_values):
            raise ValueError(
                "Invalid value for `range_end_day` ({0}), must be one of {1}"  # noqa: E501
                .format(range_end_day, allowed_values)
            )

        self._range_end_day = range_end_day

    @property
    def range_end_time(self):
        """Gets the range_end_time of this IRecurrence.  # noqa: E501

        Represents the day of week at which the time range stops being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :return: The range_end_time of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._range_end_time

    @range_end_time.setter
    def range_end_time(self, range_end_time):
        """Sets the range_end_time of this IRecurrence.

        Represents the day of week at which the time range stops being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :param range_end_time: The range_end_time of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and range_end_time is None:
            raise ValueError("Invalid value for `range_end_time`, must not be `None`")  # noqa: E501

        self._range_end_time = range_end_time

    @property
    def range_start_day(self):
        """Gets the range_start_day of this IRecurrence.  # noqa: E501

        Represents the day of week at which the time range starts being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :return: The range_start_day of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._range_start_day

    @range_start_day.setter
    def range_start_day(self, range_start_day):
        """Sets the range_start_day of this IRecurrence.

        Represents the day of week at which the time range starts being effective. This field must be used if recurrenceType is specified as RANGE.  # noqa: E501

        :param range_start_day: The range_start_day of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and range_start_day is None:
            raise ValueError("Invalid value for `range_start_day`, must not be `None`")  # noqa: E501
        allowed_values = ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                range_start_day not in allowed_values):
            raise ValueError(
                "Invalid value for `range_start_day` ({0}), must be one of {1}"  # noqa: E501
                .format(range_start_day, allowed_values)
            )

        self._range_start_day = range_start_day

    @property
    def daily_start_time(self):
        """Gets the daily_start_time of this IRecurrence.  # noqa: E501

        Represents the time (in ISO 8601 format) at which the time range starts being effective on selected days. This field must be used if recurrenceType is specified as DAILY_INTERVAL.  # noqa: E501

        :return: The daily_start_time of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._daily_start_time

    @daily_start_time.setter
    def daily_start_time(self, daily_start_time):
        """Sets the daily_start_time of this IRecurrence.

        Represents the time (in ISO 8601 format) at which the time range starts being effective on selected days. This field must be used if recurrenceType is specified as DAILY_INTERVAL.  # noqa: E501

        :param daily_start_time: The daily_start_time of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and daily_start_time is None:
            raise ValueError("Invalid value for `daily_start_time`, must not be `None`")  # noqa: E501

        self._daily_start_time = daily_start_time

    @property
    def days(self):
        """Gets the days of this IRecurrence.  # noqa: E501

        Represents the days of week on which the time range is effective. This field must be used if recurrenceType is specified as DAILY_INTERVAL.  # noqa: E501

        :return: The days of this IRecurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this IRecurrence.

        Represents the days of week on which the time range is effective. This field must be used if recurrenceType is specified as DAILY_INTERVAL.  # noqa: E501

        :param days: The days of this IRecurrence.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501
        allowed_values = ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(days).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `days` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(days) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._days = days

    @property
    def daily_end_time(self):
        """Gets the daily_end_time of this IRecurrence.  # noqa: E501

        Represents the time (in ISO 8601 format) at which the time range stops being effective on selected days. This field must be used if recurrenceType is specified as DAILY_INTERVAL.  # noqa: E501

        :return: The daily_end_time of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._daily_end_time

    @daily_end_time.setter
    def daily_end_time(self, daily_end_time):
        """Sets the daily_end_time of this IRecurrence.

        Represents the time (in ISO 8601 format) at which the time range stops being effective on selected days. This field must be used if recurrenceType is specified as DAILY_INTERVAL.  # noqa: E501

        :param daily_end_time: The daily_end_time of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and daily_end_time is None:
            raise ValueError("Invalid value for `daily_end_time`, must not be `None`")  # noqa: E501

        self._daily_end_time = daily_end_time

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this IRecurrence.  # noqa: E501

        Type of the recurrence interval. This value can be either DAILY_INTERVAL or RANGE.  # noqa: E501

        :return: The recurrence_type of this IRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this IRecurrence.

        Type of the recurrence interval. This value can be either DAILY_INTERVAL or RANGE.  # noqa: E501

        :param recurrence_type: The recurrence_type of this IRecurrence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and recurrence_type is None:
            raise ValueError("Invalid value for `recurrence_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DAILY_INTERVAL", "RANGE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                recurrence_type not in allowed_values):
            raise ValueError(
                "Invalid value for `recurrence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_type, allowed_values)
            )

        self._recurrence_type = recurrence_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IRecurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IRecurrence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IRecurrence):
            return True

        return self.to_dict() != other.to_dict()
