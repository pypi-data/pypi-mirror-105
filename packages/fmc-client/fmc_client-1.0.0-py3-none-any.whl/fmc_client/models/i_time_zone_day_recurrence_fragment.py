# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class ITimeZoneDayRecurrenceFragment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_day_of_week': 'str',
        'start_week': 'str',
        'offset': 'int',
        'start_month': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'end_week': 'str',
        'end_month': 'str',
        'end_day_of_week': 'str'
    }

    attribute_map = {
        'start_day_of_week': 'startDayOfWeek',
        'start_week': 'startWeek',
        'offset': 'offset',
        'start_month': 'startMonth',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'end_week': 'endWeek',
        'end_month': 'endMonth',
        'end_day_of_week': 'endDayOfWeek'
    }

    def __init__(self, start_day_of_week=None, start_week=None, offset=None, start_month=None, start_time=None, end_time=None, end_week=None, end_month=None, end_day_of_week=None, _configuration=None):  # noqa: E501
        """ITimeZoneDayRecurrenceFragment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_day_of_week = None
        self._start_week = None
        self._offset = None
        self._start_month = None
        self._start_time = None
        self._end_time = None
        self._end_week = None
        self._end_month = None
        self._end_day_of_week = None
        self.discriminator = None

        if start_day_of_week is not None:
            self.start_day_of_week = start_day_of_week
        if start_week is not None:
            self.start_week = start_week
        if offset is not None:
            self.offset = offset
        if start_month is not None:
            self.start_month = start_month
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if end_week is not None:
            self.end_week = end_week
        if end_month is not None:
            self.end_month = end_month
        if end_day_of_week is not None:
            self.end_day_of_week = end_day_of_week

    @property
    def start_day_of_week(self):
        """Gets the start_day_of_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Day of the week on which the daylight saving will start.  # noqa: E501

        :return: The start_day_of_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._start_day_of_week

    @start_day_of_week.setter
    def start_day_of_week(self, start_day_of_week):
        """Sets the start_day_of_week of this ITimeZoneDayRecurrenceFragment.

        Day of the week on which the daylight saving will start.  # noqa: E501

        :param start_day_of_week: The start_day_of_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """
        allowed_values = ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                start_day_of_week not in allowed_values):
            raise ValueError(
                "Invalid value for `start_day_of_week` ({0}), must be one of {1}"  # noqa: E501
                .format(start_day_of_week, allowed_values)
            )

        self._start_day_of_week = start_day_of_week

    @property
    def start_week(self):
        """Gets the start_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        An ordinal number, from 1-52, representing the week on which daylight saving will start.  # noqa: E501

        :return: The start_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._start_week

    @start_week.setter
    def start_week(self, start_week):
        """Sets the start_week of this ITimeZoneDayRecurrenceFragment.

        An ordinal number, from 1-52, representing the week on which daylight saving will start.  # noqa: E501

        :param start_week: The start_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIRST", "SECOND", "THIRD", "FOURTH", "LAST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                start_week not in allowed_values):
            raise ValueError(
                "Invalid value for `start_week` ({0}), must be one of {1}"  # noqa: E501
                .format(start_week, allowed_values)
            )

        self._start_week = start_week

    @property
    def offset(self):
        """Gets the offset of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Number (in minutes) representing the offset from specified time zone. Offset value must be between 1-1440.  # noqa: E501

        :return: The offset of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ITimeZoneDayRecurrenceFragment.

        Number (in minutes) representing the offset from specified time zone. Offset value must be between 1-1440.  # noqa: E501

        :param offset: The offset of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def start_month(self):
        """Gets the start_month of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Month of the year on which the daylight saving will start.  # noqa: E501

        :return: The start_month of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this ITimeZoneDayRecurrenceFragment.

        Month of the year on which the daylight saving will start.  # noqa: E501

        :param start_month: The start_month of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """
        allowed_values = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                start_month not in allowed_values):
            raise ValueError(
                "Invalid value for `start_month` ({0}), must be one of {1}"  # noqa: E501
                .format(start_month, allowed_values)
            )

        self._start_month = start_month

    @property
    def start_time(self):
        """Gets the start_time of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Time of the day (in 24-hour HH:mm format) at which the daylight saving will start.  # noqa: E501

        :return: The start_time of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ITimeZoneDayRecurrenceFragment.

        Time of the day (in 24-hour HH:mm format) at which the daylight saving will start.  # noqa: E501

        :param start_time: The start_time of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Time of the day (in 24-hour HH:mm format) at which the daylight saving will end.  # noqa: E501

        :return: The end_time of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ITimeZoneDayRecurrenceFragment.

        Time of the day (in 24-hour HH:mm format) at which the daylight saving will end.  # noqa: E501

        :param end_time: The end_time of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def end_week(self):
        """Gets the end_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        An ordinal number, from 1-52, representing the week on which the daylight saving will end.  # noqa: E501

        :return: The end_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._end_week

    @end_week.setter
    def end_week(self, end_week):
        """Sets the end_week of this ITimeZoneDayRecurrenceFragment.

        An ordinal number, from 1-52, representing the week on which the daylight saving will end.  # noqa: E501

        :param end_week: The end_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIRST", "SECOND", "THIRD", "FOURTH", "LAST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                end_week not in allowed_values):
            raise ValueError(
                "Invalid value for `end_week` ({0}), must be one of {1}"  # noqa: E501
                .format(end_week, allowed_values)
            )

        self._end_week = end_week

    @property
    def end_month(self):
        """Gets the end_month of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Month of the year on which the daylight saving will end.  # noqa: E501

        :return: The end_month of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._end_month

    @end_month.setter
    def end_month(self, end_month):
        """Sets the end_month of this ITimeZoneDayRecurrenceFragment.

        Month of the year on which the daylight saving will end.  # noqa: E501

        :param end_month: The end_month of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """
        allowed_values = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                end_month not in allowed_values):
            raise ValueError(
                "Invalid value for `end_month` ({0}), must be one of {1}"  # noqa: E501
                .format(end_month, allowed_values)
            )

        self._end_month = end_month

    @property
    def end_day_of_week(self):
        """Gets the end_day_of_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501

        Day of the week on which the daylight saving will end.  # noqa: E501

        :return: The end_day_of_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :rtype: str
        """
        return self._end_day_of_week

    @end_day_of_week.setter
    def end_day_of_week(self, end_day_of_week):
        """Sets the end_day_of_week of this ITimeZoneDayRecurrenceFragment.

        Day of the week on which the daylight saving will end.  # noqa: E501

        :param end_day_of_week: The end_day_of_week of this ITimeZoneDayRecurrenceFragment.  # noqa: E501
        :type: str
        """
        allowed_values = ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                end_day_of_week not in allowed_values):
            raise ValueError(
                "Invalid value for `end_day_of_week` ({0}), must be one of {1}"  # noqa: E501
                .format(end_day_of_week, allowed_values)
            )

        self._end_day_of_week = end_day_of_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ITimeZoneDayRecurrenceFragment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ITimeZoneDayRecurrenceFragment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ITimeZoneDayRecurrenceFragment):
            return True

        return self.to_dict() != other.to_dict()
