# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class PendingChanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'entity_uuid': 'str',
        'entity_type': 'str',
        'value_updated': 'list[IValueUpdate]',
        'message': 'str',
        'version': 'str',
        'value_deleted': 'list[IValueDelete]',
        'parent_uuid': 'str',
        'value_added': 'list[IValueAdd]',
        'references_deleted': 'list[IReferenceUpdate]',
        'entity_name': 'str',
        'action': 'str',
        'links': 'ILinks',
        'references_added': 'list[IReferenceUpdate]'
    }

    attribute_map = {
        'metadata': 'metadata',
        'entity_uuid': 'entityUUID',
        'entity_type': 'entityType',
        'value_updated': 'valueUpdated',
        'message': 'message',
        'version': 'version',
        'value_deleted': 'valueDeleted',
        'parent_uuid': 'parentUUID',
        'value_added': 'valueAdded',
        'references_deleted': 'referencesDeleted',
        'entity_name': 'entityName',
        'action': 'action',
        'links': 'links',
        'references_added': 'referencesAdded'
    }

    def __init__(self, metadata=None, entity_uuid=None, entity_type=None, value_updated=None, message=None, version=None, value_deleted=None, parent_uuid=None, value_added=None, references_deleted=None, entity_name=None, action=None, links=None, references_added=None, _configuration=None):  # noqa: E501
        """PendingChanges - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._entity_uuid = None
        self._entity_type = None
        self._value_updated = None
        self._message = None
        self._version = None
        self._value_deleted = None
        self._parent_uuid = None
        self._value_added = None
        self._references_deleted = None
        self._entity_name = None
        self._action = None
        self._links = None
        self._references_added = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if entity_uuid is not None:
            self.entity_uuid = entity_uuid
        if entity_type is not None:
            self.entity_type = entity_type
        if value_updated is not None:
            self.value_updated = value_updated
        if message is not None:
            self.message = message
        if version is not None:
            self.version = version
        if value_deleted is not None:
            self.value_deleted = value_deleted
        if parent_uuid is not None:
            self.parent_uuid = parent_uuid
        if value_added is not None:
            self.value_added = value_added
        if references_deleted is not None:
            self.references_deleted = references_deleted
        if entity_name is not None:
            self.entity_name = entity_name
        if action is not None:
            self.action = action
        if links is not None:
            self.links = links
        if references_added is not None:
            self.references_added = references_added

    @property
    def metadata(self):
        """Gets the metadata of this PendingChanges.  # noqa: E501


        :return: The metadata of this PendingChanges.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PendingChanges.


        :param metadata: The metadata of this PendingChanges.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def entity_uuid(self):
        """Gets the entity_uuid of this PendingChanges.  # noqa: E501

         An identifier of entity which does not change with time.  # noqa: E501

        :return: The entity_uuid of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._entity_uuid

    @entity_uuid.setter
    def entity_uuid(self, entity_uuid):
        """Sets the entity_uuid of this PendingChanges.

         An identifier of entity which does not change with time.  # noqa: E501

        :param entity_uuid: The entity_uuid of this PendingChanges.  # noqa: E501
        :type: str
        """

        self._entity_uuid = entity_uuid

    @property
    def entity_type(self):
        """Gets the entity_type of this PendingChanges.  # noqa: E501

        An Entity type type that has been modified.  # noqa: E501

        :return: The entity_type of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PendingChanges.

        An Entity type type that has been modified.  # noqa: E501

        :param entity_type: The entity_type of this PendingChanges.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def value_updated(self):
        """Gets the value_updated of this PendingChanges.  # noqa: E501

        Values that were specified compared to its other state.   # noqa: E501

        :return: The value_updated of this PendingChanges.  # noqa: E501
        :rtype: list[IValueUpdate]
        """
        return self._value_updated

    @value_updated.setter
    def value_updated(self, value_updated):
        """Sets the value_updated of this PendingChanges.

        Values that were specified compared to its other state.   # noqa: E501

        :param value_updated: The value_updated of this PendingChanges.  # noqa: E501
        :type: list[IValueUpdate]
        """

        self._value_updated = value_updated

    @property
    def message(self):
        """Gets the message of this PendingChanges.  # noqa: E501

        In case for an entity there is no diff, due to no modification or some error during generation proper message will be given for that entity.  # noqa: E501

        :return: The message of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PendingChanges.

        In case for an entity there is no diff, due to no modification or some error during generation proper message will be given for that entity.  # noqa: E501

        :param message: The message of this PendingChanges.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def version(self):
        """Gets the version of this PendingChanges.  # noqa: E501


        :return: The version of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PendingChanges.


        :param version: The version of this PendingChanges.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def value_deleted(self):
        """Gets the value_deleted of this PendingChanges.  # noqa: E501

        Values that were deleted compared to its other state.  # noqa: E501

        :return: The value_deleted of this PendingChanges.  # noqa: E501
        :rtype: list[IValueDelete]
        """
        return self._value_deleted

    @value_deleted.setter
    def value_deleted(self, value_deleted):
        """Sets the value_deleted of this PendingChanges.

        Values that were deleted compared to its other state.  # noqa: E501

        :param value_deleted: The value_deleted of this PendingChanges.  # noqa: E501
        :type: list[IValueDelete]
        """

        self._value_deleted = value_deleted

    @property
    def parent_uuid(self):
        """Gets the parent_uuid of this PendingChanges.  # noqa: E501

        UUID of the entity to which this entity is grouped to. If it's empty, it means the entity is the parent entity.  # noqa: E501

        :return: The parent_uuid of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid):
        """Sets the parent_uuid of this PendingChanges.

        UUID of the entity to which this entity is grouped to. If it's empty, it means the entity is the parent entity.  # noqa: E501

        :param parent_uuid: The parent_uuid of this PendingChanges.  # noqa: E501
        :type: str
        """

        self._parent_uuid = parent_uuid

    @property
    def value_added(self):
        """Gets the value_added of this PendingChanges.  # noqa: E501

        Values that were added compared to its other state.   # noqa: E501

        :return: The value_added of this PendingChanges.  # noqa: E501
        :rtype: list[IValueAdd]
        """
        return self._value_added

    @value_added.setter
    def value_added(self, value_added):
        """Sets the value_added of this PendingChanges.

        Values that were added compared to its other state.   # noqa: E501

        :param value_added: The value_added of this PendingChanges.  # noqa: E501
        :type: list[IValueAdd]
        """

        self._value_added = value_added

    @property
    def references_deleted(self):
        """Gets the references_deleted of this PendingChanges.  # noqa: E501

        References that were deleted compared to its other state.  # noqa: E501

        :return: The references_deleted of this PendingChanges.  # noqa: E501
        :rtype: list[IReferenceUpdate]
        """
        return self._references_deleted

    @references_deleted.setter
    def references_deleted(self, references_deleted):
        """Sets the references_deleted of this PendingChanges.

        References that were deleted compared to its other state.  # noqa: E501

        :param references_deleted: The references_deleted of this PendingChanges.  # noqa: E501
        :type: list[IReferenceUpdate]
        """

        self._references_deleted = references_deleted

    @property
    def entity_name(self):
        """Gets the entity_name of this PendingChanges.  # noqa: E501

        A name field value of modified Entity.   # noqa: E501

        :return: The entity_name of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this PendingChanges.

        A name field value of modified Entity.   # noqa: E501

        :param entity_name: The entity_name of this PendingChanges.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def action(self):
        """Gets the action of this PendingChanges.  # noqa: E501

        Action done on the entity  # noqa: E501

        :return: The action of this PendingChanges.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PendingChanges.

        Action done on the entity  # noqa: E501

        :param action: The action of this PendingChanges.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADD", "DELETE", "UPDATE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def links(self):
        """Gets the links of this PendingChanges.  # noqa: E501


        :return: The links of this PendingChanges.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PendingChanges.


        :param links: The links of this PendingChanges.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def references_added(self):
        """Gets the references_added of this PendingChanges.  # noqa: E501

        References that were added compared to its other state.  # noqa: E501

        :return: The references_added of this PendingChanges.  # noqa: E501
        :rtype: list[IReferenceUpdate]
        """
        return self._references_added

    @references_added.setter
    def references_added(self, references_added):
        """Sets the references_added of this PendingChanges.

        References that were added compared to its other state.  # noqa: E501

        :param references_added: The references_added of this PendingChanges.  # noqa: E501
        :type: list[IReferenceUpdate]
        """

        self._references_added = references_added

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PendingChanges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingChanges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PendingChanges):
            return True

        return self.to_dict() != other.to_dict()
