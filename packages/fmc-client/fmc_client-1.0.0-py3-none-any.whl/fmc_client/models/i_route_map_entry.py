# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IRouteMapEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ipv4_prefix_list_route_sources': 'list[IReference]',
        'metric_bandwidth': 'int',
        'policy_lists': 'list[IReference]',
        'ipv6_access_list_route_sources': 'list[IReference]',
        'ipv6_access_list_addresses': 'list[IReference]',
        'ipv4_access_list_addresses': 'list[IReference]',
        'route_type_nssa_external1': 'bool',
        'route_type_nssa_external2': 'bool',
        'ipv6_prefix_list_nexthops': 'list[IReference]',
        'next_hop_ipv4_setting': 'str',
        'metric_type': 'str',
        'next_hop_ipv6_setting': 'str',
        'ipv4_access_list_next_hops': 'list[IReference]',
        'ipv4_prefix_list_nexthops': 'list[IReference]',
        'action': 'str',
        'as_path_lists': 'list[IReference]',
        'tag_values': 'list[int]',
        'community_list_setting_internet': 'bool',
        'community_list_setting': 'int',
        'ipv6_access_list_next_hops': 'list[IReference]',
        'interfaces': 'list[IReference]',
        'specific_i_ps_ipv6_setting': 'list[str]',
        'origin_setting': 'str',
        'community_list_setting_no_export': 'bool',
        'local_preference_setting': 'int',
        'interface_names': 'list[str]',
        'automatic_tag_setting': 'bool',
        'ipv4_prefix_list_addresses': 'list[IReference]',
        'as_path_prepend_last_as_to_as_path': 'int',
        'ipv6_prefix_list_addresses': 'list[IReference]',
        'ipv6_prefix_list_route_sources': 'list[IReference]',
        'prefix_list_ipv4_setting': 'IReference',
        'prefix_list_ipv6_setting': 'IReference',
        'sequence': 'int',
        'route_type_external2': 'bool',
        'metric_route_values': 'list[int]',
        'community_list_setting_no_advertise': 'bool',
        'route_type_external1': 'bool',
        'community_lists': 'list[IReference]',
        'specific_i_ps_ipv4_setting': 'list[str]',
        'as_path_prepend_as_path': 'list[int]',
        'ipv4_access_list_route_sources': 'list[IReference]',
        'weight_setting': 'int',
        'route_type_local': 'bool'
    }

    attribute_map = {
        'ipv4_prefix_list_route_sources': 'ipv4PrefixListRouteSources',
        'metric_bandwidth': 'metricBandwidth',
        'policy_lists': 'policyLists',
        'ipv6_access_list_route_sources': 'ipv6AccessListRouteSources',
        'ipv6_access_list_addresses': 'ipv6AccessListAddresses',
        'ipv4_access_list_addresses': 'ipv4AccessListAddresses',
        'route_type_nssa_external1': 'routeTypeNSSAExternal1',
        'route_type_nssa_external2': 'routeTypeNSSAExternal2',
        'ipv6_prefix_list_nexthops': 'ipv6PrefixListNexthops',
        'next_hop_ipv4_setting': 'nextHopIPV4Setting',
        'metric_type': 'metricType',
        'next_hop_ipv6_setting': 'nextHopIPV6Setting',
        'ipv4_access_list_next_hops': 'ipv4AccessListNextHops',
        'ipv4_prefix_list_nexthops': 'ipv4PrefixListNexthops',
        'action': 'action',
        'as_path_lists': 'asPathLists',
        'tag_values': 'tagValues',
        'community_list_setting_internet': 'communityListSettingInternet',
        'community_list_setting': 'communityListSetting',
        'ipv6_access_list_next_hops': 'ipv6AccessListNextHops',
        'interfaces': 'interfaces',
        'specific_i_ps_ipv6_setting': 'specificIPsIPV6Setting',
        'origin_setting': 'originSetting',
        'community_list_setting_no_export': 'communityListSettingNoExport',
        'local_preference_setting': 'localPreferenceSetting',
        'interface_names': 'interfaceNames',
        'automatic_tag_setting': 'automaticTagSetting',
        'ipv4_prefix_list_addresses': 'ipv4PrefixListAddresses',
        'as_path_prepend_last_as_to_as_path': 'asPathPrependLastASToASPath',
        'ipv6_prefix_list_addresses': 'ipv6PrefixListAddresses',
        'ipv6_prefix_list_route_sources': 'ipv6PrefixListRouteSources',
        'prefix_list_ipv4_setting': 'prefixListIPV4Setting',
        'prefix_list_ipv6_setting': 'prefixListIPV6Setting',
        'sequence': 'sequence',
        'route_type_external2': 'routeTypeExternal2',
        'metric_route_values': 'metricRouteValues',
        'community_list_setting_no_advertise': 'communityListSettingNoAdvertise',
        'route_type_external1': 'routeTypeExternal1',
        'community_lists': 'communityLists',
        'specific_i_ps_ipv4_setting': 'specificIPsIPV4Setting',
        'as_path_prepend_as_path': 'asPathPrependASPath',
        'ipv4_access_list_route_sources': 'ipv4AccessListRouteSources',
        'weight_setting': 'weightSetting',
        'route_type_local': 'routeTypeLocal'
    }

    def __init__(self, ipv4_prefix_list_route_sources=None, metric_bandwidth=None, policy_lists=None, ipv6_access_list_route_sources=None, ipv6_access_list_addresses=None, ipv4_access_list_addresses=None, route_type_nssa_external1=None, route_type_nssa_external2=None, ipv6_prefix_list_nexthops=None, next_hop_ipv4_setting=None, metric_type=None, next_hop_ipv6_setting=None, ipv4_access_list_next_hops=None, ipv4_prefix_list_nexthops=None, action=None, as_path_lists=None, tag_values=None, community_list_setting_internet=None, community_list_setting=None, ipv6_access_list_next_hops=None, interfaces=None, specific_i_ps_ipv6_setting=None, origin_setting=None, community_list_setting_no_export=None, local_preference_setting=None, interface_names=None, automatic_tag_setting=None, ipv4_prefix_list_addresses=None, as_path_prepend_last_as_to_as_path=None, ipv6_prefix_list_addresses=None, ipv6_prefix_list_route_sources=None, prefix_list_ipv4_setting=None, prefix_list_ipv6_setting=None, sequence=None, route_type_external2=None, metric_route_values=None, community_list_setting_no_advertise=None, route_type_external1=None, community_lists=None, specific_i_ps_ipv4_setting=None, as_path_prepend_as_path=None, ipv4_access_list_route_sources=None, weight_setting=None, route_type_local=None, _configuration=None):  # noqa: E501
        """IRouteMapEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ipv4_prefix_list_route_sources = None
        self._metric_bandwidth = None
        self._policy_lists = None
        self._ipv6_access_list_route_sources = None
        self._ipv6_access_list_addresses = None
        self._ipv4_access_list_addresses = None
        self._route_type_nssa_external1 = None
        self._route_type_nssa_external2 = None
        self._ipv6_prefix_list_nexthops = None
        self._next_hop_ipv4_setting = None
        self._metric_type = None
        self._next_hop_ipv6_setting = None
        self._ipv4_access_list_next_hops = None
        self._ipv4_prefix_list_nexthops = None
        self._action = None
        self._as_path_lists = None
        self._tag_values = None
        self._community_list_setting_internet = None
        self._community_list_setting = None
        self._ipv6_access_list_next_hops = None
        self._interfaces = None
        self._specific_i_ps_ipv6_setting = None
        self._origin_setting = None
        self._community_list_setting_no_export = None
        self._local_preference_setting = None
        self._interface_names = None
        self._automatic_tag_setting = None
        self._ipv4_prefix_list_addresses = None
        self._as_path_prepend_last_as_to_as_path = None
        self._ipv6_prefix_list_addresses = None
        self._ipv6_prefix_list_route_sources = None
        self._prefix_list_ipv4_setting = None
        self._prefix_list_ipv6_setting = None
        self._sequence = None
        self._route_type_external2 = None
        self._metric_route_values = None
        self._community_list_setting_no_advertise = None
        self._route_type_external1 = None
        self._community_lists = None
        self._specific_i_ps_ipv4_setting = None
        self._as_path_prepend_as_path = None
        self._ipv4_access_list_route_sources = None
        self._weight_setting = None
        self._route_type_local = None
        self.discriminator = None

        if ipv4_prefix_list_route_sources is not None:
            self.ipv4_prefix_list_route_sources = ipv4_prefix_list_route_sources
        if metric_bandwidth is not None:
            self.metric_bandwidth = metric_bandwidth
        if policy_lists is not None:
            self.policy_lists = policy_lists
        if ipv6_access_list_route_sources is not None:
            self.ipv6_access_list_route_sources = ipv6_access_list_route_sources
        if ipv6_access_list_addresses is not None:
            self.ipv6_access_list_addresses = ipv6_access_list_addresses
        if ipv4_access_list_addresses is not None:
            self.ipv4_access_list_addresses = ipv4_access_list_addresses
        if route_type_nssa_external1 is not None:
            self.route_type_nssa_external1 = route_type_nssa_external1
        if route_type_nssa_external2 is not None:
            self.route_type_nssa_external2 = route_type_nssa_external2
        if ipv6_prefix_list_nexthops is not None:
            self.ipv6_prefix_list_nexthops = ipv6_prefix_list_nexthops
        if next_hop_ipv4_setting is not None:
            self.next_hop_ipv4_setting = next_hop_ipv4_setting
        if metric_type is not None:
            self.metric_type = metric_type
        if next_hop_ipv6_setting is not None:
            self.next_hop_ipv6_setting = next_hop_ipv6_setting
        if ipv4_access_list_next_hops is not None:
            self.ipv4_access_list_next_hops = ipv4_access_list_next_hops
        if ipv4_prefix_list_nexthops is not None:
            self.ipv4_prefix_list_nexthops = ipv4_prefix_list_nexthops
        self.action = action
        if as_path_lists is not None:
            self.as_path_lists = as_path_lists
        if tag_values is not None:
            self.tag_values = tag_values
        if community_list_setting_internet is not None:
            self.community_list_setting_internet = community_list_setting_internet
        if community_list_setting is not None:
            self.community_list_setting = community_list_setting
        if ipv6_access_list_next_hops is not None:
            self.ipv6_access_list_next_hops = ipv6_access_list_next_hops
        if interfaces is not None:
            self.interfaces = interfaces
        if specific_i_ps_ipv6_setting is not None:
            self.specific_i_ps_ipv6_setting = specific_i_ps_ipv6_setting
        if origin_setting is not None:
            self.origin_setting = origin_setting
        if community_list_setting_no_export is not None:
            self.community_list_setting_no_export = community_list_setting_no_export
        if local_preference_setting is not None:
            self.local_preference_setting = local_preference_setting
        if interface_names is not None:
            self.interface_names = interface_names
        if automatic_tag_setting is not None:
            self.automatic_tag_setting = automatic_tag_setting
        if ipv4_prefix_list_addresses is not None:
            self.ipv4_prefix_list_addresses = ipv4_prefix_list_addresses
        if as_path_prepend_last_as_to_as_path is not None:
            self.as_path_prepend_last_as_to_as_path = as_path_prepend_last_as_to_as_path
        if ipv6_prefix_list_addresses is not None:
            self.ipv6_prefix_list_addresses = ipv6_prefix_list_addresses
        if ipv6_prefix_list_route_sources is not None:
            self.ipv6_prefix_list_route_sources = ipv6_prefix_list_route_sources
        if prefix_list_ipv4_setting is not None:
            self.prefix_list_ipv4_setting = prefix_list_ipv4_setting
        if prefix_list_ipv6_setting is not None:
            self.prefix_list_ipv6_setting = prefix_list_ipv6_setting
        self.sequence = sequence
        if route_type_external2 is not None:
            self.route_type_external2 = route_type_external2
        if metric_route_values is not None:
            self.metric_route_values = metric_route_values
        if community_list_setting_no_advertise is not None:
            self.community_list_setting_no_advertise = community_list_setting_no_advertise
        if route_type_external1 is not None:
            self.route_type_external1 = route_type_external1
        if community_lists is not None:
            self.community_lists = community_lists
        if specific_i_ps_ipv4_setting is not None:
            self.specific_i_ps_ipv4_setting = specific_i_ps_ipv4_setting
        if as_path_prepend_as_path is not None:
            self.as_path_prepend_as_path = as_path_prepend_as_path
        if ipv4_access_list_route_sources is not None:
            self.ipv4_access_list_route_sources = ipv4_access_list_route_sources
        if weight_setting is not None:
            self.weight_setting = weight_setting
        if route_type_local is not None:
            self.route_type_local = route_type_local

    @property
    def ipv4_prefix_list_route_sources(self):
        """Gets the ipv4_prefix_list_route_sources of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the advertising source address of the route.   # noqa: E501

        :return: The ipv4_prefix_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_prefix_list_route_sources

    @ipv4_prefix_list_route_sources.setter
    def ipv4_prefix_list_route_sources(self, ipv4_prefix_list_route_sources):
        """Sets the ipv4_prefix_list_route_sources of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the advertising source address of the route.   # noqa: E501

        :param ipv4_prefix_list_route_sources: The ipv4_prefix_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_prefix_list_route_sources = ipv4_prefix_list_route_sources

    @property
    def metric_bandwidth(self):
        """Gets the metric_bandwidth of this IRouteMapEntry.  # noqa: E501

        Metric value or bandwidth in Kbits per second  # noqa: E501

        :return: The metric_bandwidth of this IRouteMapEntry.  # noqa: E501
        :rtype: int
        """
        return self._metric_bandwidth

    @metric_bandwidth.setter
    def metric_bandwidth(self, metric_bandwidth):
        """Sets the metric_bandwidth of this IRouteMapEntry.

        Metric value or bandwidth in Kbits per second  # noqa: E501

        :param metric_bandwidth: The metric_bandwidth of this IRouteMapEntry.  # noqa: E501
        :type: int
        """

        self._metric_bandwidth = metric_bandwidth

    @property
    def policy_lists(self):
        """Gets the policy_lists of this IRouteMapEntry.  # noqa: E501

        Configure a route map to evaluate and process a BGP policy.  # noqa: E501

        :return: The policy_lists of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._policy_lists

    @policy_lists.setter
    def policy_lists(self, policy_lists):
        """Sets the policy_lists of this IRouteMapEntry.

        Configure a route map to evaluate and process a BGP policy.  # noqa: E501

        :param policy_lists: The policy_lists of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._policy_lists = policy_lists

    @property
    def ipv6_access_list_route_sources(self):
        """Gets the ipv6_access_list_route_sources of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the advertising source address of route.  # noqa: E501

        :return: The ipv6_access_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv6_access_list_route_sources

    @ipv6_access_list_route_sources.setter
    def ipv6_access_list_route_sources(self, ipv6_access_list_route_sources):
        """Sets the ipv6_access_list_route_sources of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the advertising source address of route.  # noqa: E501

        :param ipv6_access_list_route_sources: The ipv6_access_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv6_access_list_route_sources = ipv6_access_list_route_sources

    @property
    def ipv6_access_list_addresses(self):
        """Gets the ipv6_access_list_addresses of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the route address.  # noqa: E501

        :return: The ipv6_access_list_addresses of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv6_access_list_addresses

    @ipv6_access_list_addresses.setter
    def ipv6_access_list_addresses(self, ipv6_access_list_addresses):
        """Sets the ipv6_access_list_addresses of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the route address.  # noqa: E501

        :param ipv6_access_list_addresses: The ipv6_access_list_addresses of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv6_access_list_addresses = ipv6_access_list_addresses

    @property
    def ipv4_access_list_addresses(self):
        """Gets the ipv4_access_list_addresses of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the route address.  # noqa: E501

        :return: The ipv4_access_list_addresses of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_access_list_addresses

    @ipv4_access_list_addresses.setter
    def ipv4_access_list_addresses(self, ipv4_access_list_addresses):
        """Sets the ipv4_access_list_addresses of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the route address.  # noqa: E501

        :param ipv4_access_list_addresses: The ipv4_access_list_addresses of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_access_list_addresses = ipv4_access_list_addresses

    @property
    def route_type_nssa_external1(self):
        """Gets the route_type_nssa_external1 of this IRouteMapEntry.  # noqa: E501

        Enable NSSA-External1 route type  # noqa: E501

        :return: The route_type_nssa_external1 of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._route_type_nssa_external1

    @route_type_nssa_external1.setter
    def route_type_nssa_external1(self, route_type_nssa_external1):
        """Sets the route_type_nssa_external1 of this IRouteMapEntry.

        Enable NSSA-External1 route type  # noqa: E501

        :param route_type_nssa_external1: The route_type_nssa_external1 of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._route_type_nssa_external1 = route_type_nssa_external1

    @property
    def route_type_nssa_external2(self):
        """Gets the route_type_nssa_external2 of this IRouteMapEntry.  # noqa: E501

        Enable NSSA-External2 route type  # noqa: E501

        :return: The route_type_nssa_external2 of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._route_type_nssa_external2

    @route_type_nssa_external2.setter
    def route_type_nssa_external2(self, route_type_nssa_external2):
        """Sets the route_type_nssa_external2 of this IRouteMapEntry.

        Enable NSSA-External2 route type  # noqa: E501

        :param route_type_nssa_external2: The route_type_nssa_external2 of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._route_type_nssa_external2 = route_type_nssa_external2

    @property
    def ipv6_prefix_list_nexthops(self):
        """Gets the ipv6_prefix_list_nexthops of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the next-hop address.  # noqa: E501

        :return: The ipv6_prefix_list_nexthops of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv6_prefix_list_nexthops

    @ipv6_prefix_list_nexthops.setter
    def ipv6_prefix_list_nexthops(self, ipv6_prefix_list_nexthops):
        """Sets the ipv6_prefix_list_nexthops of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the next-hop address.  # noqa: E501

        :param ipv6_prefix_list_nexthops: The ipv6_prefix_list_nexthops of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv6_prefix_list_nexthops = ipv6_prefix_list_nexthops

    @property
    def next_hop_ipv4_setting(self):
        """Gets the next_hop_ipv4_setting of this IRouteMapEntry.  # noqa: E501

        Specify a next hop IPv4 address of the next hop to which packets are output.  # noqa: E501

        :return: The next_hop_ipv4_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: str
        """
        return self._next_hop_ipv4_setting

    @next_hop_ipv4_setting.setter
    def next_hop_ipv4_setting(self, next_hop_ipv4_setting):
        """Sets the next_hop_ipv4_setting of this IRouteMapEntry.

        Specify a next hop IPv4 address of the next hop to which packets are output.  # noqa: E501

        :param next_hop_ipv4_setting: The next_hop_ipv4_setting of this IRouteMapEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["USE_PEER_ADDRESS", "SPECIFIC_IP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                next_hop_ipv4_setting not in allowed_values):
            raise ValueError(
                "Invalid value for `next_hop_ipv4_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(next_hop_ipv4_setting, allowed_values)
            )

        self._next_hop_ipv4_setting = next_hop_ipv4_setting

    @property
    def metric_type(self):
        """Gets the metric_type of this IRouteMapEntry.  # noqa: E501

        Valid values are : internal, type-1, or type-2.  # noqa: E501

        :return: The metric_type of this IRouteMapEntry.  # noqa: E501
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this IRouteMapEntry.

        Valid values are : internal, type-1, or type-2.  # noqa: E501

        :param metric_type: The metric_type of this IRouteMapEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL", "TYPE_1", "TYPE_2"]  # noqa: E501
        if (self._configuration.client_side_validation and
                metric_type not in allowed_values):
            raise ValueError(
                "Invalid value for `metric_type` ({0}), must be one of {1}"  # noqa: E501
                .format(metric_type, allowed_values)
            )

        self._metric_type = metric_type

    @property
    def next_hop_ipv6_setting(self):
        """Gets the next_hop_ipv6_setting of this IRouteMapEntry.  # noqa: E501

        Specify a next hop IPv6 address of the next hop to which packets are output.  # noqa: E501

        :return: The next_hop_ipv6_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: str
        """
        return self._next_hop_ipv6_setting

    @next_hop_ipv6_setting.setter
    def next_hop_ipv6_setting(self, next_hop_ipv6_setting):
        """Sets the next_hop_ipv6_setting of this IRouteMapEntry.

        Specify a next hop IPv6 address of the next hop to which packets are output.  # noqa: E501

        :param next_hop_ipv6_setting: The next_hop_ipv6_setting of this IRouteMapEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["USE_PEER_ADDRESS", "SPECIFIC_IP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                next_hop_ipv6_setting not in allowed_values):
            raise ValueError(
                "Invalid value for `next_hop_ipv6_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(next_hop_ipv6_setting, allowed_values)
            )

        self._next_hop_ipv6_setting = next_hop_ipv6_setting

    @property
    def ipv4_access_list_next_hops(self):
        """Gets the ipv4_access_list_next_hops of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the next-hop address.  # noqa: E501

        :return: The ipv4_access_list_next_hops of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_access_list_next_hops

    @ipv4_access_list_next_hops.setter
    def ipv4_access_list_next_hops(self, ipv4_access_list_next_hops):
        """Sets the ipv4_access_list_next_hops of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the next-hop address.  # noqa: E501

        :param ipv4_access_list_next_hops: The ipv4_access_list_next_hops of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_access_list_next_hops = ipv4_access_list_next_hops

    @property
    def ipv4_prefix_list_nexthops(self):
        """Gets the ipv4_prefix_list_nexthops of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the next-hop address.  # noqa: E501

        :return: The ipv4_prefix_list_nexthops of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_prefix_list_nexthops

    @ipv4_prefix_list_nexthops.setter
    def ipv4_prefix_list_nexthops(self, ipv4_prefix_list_nexthops):
        """Sets the ipv4_prefix_list_nexthops of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the next-hop address.  # noqa: E501

        :param ipv4_prefix_list_nexthops: The ipv4_prefix_list_nexthops of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_prefix_list_nexthops = ipv4_prefix_list_nexthops

    @property
    def action(self):
        """Gets the action of this IRouteMapEntry.  # noqa: E501

        Indicate the redistribution access: PERMIT or DENY  # noqa: E501

        :return: The action of this IRouteMapEntry.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IRouteMapEntry.

        Indicate the redistribution access: PERMIT or DENY  # noqa: E501

        :param action: The action of this IRouteMapEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["PERMIT", "DENY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def as_path_lists(self):
        """Gets the as_path_lists of this IRouteMapEntry.  # noqa: E501

        Enable matching the BGP autonomous system path access list with the specified path access list.  # noqa: E501

        :return: The as_path_lists of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._as_path_lists

    @as_path_lists.setter
    def as_path_lists(self, as_path_lists):
        """Sets the as_path_lists of this IRouteMapEntry.

        Enable matching the BGP autonomous system path access list with the specified path access list.  # noqa: E501

        :param as_path_lists: The as_path_lists of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._as_path_lists = as_path_lists

    @property
    def tag_values(self):
        """Gets the tag_values of this IRouteMapEntry.  # noqa: E501

        This setting allows you to match any routes that have a specified security group tag.  # noqa: E501

        :return: The tag_values of this IRouteMapEntry.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_values

    @tag_values.setter
    def tag_values(self, tag_values):
        """Sets the tag_values of this IRouteMapEntry.

        This setting allows you to match any routes that have a specified security group tag.  # noqa: E501

        :param tag_values: The tag_values of this IRouteMapEntry.  # noqa: E501
        :type: list[int]
        """

        self._tag_values = tag_values

    @property
    def community_list_setting_internet(self):
        """Gets the community_list_setting_internet of this IRouteMapEntry.  # noqa: E501

        Internet: one of the well-known communities  # noqa: E501

        :return: The community_list_setting_internet of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._community_list_setting_internet

    @community_list_setting_internet.setter
    def community_list_setting_internet(self, community_list_setting_internet):
        """Sets the community_list_setting_internet of this IRouteMapEntry.

        Internet: one of the well-known communities  # noqa: E501

        :param community_list_setting_internet: The community_list_setting_internet of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._community_list_setting_internet = community_list_setting_internet

    @property
    def community_list_setting(self):
        """Gets the community_list_setting of this IRouteMapEntry.  # noqa: E501

        Enable matching the BGP community with the specified community.  # noqa: E501

        :return: The community_list_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: int
        """
        return self._community_list_setting

    @community_list_setting.setter
    def community_list_setting(self, community_list_setting):
        """Sets the community_list_setting of this IRouteMapEntry.

        Enable matching the BGP community with the specified community.  # noqa: E501

        :param community_list_setting: The community_list_setting of this IRouteMapEntry.  # noqa: E501
        :type: int
        """

        self._community_list_setting = community_list_setting

    @property
    def ipv6_access_list_next_hops(self):
        """Gets the ipv6_access_list_next_hops of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the next-hop address.  # noqa: E501

        :return: The ipv6_access_list_next_hops of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv6_access_list_next_hops

    @ipv6_access_list_next_hops.setter
    def ipv6_access_list_next_hops(self, ipv6_access_list_next_hops):
        """Sets the ipv6_access_list_next_hops of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the next-hop address.  # noqa: E501

        :param ipv6_access_list_next_hops: The ipv6_access_list_next_hops of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv6_access_list_next_hops = ipv6_access_list_next_hops

    @property
    def interfaces(self):
        """Gets the interfaces of this IRouteMapEntry.  # noqa: E501

        Match traffic based on the (ingress/egress) interfaces. Input security Zones.  # noqa: E501

        :return: The interfaces of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this IRouteMapEntry.

        Match traffic based on the (ingress/egress) interfaces. Input security Zones.  # noqa: E501

        :param interfaces: The interfaces of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._interfaces = interfaces

    @property
    def specific_i_ps_ipv6_setting(self):
        """Gets the specific_i_ps_ipv6_setting of this IRouteMapEntry.  # noqa: E501


        :return: The specific_i_ps_ipv6_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._specific_i_ps_ipv6_setting

    @specific_i_ps_ipv6_setting.setter
    def specific_i_ps_ipv6_setting(self, specific_i_ps_ipv6_setting):
        """Sets the specific_i_ps_ipv6_setting of this IRouteMapEntry.


        :param specific_i_ps_ipv6_setting: The specific_i_ps_ipv6_setting of this IRouteMapEntry.  # noqa: E501
        :type: list[str]
        """

        self._specific_i_ps_ipv6_setting = specific_i_ps_ipv6_setting

    @property
    def origin_setting(self):
        """Gets the origin_setting of this IRouteMapEntry.  # noqa: E501

        BGP origin code. Valid values are Local IGP Local IGP and Incomplete.  # noqa: E501

        :return: The origin_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: str
        """
        return self._origin_setting

    @origin_setting.setter
    def origin_setting(self, origin_setting):
        """Sets the origin_setting of this IRouteMapEntry.

        BGP origin code. Valid values are Local IGP Local IGP and Incomplete.  # noqa: E501

        :param origin_setting: The origin_setting of this IRouteMapEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL_IGP", "INCOMPLETE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                origin_setting not in allowed_values):
            raise ValueError(
                "Invalid value for `origin_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(origin_setting, allowed_values)
            )

        self._origin_setting = origin_setting

    @property
    def community_list_setting_no_export(self):
        """Gets the community_list_setting_no_export of this IRouteMapEntry.  # noqa: E501

        No-Export: One of the well-known communities  # noqa: E501

        :return: The community_list_setting_no_export of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._community_list_setting_no_export

    @community_list_setting_no_export.setter
    def community_list_setting_no_export(self, community_list_setting_no_export):
        """Sets the community_list_setting_no_export of this IRouteMapEntry.

        No-Export: One of the well-known communities  # noqa: E501

        :param community_list_setting_no_export: The community_list_setting_no_export of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._community_list_setting_no_export = community_list_setting_no_export

    @property
    def local_preference_setting(self):
        """Gets the local_preference_setting of this IRouteMapEntry.  # noqa: E501

        Preference value for the autonomous system path  # noqa: E501

        :return: The local_preference_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: int
        """
        return self._local_preference_setting

    @local_preference_setting.setter
    def local_preference_setting(self, local_preference_setting):
        """Sets the local_preference_setting of this IRouteMapEntry.

        Preference value for the autonomous system path  # noqa: E501

        :param local_preference_setting: The local_preference_setting of this IRouteMapEntry.  # noqa: E501
        :type: int
        """

        self._local_preference_setting = local_preference_setting

    @property
    def interface_names(self):
        """Gets the interface_names of this IRouteMapEntry.  # noqa: E501

        Match traffic based on the (ingress/egress) interfaces. Logical names.  # noqa: E501

        :return: The interface_names of this IRouteMapEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._interface_names

    @interface_names.setter
    def interface_names(self, interface_names):
        """Sets the interface_names of this IRouteMapEntry.

        Match traffic based on the (ingress/egress) interfaces. Logical names.  # noqa: E501

        :param interface_names: The interface_names of this IRouteMapEntry.  # noqa: E501
        :type: list[str]
        """

        self._interface_names = interface_names

    @property
    def automatic_tag_setting(self):
        """Gets the automatic_tag_setting of this IRouteMapEntry.  # noqa: E501

        Automatically compute the tag value.  # noqa: E501

        :return: The automatic_tag_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_tag_setting

    @automatic_tag_setting.setter
    def automatic_tag_setting(self, automatic_tag_setting):
        """Sets the automatic_tag_setting of this IRouteMapEntry.

        Automatically compute the tag value.  # noqa: E501

        :param automatic_tag_setting: The automatic_tag_setting of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._automatic_tag_setting = automatic_tag_setting

    @property
    def ipv4_prefix_list_addresses(self):
        """Gets the ipv4_prefix_list_addresses of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the route address.  # noqa: E501

        :return: The ipv4_prefix_list_addresses of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_prefix_list_addresses

    @ipv4_prefix_list_addresses.setter
    def ipv4_prefix_list_addresses(self, ipv4_prefix_list_addresses):
        """Sets the ipv4_prefix_list_addresses of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the route address.  # noqa: E501

        :param ipv4_prefix_list_addresses: The ipv4_prefix_list_addresses of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_prefix_list_addresses = ipv4_prefix_list_addresses

    @property
    def as_path_prepend_last_as_to_as_path(self):
        """Gets the as_path_prepend_last_as_to_as_path of this IRouteMapEntry.  # noqa: E501

        Prepend the AS path with the last AS number.  # noqa: E501

        :return: The as_path_prepend_last_as_to_as_path of this IRouteMapEntry.  # noqa: E501
        :rtype: int
        """
        return self._as_path_prepend_last_as_to_as_path

    @as_path_prepend_last_as_to_as_path.setter
    def as_path_prepend_last_as_to_as_path(self, as_path_prepend_last_as_to_as_path):
        """Sets the as_path_prepend_last_as_to_as_path of this IRouteMapEntry.

        Prepend the AS path with the last AS number.  # noqa: E501

        :param as_path_prepend_last_as_to_as_path: The as_path_prepend_last_as_to_as_path of this IRouteMapEntry.  # noqa: E501
        :type: int
        """

        self._as_path_prepend_last_as_to_as_path = as_path_prepend_last_as_to_as_path

    @property
    def ipv6_prefix_list_addresses(self):
        """Gets the ipv6_prefix_list_addresses of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the route address.  # noqa: E501

        :return: The ipv6_prefix_list_addresses of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv6_prefix_list_addresses

    @ipv6_prefix_list_addresses.setter
    def ipv6_prefix_list_addresses(self, ipv6_prefix_list_addresses):
        """Sets the ipv6_prefix_list_addresses of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the route address.  # noqa: E501

        :param ipv6_prefix_list_addresses: The ipv6_prefix_list_addresses of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv6_prefix_list_addresses = ipv6_prefix_list_addresses

    @property
    def ipv6_prefix_list_route_sources(self):
        """Gets the ipv6_prefix_list_route_sources of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the advertising source address of route.  # noqa: E501

        :return: The ipv6_prefix_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv6_prefix_list_route_sources

    @ipv6_prefix_list_route_sources.setter
    def ipv6_prefix_list_route_sources(self, ipv6_prefix_list_route_sources):
        """Sets the ipv6_prefix_list_route_sources of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the advertising source address of route.  # noqa: E501

        :param ipv6_prefix_list_route_sources: The ipv6_prefix_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv6_prefix_list_route_sources = ipv6_prefix_list_route_sources

    @property
    def prefix_list_ipv4_setting(self):
        """Gets the prefix_list_ipv4_setting of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the route address.  # noqa: E501

        :return: The prefix_list_ipv4_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: IReference
        """
        return self._prefix_list_ipv4_setting

    @prefix_list_ipv4_setting.setter
    def prefix_list_ipv4_setting(self, prefix_list_ipv4_setting):
        """Sets the prefix_list_ipv4_setting of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the route address.  # noqa: E501

        :param prefix_list_ipv4_setting: The prefix_list_ipv4_setting of this IRouteMapEntry.  # noqa: E501
        :type: IReference
        """

        self._prefix_list_ipv4_setting = prefix_list_ipv4_setting

    @property
    def prefix_list_ipv6_setting(self):
        """Gets the prefix_list_ipv6_setting of this IRouteMapEntry.  # noqa: E501

        Match IPv6 (routes/traffic) based on the route address.  # noqa: E501

        :return: The prefix_list_ipv6_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: IReference
        """
        return self._prefix_list_ipv6_setting

    @prefix_list_ipv6_setting.setter
    def prefix_list_ipv6_setting(self, prefix_list_ipv6_setting):
        """Sets the prefix_list_ipv6_setting of this IRouteMapEntry.

        Match IPv6 (routes/traffic) based on the route address.  # noqa: E501

        :param prefix_list_ipv6_setting: The prefix_list_ipv6_setting of this IRouteMapEntry.  # noqa: E501
        :type: IReference
        """

        self._prefix_list_ipv6_setting = prefix_list_ipv6_setting

    @property
    def sequence(self):
        """Gets the sequence of this IRouteMapEntry.  # noqa: E501

        Indicates the position a new route map entry will have in the list of route maps entries already configured for this route map object  # noqa: E501

        :return: The sequence of this IRouteMapEntry.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this IRouteMapEntry.

        Indicates the position a new route map entry will have in the list of route maps entries already configured for this route map object  # noqa: E501

        :param sequence: The sequence of this IRouteMapEntry.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def route_type_external2(self):
        """Gets the route_type_external2 of this IRouteMapEntry.  # noqa: E501

        Enable External2 route type  # noqa: E501

        :return: The route_type_external2 of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._route_type_external2

    @route_type_external2.setter
    def route_type_external2(self, route_type_external2):
        """Sets the route_type_external2 of this IRouteMapEntry.

        Enable External2 route type  # noqa: E501

        :param route_type_external2: The route_type_external2 of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._route_type_external2 = route_type_external2

    @property
    def metric_route_values(self):
        """Gets the metric_route_values of this IRouteMapEntry.  # noqa: E501

        Enable matching the metric of a route  # noqa: E501

        :return: The metric_route_values of this IRouteMapEntry.  # noqa: E501
        :rtype: list[int]
        """
        return self._metric_route_values

    @metric_route_values.setter
    def metric_route_values(self, metric_route_values):
        """Sets the metric_route_values of this IRouteMapEntry.

        Enable matching the metric of a route  # noqa: E501

        :param metric_route_values: The metric_route_values of this IRouteMapEntry.  # noqa: E501
        :type: list[int]
        """

        self._metric_route_values = metric_route_values

    @property
    def community_list_setting_no_advertise(self):
        """Gets the community_list_setting_no_advertise of this IRouteMapEntry.  # noqa: E501

        No Advertise: one of the well-known communities  # noqa: E501

        :return: The community_list_setting_no_advertise of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._community_list_setting_no_advertise

    @community_list_setting_no_advertise.setter
    def community_list_setting_no_advertise(self, community_list_setting_no_advertise):
        """Sets the community_list_setting_no_advertise of this IRouteMapEntry.

        No Advertise: one of the well-known communities  # noqa: E501

        :param community_list_setting_no_advertise: The community_list_setting_no_advertise of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._community_list_setting_no_advertise = community_list_setting_no_advertise

    @property
    def route_type_external1(self):
        """Gets the route_type_external1 of this IRouteMapEntry.  # noqa: E501

        Enable External1 route type  # noqa: E501

        :return: The route_type_external1 of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._route_type_external1

    @route_type_external1.setter
    def route_type_external1(self, route_type_external1):
        """Sets the route_type_external1 of this IRouteMapEntry.

        Enable External1 route type  # noqa: E501

        :param route_type_external1: The route_type_external1 of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._route_type_external1 = route_type_external1

    @property
    def community_lists(self):
        """Gets the community_lists of this IRouteMapEntry.  # noqa: E501

        Enable matching the BGP community with the specified community.  # noqa: E501

        :return: The community_lists of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._community_lists

    @community_lists.setter
    def community_lists(self, community_lists):
        """Sets the community_lists of this IRouteMapEntry.

        Enable matching the BGP community with the specified community.  # noqa: E501

        :param community_lists: The community_lists of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._community_lists = community_lists

    @property
    def specific_i_ps_ipv4_setting(self):
        """Gets the specific_i_ps_ipv4_setting of this IRouteMapEntry.  # noqa: E501


        :return: The specific_i_ps_ipv4_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._specific_i_ps_ipv4_setting

    @specific_i_ps_ipv4_setting.setter
    def specific_i_ps_ipv4_setting(self, specific_i_ps_ipv4_setting):
        """Sets the specific_i_ps_ipv4_setting of this IRouteMapEntry.


        :param specific_i_ps_ipv4_setting: The specific_i_ps_ipv4_setting of this IRouteMapEntry.  # noqa: E501
        :type: list[str]
        """

        self._specific_i_ps_ipv4_setting = specific_i_ps_ipv4_setting

    @property
    def as_path_prepend_as_path(self):
        """Gets the as_path_prepend_as_path of this IRouteMapEntry.  # noqa: E501

        Prepend an arbitrary autonomous system path string to BGP routes.  # noqa: E501

        :return: The as_path_prepend_as_path of this IRouteMapEntry.  # noqa: E501
        :rtype: list[int]
        """
        return self._as_path_prepend_as_path

    @as_path_prepend_as_path.setter
    def as_path_prepend_as_path(self, as_path_prepend_as_path):
        """Sets the as_path_prepend_as_path of this IRouteMapEntry.

        Prepend an arbitrary autonomous system path string to BGP routes.  # noqa: E501

        :param as_path_prepend_as_path: The as_path_prepend_as_path of this IRouteMapEntry.  # noqa: E501
        :type: list[int]
        """

        self._as_path_prepend_as_path = as_path_prepend_as_path

    @property
    def ipv4_access_list_route_sources(self):
        """Gets the ipv4_access_list_route_sources of this IRouteMapEntry.  # noqa: E501

        Match IPv4 (routes/traffic) based on the advertising source address of the route.   # noqa: E501

        :return: The ipv4_access_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_access_list_route_sources

    @ipv4_access_list_route_sources.setter
    def ipv4_access_list_route_sources(self, ipv4_access_list_route_sources):
        """Sets the ipv4_access_list_route_sources of this IRouteMapEntry.

        Match IPv4 (routes/traffic) based on the advertising source address of the route.   # noqa: E501

        :param ipv4_access_list_route_sources: The ipv4_access_list_route_sources of this IRouteMapEntry.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_access_list_route_sources = ipv4_access_list_route_sources

    @property
    def weight_setting(self):
        """Gets the weight_setting of this IRouteMapEntry.  # noqa: E501

        BGP weight for the routing table  # noqa: E501

        :return: The weight_setting of this IRouteMapEntry.  # noqa: E501
        :rtype: int
        """
        return self._weight_setting

    @weight_setting.setter
    def weight_setting(self, weight_setting):
        """Sets the weight_setting of this IRouteMapEntry.

        BGP weight for the routing table  # noqa: E501

        :param weight_setting: The weight_setting of this IRouteMapEntry.  # noqa: E501
        :type: int
        """

        self._weight_setting = weight_setting

    @property
    def route_type_local(self):
        """Gets the route_type_local of this IRouteMapEntry.  # noqa: E501

        Enable Local route type  # noqa: E501

        :return: The route_type_local of this IRouteMapEntry.  # noqa: E501
        :rtype: bool
        """
        return self._route_type_local

    @route_type_local.setter
    def route_type_local(self, route_type_local):
        """Sets the route_type_local of this IRouteMapEntry.

        Enable Local route type  # noqa: E501

        :param route_type_local: The route_type_local of this IRouteMapEntry.  # noqa: E501
        :type: bool
        """

        self._route_type_local = route_type_local

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IRouteMapEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IRouteMapEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IRouteMapEntry):
            return True

        return self.to_dict() != other.to_dict()
