# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IExtendedACLEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_level': 'str',
        'source_networks': 'INetworkObjectsContainer',
        'destination_ports': 'IPortObjectsContainer',
        'destination_networks': 'INetworkObjectsContainer',
        'action': 'str',
        'logging': 'str',
        'source_ports': 'IPortObjectsContainer',
        'log_interval': 'int'
    }

    attribute_map = {
        'log_level': 'logLevel',
        'source_networks': 'sourceNetworks',
        'destination_ports': 'destinationPorts',
        'destination_networks': 'destinationNetworks',
        'action': 'action',
        'logging': 'logging',
        'source_ports': 'sourcePorts',
        'log_interval': 'logInterval'
    }

    def __init__(self, log_level=None, source_networks=None, destination_ports=None, destination_networks=None, action=None, logging=None, source_ports=None, log_interval=None, _configuration=None):  # noqa: E501
        """IExtendedACLEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._log_level = None
        self._source_networks = None
        self._destination_ports = None
        self._destination_networks = None
        self._action = None
        self._logging = None
        self._source_ports = None
        self._log_interval = None
        self.discriminator = None

        self.log_level = log_level
        if source_networks is not None:
            self.source_networks = source_networks
        if destination_ports is not None:
            self.destination_ports = destination_ports
        if destination_networks is not None:
            self.destination_networks = destination_networks
        self.action = action
        self.logging = logging
        if source_ports is not None:
            self.source_ports = source_ports
        if log_interval is not None:
            self.log_interval = log_interval

    @property
    def log_level(self):
        """Gets the log_level of this IExtendedACLEntry.  # noqa: E501


        :return: The log_level of this IExtendedACLEntry.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this IExtendedACLEntry.


        :param log_level: The log_level of this IExtendedACLEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")  # noqa: E501
        allowed_values = ["EMERGENCY", "ALERT", "CRITICAL", "WARNING", "ERROR", "NOTIFICATION", "INFORMATIONAL", "DEBUGGING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                log_level not in allowed_values):
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def source_networks(self):
        """Gets the source_networks of this IExtendedACLEntry.  # noqa: E501


        :return: The source_networks of this IExtendedACLEntry.  # noqa: E501
        :rtype: INetworkObjectsContainer
        """
        return self._source_networks

    @source_networks.setter
    def source_networks(self, source_networks):
        """Sets the source_networks of this IExtendedACLEntry.


        :param source_networks: The source_networks of this IExtendedACLEntry.  # noqa: E501
        :type: INetworkObjectsContainer
        """

        self._source_networks = source_networks

    @property
    def destination_ports(self):
        """Gets the destination_ports of this IExtendedACLEntry.  # noqa: E501


        :return: The destination_ports of this IExtendedACLEntry.  # noqa: E501
        :rtype: IPortObjectsContainer
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this IExtendedACLEntry.


        :param destination_ports: The destination_ports of this IExtendedACLEntry.  # noqa: E501
        :type: IPortObjectsContainer
        """

        self._destination_ports = destination_ports

    @property
    def destination_networks(self):
        """Gets the destination_networks of this IExtendedACLEntry.  # noqa: E501


        :return: The destination_networks of this IExtendedACLEntry.  # noqa: E501
        :rtype: INetworkObjectsContainer
        """
        return self._destination_networks

    @destination_networks.setter
    def destination_networks(self, destination_networks):
        """Sets the destination_networks of this IExtendedACLEntry.


        :param destination_networks: The destination_networks of this IExtendedACLEntry.  # noqa: E501
        :type: INetworkObjectsContainer
        """

        self._destination_networks = destination_networks

    @property
    def action(self):
        """Gets the action of this IExtendedACLEntry.  # noqa: E501


        :return: The action of this IExtendedACLEntry.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IExtendedACLEntry.


        :param action: The action of this IExtendedACLEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["PERMIT", "DENY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def logging(self):
        """Gets the logging of this IExtendedACLEntry.  # noqa: E501


        :return: The logging of this IExtendedACLEntry.  # noqa: E501
        :rtype: str
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this IExtendedACLEntry.


        :param logging: The logging of this IExtendedACLEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and logging is None:
            raise ValueError("Invalid value for `logging`, must not be `None`")  # noqa: E501
        allowed_values = ["PER_ACCESS_LIST_ENTRY", "DEFAULT", "DISABLED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                logging not in allowed_values):
            raise ValueError(
                "Invalid value for `logging` ({0}), must be one of {1}"  # noqa: E501
                .format(logging, allowed_values)
            )

        self._logging = logging

    @property
    def source_ports(self):
        """Gets the source_ports of this IExtendedACLEntry.  # noqa: E501


        :return: The source_ports of this IExtendedACLEntry.  # noqa: E501
        :rtype: IPortObjectsContainer
        """
        return self._source_ports

    @source_ports.setter
    def source_ports(self, source_ports):
        """Sets the source_ports of this IExtendedACLEntry.


        :param source_ports: The source_ports of this IExtendedACLEntry.  # noqa: E501
        :type: IPortObjectsContainer
        """

        self._source_ports = source_ports

    @property
    def log_interval(self):
        """Gets the log_interval of this IExtendedACLEntry.  # noqa: E501


        :return: The log_interval of this IExtendedACLEntry.  # noqa: E501
        :rtype: int
        """
        return self._log_interval

    @log_interval.setter
    def log_interval(self, log_interval):
        """Sets the log_interval of this IExtendedACLEntry.


        :param log_interval: The log_interval of this IExtendedACLEntry.  # noqa: E501
        :type: int
        """

        self._log_interval = log_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IExtendedACLEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IExtendedACLEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IExtendedACLEntry):
            return True

        return self.to_dict() != other.to_dict()
