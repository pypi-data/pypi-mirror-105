# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class RESTObservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_id': 'str',
        'data': 'RESTObservationData',
        'count': 'int',
        'type': 'str',
        'timestamp': 'int',
        'element_name': 'str',
        'llobservation': 'LLObservation'
    }

    attribute_map = {
        'element_id': 'elementId',
        'data': 'data',
        'count': 'count',
        'type': 'type',
        'timestamp': 'timestamp',
        'element_name': 'elementName',
        'llobservation': 'llobservation'
    }

    def __init__(self, element_id=None, data=None, count=None, type=None, timestamp=None, element_name=None, llobservation=None, _configuration=None):  # noqa: E501
        """RESTObservation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._element_id = None
        self._data = None
        self._count = None
        self._type = None
        self._timestamp = None
        self._element_name = None
        self._llobservation = None
        self.discriminator = None

        if element_id is not None:
            self.element_id = element_id
        if data is not None:
            self.data = data
        if count is not None:
            self.count = count
        if type is not None:
            self.type = type
        if timestamp is not None:
            self.timestamp = timestamp
        if element_name is not None:
            self.element_name = element_name
        if llobservation is not None:
            self.llobservation = llobservation

    @property
    def element_id(self):
        """Gets the element_id of this RESTObservation.  # noqa: E501


        :return: The element_id of this RESTObservation.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this RESTObservation.


        :param element_id: The element_id of this RESTObservation.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def data(self):
        """Gets the data of this RESTObservation.  # noqa: E501


        :return: The data of this RESTObservation.  # noqa: E501
        :rtype: RESTObservationData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RESTObservation.


        :param data: The data of this RESTObservation.  # noqa: E501
        :type: RESTObservationData
        """

        self._data = data

    @property
    def count(self):
        """Gets the count of this RESTObservation.  # noqa: E501


        :return: The count of this RESTObservation.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RESTObservation.


        :param count: The count of this RESTObservation.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def type(self):
        """Gets the type of this RESTObservation.  # noqa: E501


        :return: The type of this RESTObservation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RESTObservation.


        :param type: The type of this RESTObservation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this RESTObservation.  # noqa: E501


        :return: The timestamp of this RESTObservation.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RESTObservation.


        :param timestamp: The timestamp of this RESTObservation.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def element_name(self):
        """Gets the element_name of this RESTObservation.  # noqa: E501


        :return: The element_name of this RESTObservation.  # noqa: E501
        :rtype: str
        """
        return self._element_name

    @element_name.setter
    def element_name(self, element_name):
        """Sets the element_name of this RESTObservation.


        :param element_name: The element_name of this RESTObservation.  # noqa: E501
        :type: str
        """

        self._element_name = element_name

    @property
    def llobservation(self):
        """Gets the llobservation of this RESTObservation.  # noqa: E501


        :return: The llobservation of this RESTObservation.  # noqa: E501
        :rtype: LLObservation
        """
        return self._llobservation

    @llobservation.setter
    def llobservation(self, llobservation):
        """Sets the llobservation of this RESTObservation.


        :param llobservation: The llobservation of this RESTObservation.  # noqa: E501
        :type: LLObservation
        """

        self._llobservation = llobservation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RESTObservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RESTObservation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RESTObservation):
            return True

        return self.to_dict() != other.to_dict()
