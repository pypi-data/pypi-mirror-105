# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class FPInterfaceStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'rx_bytes': 'int',
        'tx_bytes': 'int',
        'interface_uuid': 'str',
        'name': 'str',
        'description': 'str',
        'links': 'Links',
        'id': 'str',
        'type': 'str',
        'version': 'str',
        'dropped_packets': 'int'
    }

    attribute_map = {
        'metadata': 'metadata',
        'rx_bytes': 'rxBytes',
        'tx_bytes': 'txBytes',
        'interface_uuid': 'interfaceUuid',
        'name': 'name',
        'description': 'description',
        'links': 'links',
        'id': 'id',
        'type': 'type',
        'version': 'version',
        'dropped_packets': 'droppedPackets'
    }

    def __init__(self, metadata=None, rx_bytes=None, tx_bytes=None, interface_uuid=None, name=None, description=None, links=None, id=None, type=None, version=None, dropped_packets=None, _configuration=None):  # noqa: E501
        """FPInterfaceStatistics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._rx_bytes = None
        self._tx_bytes = None
        self._interface_uuid = None
        self._name = None
        self._description = None
        self._links = None
        self._id = None
        self._type = None
        self._version = None
        self._dropped_packets = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if rx_bytes is not None:
            self.rx_bytes = rx_bytes
        if tx_bytes is not None:
            self.tx_bytes = tx_bytes
        if interface_uuid is not None:
            self.interface_uuid = interface_uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if dropped_packets is not None:
            self.dropped_packets = dropped_packets

    @property
    def metadata(self):
        """Gets the metadata of this FPInterfaceStatistics.  # noqa: E501


        :return: The metadata of this FPInterfaceStatistics.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FPInterfaceStatistics.


        :param metadata: The metadata of this FPInterfaceStatistics.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def rx_bytes(self):
        """Gets the rx_bytes of this FPInterfaceStatistics.  # noqa: E501


        :return: The rx_bytes of this FPInterfaceStatistics.  # noqa: E501
        :rtype: int
        """
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, rx_bytes):
        """Sets the rx_bytes of this FPInterfaceStatistics.


        :param rx_bytes: The rx_bytes of this FPInterfaceStatistics.  # noqa: E501
        :type: int
        """

        self._rx_bytes = rx_bytes

    @property
    def tx_bytes(self):
        """Gets the tx_bytes of this FPInterfaceStatistics.  # noqa: E501


        :return: The tx_bytes of this FPInterfaceStatistics.  # noqa: E501
        :rtype: int
        """
        return self._tx_bytes

    @tx_bytes.setter
    def tx_bytes(self, tx_bytes):
        """Sets the tx_bytes of this FPInterfaceStatistics.


        :param tx_bytes: The tx_bytes of this FPInterfaceStatistics.  # noqa: E501
        :type: int
        """

        self._tx_bytes = tx_bytes

    @property
    def interface_uuid(self):
        """Gets the interface_uuid of this FPInterfaceStatistics.  # noqa: E501


        :return: The interface_uuid of this FPInterfaceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._interface_uuid

    @interface_uuid.setter
    def interface_uuid(self, interface_uuid):
        """Sets the interface_uuid of this FPInterfaceStatistics.


        :param interface_uuid: The interface_uuid of this FPInterfaceStatistics.  # noqa: E501
        :type: str
        """

        self._interface_uuid = interface_uuid

    @property
    def name(self):
        """Gets the name of this FPInterfaceStatistics.  # noqa: E501


        :return: The name of this FPInterfaceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FPInterfaceStatistics.


        :param name: The name of this FPInterfaceStatistics.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FPInterfaceStatistics.  # noqa: E501


        :return: The description of this FPInterfaceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FPInterfaceStatistics.


        :param description: The description of this FPInterfaceStatistics.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this FPInterfaceStatistics.  # noqa: E501


        :return: The links of this FPInterfaceStatistics.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FPInterfaceStatistics.


        :param links: The links of this FPInterfaceStatistics.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this FPInterfaceStatistics.  # noqa: E501


        :return: The id of this FPInterfaceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FPInterfaceStatistics.


        :param id: The id of this FPInterfaceStatistics.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this FPInterfaceStatistics.  # noqa: E501


        :return: The type of this FPInterfaceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FPInterfaceStatistics.


        :param type: The type of this FPInterfaceStatistics.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this FPInterfaceStatistics.  # noqa: E501


        :return: The version of this FPInterfaceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FPInterfaceStatistics.


        :param version: The version of this FPInterfaceStatistics.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def dropped_packets(self):
        """Gets the dropped_packets of this FPInterfaceStatistics.  # noqa: E501


        :return: The dropped_packets of this FPInterfaceStatistics.  # noqa: E501
        :rtype: int
        """
        return self._dropped_packets

    @dropped_packets.setter
    def dropped_packets(self, dropped_packets):
        """Sets the dropped_packets of this FPInterfaceStatistics.


        :param dropped_packets: The dropped_packets of this FPInterfaceStatistics.  # noqa: E501
        :type: int
        """

        self._dropped_packets = dropped_packets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FPInterfaceStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FPInterfaceStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FPInterfaceStatistics):
            return True

        return self.to_dict() != other.to_dict()
