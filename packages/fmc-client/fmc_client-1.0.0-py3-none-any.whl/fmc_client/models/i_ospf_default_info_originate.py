# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfDefaultInfoOriginate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'always': 'bool',
        'route_map': 'IRouteMap',
        'route_metric': 'IOspfRouteMetric'
    }

    attribute_map = {
        'always': 'always',
        'route_map': 'routeMap',
        'route_metric': 'routeMetric'
    }

    def __init__(self, always=None, route_map=None, route_metric=None, _configuration=None):  # noqa: E501
        """IOspfDefaultInfoOriginate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._always = None
        self._route_map = None
        self._route_metric = None
        self.discriminator = None

        if always is not None:
            self.always = always
        if route_map is not None:
            self.route_map = route_map
        if route_metric is not None:
            self.route_metric = route_metric

    @property
    def always(self):
        """Gets the always of this IOspfDefaultInfoOriginate.  # noqa: E501


        :return: The always of this IOspfDefaultInfoOriginate.  # noqa: E501
        :rtype: bool
        """
        return self._always

    @always.setter
    def always(self, always):
        """Sets the always of this IOspfDefaultInfoOriginate.


        :param always: The always of this IOspfDefaultInfoOriginate.  # noqa: E501
        :type: bool
        """

        self._always = always

    @property
    def route_map(self):
        """Gets the route_map of this IOspfDefaultInfoOriginate.  # noqa: E501


        :return: The route_map of this IOspfDefaultInfoOriginate.  # noqa: E501
        :rtype: IRouteMap
        """
        return self._route_map

    @route_map.setter
    def route_map(self, route_map):
        """Sets the route_map of this IOspfDefaultInfoOriginate.


        :param route_map: The route_map of this IOspfDefaultInfoOriginate.  # noqa: E501
        :type: IRouteMap
        """

        self._route_map = route_map

    @property
    def route_metric(self):
        """Gets the route_metric of this IOspfDefaultInfoOriginate.  # noqa: E501


        :return: The route_metric of this IOspfDefaultInfoOriginate.  # noqa: E501
        :rtype: IOspfRouteMetric
        """
        return self._route_metric

    @route_metric.setter
    def route_metric(self, route_metric):
        """Sets the route_metric of this IOspfDefaultInfoOriginate.


        :param route_metric: The route_metric of this IOspfDefaultInfoOriginate.  # noqa: E501
        :type: IOspfRouteMetric
        """

        self._route_metric = route_metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfDefaultInfoOriginate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfDefaultInfoOriginate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfDefaultInfoOriginate):
            return True

        return self.to_dict() != other.to_dict()
