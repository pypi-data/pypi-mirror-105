# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class TimeRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'Metadata',
        'effective_end_date_time': 'str',
        'effective_start_date_time': 'str',
        'name': 'str',
        'description': 'str',
        'links': 'Links',
        'id': 'str',
        'type': 'str',
        'recurrence_list': 'list[IRecurrence]',
        'version': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'effective_end_date_time': 'effectiveEndDateTime',
        'effective_start_date_time': 'effectiveStartDateTime',
        'name': 'name',
        'description': 'description',
        'links': 'links',
        'id': 'id',
        'type': 'type',
        'recurrence_list': 'recurrenceList',
        'version': 'version'
    }

    def __init__(self, metadata=None, effective_end_date_time=None, effective_start_date_time=None, name=None, description=None, links=None, id=None, type=None, recurrence_list=None, version=None, _configuration=None):  # noqa: E501
        """TimeRange - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._effective_end_date_time = None
        self._effective_start_date_time = None
        self._name = None
        self._description = None
        self._links = None
        self._id = None
        self._type = None
        self._recurrence_list = None
        self._version = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if effective_end_date_time is not None:
            self.effective_end_date_time = effective_end_date_time
        if effective_start_date_time is not None:
            self.effective_start_date_time = effective_start_date_time
        self.name = name
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if recurrence_list is not None:
            self.recurrence_list = recurrence_list
        if version is not None:
            self.version = version

    @property
    def metadata(self):
        """Gets the metadata of this TimeRange.  # noqa: E501

        Object representing metadata properties of the response object.  # noqa: E501

        :return: The metadata of this TimeRange.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TimeRange.

        Object representing metadata properties of the response object.  # noqa: E501

        :param metadata: The metadata of this TimeRange.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def effective_end_date_time(self):
        """Gets the effective_end_date_time of this TimeRange.  # noqa: E501

        Represents the absolute date and time (in ISO 8601 format) at which the time range object stops being effective. If not specified, value is considered, 'never ends'.  # noqa: E501

        :return: The effective_end_date_time of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._effective_end_date_time

    @effective_end_date_time.setter
    def effective_end_date_time(self, effective_end_date_time):
        """Sets the effective_end_date_time of this TimeRange.

        Represents the absolute date and time (in ISO 8601 format) at which the time range object stops being effective. If not specified, value is considered, 'never ends'.  # noqa: E501

        :param effective_end_date_time: The effective_end_date_time of this TimeRange.  # noqa: E501
        :type: str
        """

        self._effective_end_date_time = effective_end_date_time

    @property
    def effective_start_date_time(self):
        """Gets the effective_start_date_time of this TimeRange.  # noqa: E501

        Represents the absolute date and time (in ISO 8601 format) at which the time range object starts being effective. If not specified, value is considered, 'starts now'.  # noqa: E501

        :return: The effective_start_date_time of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._effective_start_date_time

    @effective_start_date_time.setter
    def effective_start_date_time(self, effective_start_date_time):
        """Sets the effective_start_date_time of this TimeRange.

        Represents the absolute date and time (in ISO 8601 format) at which the time range object starts being effective. If not specified, value is considered, 'starts now'.  # noqa: E501

        :param effective_start_date_time: The effective_start_date_time of this TimeRange.  # noqa: E501
        :type: str
        """

        self._effective_start_date_time = effective_start_date_time

    @property
    def name(self):
        """Gets the name of this TimeRange.  # noqa: E501

        User assigned resource name.  # noqa: E501

        :return: The name of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeRange.

        User assigned resource name.  # noqa: E501

        :param name: The name of this TimeRange.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TimeRange.  # noqa: E501

        User provided resource description.  # noqa: E501

        :return: The description of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeRange.

        User provided resource description.  # noqa: E501

        :param description: The description of this TimeRange.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this TimeRange.  # noqa: E501

        Object containing related links.  # noqa: E501

        :return: The links of this TimeRange.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TimeRange.

        Object containing related links.  # noqa: E501

        :param links: The links of this TimeRange.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this TimeRange.  # noqa: E501

        Unique identifier representing response object.  # noqa: E501

        :return: The id of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeRange.

        Unique identifier representing response object.  # noqa: E501

        :param id: The id of this TimeRange.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TimeRange.  # noqa: E501

        Type of the response object. This value is always TimeRange.  # noqa: E501

        :return: The type of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeRange.

        Type of the response object. This value is always TimeRange.  # noqa: E501

        :param type: The type of this TimeRange.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def recurrence_list(self):
        """Gets the recurrence_list of this TimeRange.  # noqa: E501

        Represents the list of recurring intervals during which the time range is effective. These intervals are valid only between effectiveStartDateTime and effectiveEndDateTime.  # noqa: E501

        :return: The recurrence_list of this TimeRange.  # noqa: E501
        :rtype: list[IRecurrence]
        """
        return self._recurrence_list

    @recurrence_list.setter
    def recurrence_list(self, recurrence_list):
        """Sets the recurrence_list of this TimeRange.

        Represents the list of recurring intervals during which the time range is effective. These intervals are valid only between effectiveStartDateTime and effectiveEndDateTime.  # noqa: E501

        :param recurrence_list: The recurrence_list of this TimeRange.  # noqa: E501
        :type: list[IRecurrence]
        """

        self._recurrence_list = recurrence_list

    @property
    def version(self):
        """Gets the version of this TimeRange.  # noqa: E501

        Version number of the response object.  # noqa: E501

        :return: The version of this TimeRange.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TimeRange.

        Version number of the response object.  # noqa: E501

        :param version: The version of this TimeRange.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeRange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeRange):
            return True

        return self.to_dict() != other.to_dict()
