# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class FTDManualNatRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'Metadata',
        'translated_destination_port': 'IProtocolPortObject',
        'fall_through': 'bool',
        'nat_type': 'str',
        'target_index': 'int',
        'translated_source_port': 'IProtocolPortObject',
        'translated_destination': 'INetworkAddress',
        'description': 'str',
        'section': 'str',
        'type': 'str',
        'enabled': 'bool',
        'original_source_port': 'IProtocolPortObject',
        'source_interface': 'IInterfaceObjectModel',
        'interface_in_original_destination': 'bool',
        'net_to_net': 'bool',
        'links': 'ILinks',
        'id': 'str',
        'original_source': 'INetworkAddress',
        'dns': 'bool',
        'pat_options': 'IPatOptionsContainer',
        'version': 'str',
        'no_proxy_arp': 'bool',
        'translated_source': 'INetworkAddress',
        'interface_in_translated_source': 'bool',
        'route_lookup': 'bool',
        'original_destination': 'INetworkAddress',
        'unidirectional': 'bool',
        'name': 'str',
        'destination_interface': 'IInterfaceObjectModel',
        'original_destination_port': 'IProtocolPortObject',
        'interface_ipv6': 'bool'
    }

    attribute_map = {
        'metadata': 'metadata',
        'translated_destination_port': 'translatedDestinationPort',
        'fall_through': 'fallThrough',
        'nat_type': 'natType',
        'target_index': 'targetIndex',
        'translated_source_port': 'translatedSourcePort',
        'translated_destination': 'translatedDestination',
        'description': 'description',
        'section': 'section',
        'type': 'type',
        'enabled': 'enabled',
        'original_source_port': 'originalSourcePort',
        'source_interface': 'sourceInterface',
        'interface_in_original_destination': 'interfaceInOriginalDestination',
        'net_to_net': 'netToNet',
        'links': 'links',
        'id': 'id',
        'original_source': 'originalSource',
        'dns': 'dns',
        'pat_options': 'patOptions',
        'version': 'version',
        'no_proxy_arp': 'noProxyArp',
        'translated_source': 'translatedSource',
        'interface_in_translated_source': 'interfaceInTranslatedSource',
        'route_lookup': 'routeLookup',
        'original_destination': 'originalDestination',
        'unidirectional': 'unidirectional',
        'name': 'name',
        'destination_interface': 'destinationInterface',
        'original_destination_port': 'originalDestinationPort',
        'interface_ipv6': 'interfaceIpv6'
    }

    def __init__(self, metadata=None, translated_destination_port=None, fall_through=None, nat_type=None, target_index=None, translated_source_port=None, translated_destination=None, description=None, section=None, type=None, enabled=None, original_source_port=None, source_interface=None, interface_in_original_destination=None, net_to_net=None, links=None, id=None, original_source=None, dns=None, pat_options=None, version=None, no_proxy_arp=None, translated_source=None, interface_in_translated_source=None, route_lookup=None, original_destination=None, unidirectional=None, name=None, destination_interface=None, original_destination_port=None, interface_ipv6=None, _configuration=None):  # noqa: E501
        """FTDManualNatRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._translated_destination_port = None
        self._fall_through = None
        self._nat_type = None
        self._target_index = None
        self._translated_source_port = None
        self._translated_destination = None
        self._description = None
        self._section = None
        self._type = None
        self._enabled = None
        self._original_source_port = None
        self._source_interface = None
        self._interface_in_original_destination = None
        self._net_to_net = None
        self._links = None
        self._id = None
        self._original_source = None
        self._dns = None
        self._pat_options = None
        self._version = None
        self._no_proxy_arp = None
        self._translated_source = None
        self._interface_in_translated_source = None
        self._route_lookup = None
        self._original_destination = None
        self._unidirectional = None
        self._name = None
        self._destination_interface = None
        self._original_destination_port = None
        self._interface_ipv6 = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if translated_destination_port is not None:
            self.translated_destination_port = translated_destination_port
        if fall_through is not None:
            self.fall_through = fall_through
        self.nat_type = nat_type
        if target_index is not None:
            self.target_index = target_index
        if translated_source_port is not None:
            self.translated_source_port = translated_source_port
        if translated_destination is not None:
            self.translated_destination = translated_destination
        if description is not None:
            self.description = description
        if section is not None:
            self.section = section
        if type is not None:
            self.type = type
        if enabled is not None:
            self.enabled = enabled
        if original_source_port is not None:
            self.original_source_port = original_source_port
        if source_interface is not None:
            self.source_interface = source_interface
        if interface_in_original_destination is not None:
            self.interface_in_original_destination = interface_in_original_destination
        if net_to_net is not None:
            self.net_to_net = net_to_net
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        self.original_source = original_source
        if dns is not None:
            self.dns = dns
        if pat_options is not None:
            self.pat_options = pat_options
        if version is not None:
            self.version = version
        if no_proxy_arp is not None:
            self.no_proxy_arp = no_proxy_arp
        if translated_source is not None:
            self.translated_source = translated_source
        if interface_in_translated_source is not None:
            self.interface_in_translated_source = interface_in_translated_source
        if route_lookup is not None:
            self.route_lookup = route_lookup
        if original_destination is not None:
            self.original_destination = original_destination
        if unidirectional is not None:
            self.unidirectional = unidirectional
        if name is not None:
            self.name = name
        if destination_interface is not None:
            self.destination_interface = destination_interface
        if original_destination_port is not None:
            self.original_destination_port = original_destination_port
        if interface_ipv6 is not None:
            self.interface_ipv6 = interface_ipv6

    @property
    def metadata(self):
        """Gets the metadata of this FTDManualNatRule.  # noqa: E501


        :return: The metadata of this FTDManualNatRule.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FTDManualNatRule.


        :param metadata: The metadata of this FTDManualNatRule.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def translated_destination_port(self):
        """Gets the translated_destination_port of this FTDManualNatRule.  # noqa: E501


        :return: The translated_destination_port of this FTDManualNatRule.  # noqa: E501
        :rtype: IProtocolPortObject
        """
        return self._translated_destination_port

    @translated_destination_port.setter
    def translated_destination_port(self, translated_destination_port):
        """Sets the translated_destination_port of this FTDManualNatRule.


        :param translated_destination_port: The translated_destination_port of this FTDManualNatRule.  # noqa: E501
        :type: IProtocolPortObject
        """

        self._translated_destination_port = translated_destination_port

    @property
    def fall_through(self):
        """Gets the fall_through of this FTDManualNatRule.  # noqa: E501


        :return: The fall_through of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._fall_through

    @fall_through.setter
    def fall_through(self, fall_through):
        """Sets the fall_through of this FTDManualNatRule.


        :param fall_through: The fall_through of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._fall_through = fall_through

    @property
    def nat_type(self):
        """Gets the nat_type of this FTDManualNatRule.  # noqa: E501


        :return: The nat_type of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._nat_type

    @nat_type.setter
    def nat_type(self, nat_type):
        """Sets the nat_type of this FTDManualNatRule.


        :param nat_type: The nat_type of this FTDManualNatRule.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nat_type is None:
            raise ValueError("Invalid value for `nat_type`, must not be `None`")  # noqa: E501
        allowed_values = ["STATIC", "DYNAMIC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                nat_type not in allowed_values):
            raise ValueError(
                "Invalid value for `nat_type` ({0}), must be one of {1}"  # noqa: E501
                .format(nat_type, allowed_values)
            )

        self._nat_type = nat_type

    @property
    def target_index(self):
        """Gets the target_index of this FTDManualNatRule.  # noqa: E501


        :return: The target_index of this FTDManualNatRule.  # noqa: E501
        :rtype: int
        """
        return self._target_index

    @target_index.setter
    def target_index(self, target_index):
        """Sets the target_index of this FTDManualNatRule.


        :param target_index: The target_index of this FTDManualNatRule.  # noqa: E501
        :type: int
        """

        self._target_index = target_index

    @property
    def translated_source_port(self):
        """Gets the translated_source_port of this FTDManualNatRule.  # noqa: E501


        :return: The translated_source_port of this FTDManualNatRule.  # noqa: E501
        :rtype: IProtocolPortObject
        """
        return self._translated_source_port

    @translated_source_port.setter
    def translated_source_port(self, translated_source_port):
        """Sets the translated_source_port of this FTDManualNatRule.


        :param translated_source_port: The translated_source_port of this FTDManualNatRule.  # noqa: E501
        :type: IProtocolPortObject
        """

        self._translated_source_port = translated_source_port

    @property
    def translated_destination(self):
        """Gets the translated_destination of this FTDManualNatRule.  # noqa: E501


        :return: The translated_destination of this FTDManualNatRule.  # noqa: E501
        :rtype: INetworkAddress
        """
        return self._translated_destination

    @translated_destination.setter
    def translated_destination(self, translated_destination):
        """Sets the translated_destination of this FTDManualNatRule.


        :param translated_destination: The translated_destination of this FTDManualNatRule.  # noqa: E501
        :type: INetworkAddress
        """

        self._translated_destination = translated_destination

    @property
    def description(self):
        """Gets the description of this FTDManualNatRule.  # noqa: E501


        :return: The description of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FTDManualNatRule.


        :param description: The description of this FTDManualNatRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def section(self):
        """Gets the section of this FTDManualNatRule.  # noqa: E501


        :return: The section of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this FTDManualNatRule.


        :param section: The section of this FTDManualNatRule.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def type(self):
        """Gets the type of this FTDManualNatRule.  # noqa: E501


        :return: The type of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FTDManualNatRule.


        :param type: The type of this FTDManualNatRule.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def enabled(self):
        """Gets the enabled of this FTDManualNatRule.  # noqa: E501


        :return: The enabled of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FTDManualNatRule.


        :param enabled: The enabled of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def original_source_port(self):
        """Gets the original_source_port of this FTDManualNatRule.  # noqa: E501


        :return: The original_source_port of this FTDManualNatRule.  # noqa: E501
        :rtype: IProtocolPortObject
        """
        return self._original_source_port

    @original_source_port.setter
    def original_source_port(self, original_source_port):
        """Sets the original_source_port of this FTDManualNatRule.


        :param original_source_port: The original_source_port of this FTDManualNatRule.  # noqa: E501
        :type: IProtocolPortObject
        """

        self._original_source_port = original_source_port

    @property
    def source_interface(self):
        """Gets the source_interface of this FTDManualNatRule.  # noqa: E501


        :return: The source_interface of this FTDManualNatRule.  # noqa: E501
        :rtype: IInterfaceObjectModel
        """
        return self._source_interface

    @source_interface.setter
    def source_interface(self, source_interface):
        """Sets the source_interface of this FTDManualNatRule.


        :param source_interface: The source_interface of this FTDManualNatRule.  # noqa: E501
        :type: IInterfaceObjectModel
        """

        self._source_interface = source_interface

    @property
    def interface_in_original_destination(self):
        """Gets the interface_in_original_destination of this FTDManualNatRule.  # noqa: E501


        :return: The interface_in_original_destination of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._interface_in_original_destination

    @interface_in_original_destination.setter
    def interface_in_original_destination(self, interface_in_original_destination):
        """Sets the interface_in_original_destination of this FTDManualNatRule.


        :param interface_in_original_destination: The interface_in_original_destination of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._interface_in_original_destination = interface_in_original_destination

    @property
    def net_to_net(self):
        """Gets the net_to_net of this FTDManualNatRule.  # noqa: E501


        :return: The net_to_net of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._net_to_net

    @net_to_net.setter
    def net_to_net(self, net_to_net):
        """Sets the net_to_net of this FTDManualNatRule.


        :param net_to_net: The net_to_net of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._net_to_net = net_to_net

    @property
    def links(self):
        """Gets the links of this FTDManualNatRule.  # noqa: E501


        :return: The links of this FTDManualNatRule.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FTDManualNatRule.


        :param links: The links of this FTDManualNatRule.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this FTDManualNatRule.  # noqa: E501


        :return: The id of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FTDManualNatRule.


        :param id: The id of this FTDManualNatRule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def original_source(self):
        """Gets the original_source of this FTDManualNatRule.  # noqa: E501


        :return: The original_source of this FTDManualNatRule.  # noqa: E501
        :rtype: INetworkAddress
        """
        return self._original_source

    @original_source.setter
    def original_source(self, original_source):
        """Sets the original_source of this FTDManualNatRule.


        :param original_source: The original_source of this FTDManualNatRule.  # noqa: E501
        :type: INetworkAddress
        """
        if self._configuration.client_side_validation and original_source is None:
            raise ValueError("Invalid value for `original_source`, must not be `None`")  # noqa: E501

        self._original_source = original_source

    @property
    def dns(self):
        """Gets the dns of this FTDManualNatRule.  # noqa: E501


        :return: The dns of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this FTDManualNatRule.


        :param dns: The dns of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._dns = dns

    @property
    def pat_options(self):
        """Gets the pat_options of this FTDManualNatRule.  # noqa: E501


        :return: The pat_options of this FTDManualNatRule.  # noqa: E501
        :rtype: IPatOptionsContainer
        """
        return self._pat_options

    @pat_options.setter
    def pat_options(self, pat_options):
        """Sets the pat_options of this FTDManualNatRule.


        :param pat_options: The pat_options of this FTDManualNatRule.  # noqa: E501
        :type: IPatOptionsContainer
        """

        self._pat_options = pat_options

    @property
    def version(self):
        """Gets the version of this FTDManualNatRule.  # noqa: E501


        :return: The version of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FTDManualNatRule.


        :param version: The version of this FTDManualNatRule.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def no_proxy_arp(self):
        """Gets the no_proxy_arp of this FTDManualNatRule.  # noqa: E501


        :return: The no_proxy_arp of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._no_proxy_arp

    @no_proxy_arp.setter
    def no_proxy_arp(self, no_proxy_arp):
        """Sets the no_proxy_arp of this FTDManualNatRule.


        :param no_proxy_arp: The no_proxy_arp of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._no_proxy_arp = no_proxy_arp

    @property
    def translated_source(self):
        """Gets the translated_source of this FTDManualNatRule.  # noqa: E501


        :return: The translated_source of this FTDManualNatRule.  # noqa: E501
        :rtype: INetworkAddress
        """
        return self._translated_source

    @translated_source.setter
    def translated_source(self, translated_source):
        """Sets the translated_source of this FTDManualNatRule.


        :param translated_source: The translated_source of this FTDManualNatRule.  # noqa: E501
        :type: INetworkAddress
        """

        self._translated_source = translated_source

    @property
    def interface_in_translated_source(self):
        """Gets the interface_in_translated_source of this FTDManualNatRule.  # noqa: E501


        :return: The interface_in_translated_source of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._interface_in_translated_source

    @interface_in_translated_source.setter
    def interface_in_translated_source(self, interface_in_translated_source):
        """Sets the interface_in_translated_source of this FTDManualNatRule.


        :param interface_in_translated_source: The interface_in_translated_source of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._interface_in_translated_source = interface_in_translated_source

    @property
    def route_lookup(self):
        """Gets the route_lookup of this FTDManualNatRule.  # noqa: E501


        :return: The route_lookup of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._route_lookup

    @route_lookup.setter
    def route_lookup(self, route_lookup):
        """Sets the route_lookup of this FTDManualNatRule.


        :param route_lookup: The route_lookup of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._route_lookup = route_lookup

    @property
    def original_destination(self):
        """Gets the original_destination of this FTDManualNatRule.  # noqa: E501


        :return: The original_destination of this FTDManualNatRule.  # noqa: E501
        :rtype: INetworkAddress
        """
        return self._original_destination

    @original_destination.setter
    def original_destination(self, original_destination):
        """Sets the original_destination of this FTDManualNatRule.


        :param original_destination: The original_destination of this FTDManualNatRule.  # noqa: E501
        :type: INetworkAddress
        """

        self._original_destination = original_destination

    @property
    def unidirectional(self):
        """Gets the unidirectional of this FTDManualNatRule.  # noqa: E501


        :return: The unidirectional of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._unidirectional

    @unidirectional.setter
    def unidirectional(self, unidirectional):
        """Sets the unidirectional of this FTDManualNatRule.


        :param unidirectional: The unidirectional of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._unidirectional = unidirectional

    @property
    def name(self):
        """Gets the name of this FTDManualNatRule.  # noqa: E501


        :return: The name of this FTDManualNatRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FTDManualNatRule.


        :param name: The name of this FTDManualNatRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def destination_interface(self):
        """Gets the destination_interface of this FTDManualNatRule.  # noqa: E501


        :return: The destination_interface of this FTDManualNatRule.  # noqa: E501
        :rtype: IInterfaceObjectModel
        """
        return self._destination_interface

    @destination_interface.setter
    def destination_interface(self, destination_interface):
        """Sets the destination_interface of this FTDManualNatRule.


        :param destination_interface: The destination_interface of this FTDManualNatRule.  # noqa: E501
        :type: IInterfaceObjectModel
        """

        self._destination_interface = destination_interface

    @property
    def original_destination_port(self):
        """Gets the original_destination_port of this FTDManualNatRule.  # noqa: E501


        :return: The original_destination_port of this FTDManualNatRule.  # noqa: E501
        :rtype: IProtocolPortObject
        """
        return self._original_destination_port

    @original_destination_port.setter
    def original_destination_port(self, original_destination_port):
        """Sets the original_destination_port of this FTDManualNatRule.


        :param original_destination_port: The original_destination_port of this FTDManualNatRule.  # noqa: E501
        :type: IProtocolPortObject
        """

        self._original_destination_port = original_destination_port

    @property
    def interface_ipv6(self):
        """Gets the interface_ipv6 of this FTDManualNatRule.  # noqa: E501


        :return: The interface_ipv6 of this FTDManualNatRule.  # noqa: E501
        :rtype: bool
        """
        return self._interface_ipv6

    @interface_ipv6.setter
    def interface_ipv6(self, interface_ipv6):
        """Sets the interface_ipv6 of this FTDManualNatRule.


        :param interface_ipv6: The interface_ipv6 of this FTDManualNatRule.  # noqa: E501
        :type: bool
        """

        self._interface_ipv6 = interface_ipv6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FTDManualNatRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FTDManualNatRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FTDManualNatRule):
            return True

        return self.to_dict() != other.to_dict()
