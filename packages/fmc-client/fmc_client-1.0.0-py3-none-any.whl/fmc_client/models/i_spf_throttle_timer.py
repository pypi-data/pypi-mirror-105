# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class ISpfThrottleTimer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minimum_hold_time': 'int',
        'maximum_wait_time': 'int',
        'initial_delay': 'int'
    }

    attribute_map = {
        'minimum_hold_time': 'minimumHoldTime',
        'maximum_wait_time': 'maximumWaitTime',
        'initial_delay': 'initialDelay'
    }

    def __init__(self, minimum_hold_time=None, maximum_wait_time=None, initial_delay=None, _configuration=None):  # noqa: E501
        """ISpfThrottleTimer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._minimum_hold_time = None
        self._maximum_wait_time = None
        self._initial_delay = None
        self.discriminator = None

        if minimum_hold_time is not None:
            self.minimum_hold_time = minimum_hold_time
        if maximum_wait_time is not None:
            self.maximum_wait_time = maximum_wait_time
        if initial_delay is not None:
            self.initial_delay = initial_delay

    @property
    def minimum_hold_time(self):
        """Gets the minimum_hold_time of this ISpfThrottleTimer.  # noqa: E501


        :return: The minimum_hold_time of this ISpfThrottleTimer.  # noqa: E501
        :rtype: int
        """
        return self._minimum_hold_time

    @minimum_hold_time.setter
    def minimum_hold_time(self, minimum_hold_time):
        """Sets the minimum_hold_time of this ISpfThrottleTimer.


        :param minimum_hold_time: The minimum_hold_time of this ISpfThrottleTimer.  # noqa: E501
        :type: int
        """

        self._minimum_hold_time = minimum_hold_time

    @property
    def maximum_wait_time(self):
        """Gets the maximum_wait_time of this ISpfThrottleTimer.  # noqa: E501


        :return: The maximum_wait_time of this ISpfThrottleTimer.  # noqa: E501
        :rtype: int
        """
        return self._maximum_wait_time

    @maximum_wait_time.setter
    def maximum_wait_time(self, maximum_wait_time):
        """Sets the maximum_wait_time of this ISpfThrottleTimer.


        :param maximum_wait_time: The maximum_wait_time of this ISpfThrottleTimer.  # noqa: E501
        :type: int
        """

        self._maximum_wait_time = maximum_wait_time

    @property
    def initial_delay(self):
        """Gets the initial_delay of this ISpfThrottleTimer.  # noqa: E501


        :return: The initial_delay of this ISpfThrottleTimer.  # noqa: E501
        :rtype: int
        """
        return self._initial_delay

    @initial_delay.setter
    def initial_delay(self, initial_delay):
        """Sets the initial_delay of this ISpfThrottleTimer.


        :param initial_delay: The initial_delay of this ISpfThrottleTimer.  # noqa: E501
        :type: int
        """

        self._initial_delay = initial_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ISpfThrottleTimer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ISpfThrottleTimer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ISpfThrottleTimer):
            return True

        return self.to_dict() != other.to_dict()
