# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IPPPoEContianer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pppoe_password': 'str',
        'pppoe_route_metric': 'int',
        'ip_address': 'str',
        'ppp_auth': 'str',
        'vpdn_group_name': 'str',
        'enable_route_settings': 'bool',
        'store_creds_in_flash': 'bool',
        'pppoe_user': 'str'
    }

    attribute_map = {
        'pppoe_password': 'pppoePassword',
        'pppoe_route_metric': 'pppoeRouteMetric',
        'ip_address': 'ipAddress',
        'ppp_auth': 'pppAuth',
        'vpdn_group_name': 'vpdnGroupName',
        'enable_route_settings': 'enableRouteSettings',
        'store_creds_in_flash': 'storeCredsInFlash',
        'pppoe_user': 'pppoeUser'
    }

    def __init__(self, pppoe_password=None, pppoe_route_metric=None, ip_address=None, ppp_auth=None, vpdn_group_name=None, enable_route_settings=None, store_creds_in_flash=None, pppoe_user=None, _configuration=None):  # noqa: E501
        """IPPPoEContianer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pppoe_password = None
        self._pppoe_route_metric = None
        self._ip_address = None
        self._ppp_auth = None
        self._vpdn_group_name = None
        self._enable_route_settings = None
        self._store_creds_in_flash = None
        self._pppoe_user = None
        self.discriminator = None

        if pppoe_password is not None:
            self.pppoe_password = pppoe_password
        if pppoe_route_metric is not None:
            self.pppoe_route_metric = pppoe_route_metric
        if ip_address is not None:
            self.ip_address = ip_address
        if ppp_auth is not None:
            self.ppp_auth = ppp_auth
        if vpdn_group_name is not None:
            self.vpdn_group_name = vpdn_group_name
        if enable_route_settings is not None:
            self.enable_route_settings = enable_route_settings
        if store_creds_in_flash is not None:
            self.store_creds_in_flash = store_creds_in_flash
        if pppoe_user is not None:
            self.pppoe_user = pppoe_user

    @property
    def pppoe_password(self):
        """Gets the pppoe_password of this IPPPoEContianer.  # noqa: E501


        :return: The pppoe_password of this IPPPoEContianer.  # noqa: E501
        :rtype: str
        """
        return self._pppoe_password

    @pppoe_password.setter
    def pppoe_password(self, pppoe_password):
        """Sets the pppoe_password of this IPPPoEContianer.


        :param pppoe_password: The pppoe_password of this IPPPoEContianer.  # noqa: E501
        :type: str
        """

        self._pppoe_password = pppoe_password

    @property
    def pppoe_route_metric(self):
        """Gets the pppoe_route_metric of this IPPPoEContianer.  # noqa: E501


        :return: The pppoe_route_metric of this IPPPoEContianer.  # noqa: E501
        :rtype: int
        """
        return self._pppoe_route_metric

    @pppoe_route_metric.setter
    def pppoe_route_metric(self, pppoe_route_metric):
        """Sets the pppoe_route_metric of this IPPPoEContianer.


        :param pppoe_route_metric: The pppoe_route_metric of this IPPPoEContianer.  # noqa: E501
        :type: int
        """

        self._pppoe_route_metric = pppoe_route_metric

    @property
    def ip_address(self):
        """Gets the ip_address of this IPPPoEContianer.  # noqa: E501


        :return: The ip_address of this IPPPoEContianer.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this IPPPoEContianer.


        :param ip_address: The ip_address of this IPPPoEContianer.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ppp_auth(self):
        """Gets the ppp_auth of this IPPPoEContianer.  # noqa: E501


        :return: The ppp_auth of this IPPPoEContianer.  # noqa: E501
        :rtype: str
        """
        return self._ppp_auth

    @ppp_auth.setter
    def ppp_auth(self, ppp_auth):
        """Sets the ppp_auth of this IPPPoEContianer.


        :param ppp_auth: The ppp_auth of this IPPPoEContianer.  # noqa: E501
        :type: str
        """
        allowed_values = ["PAP", "CHAP", "MSCHAP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ppp_auth not in allowed_values):
            raise ValueError(
                "Invalid value for `ppp_auth` ({0}), must be one of {1}"  # noqa: E501
                .format(ppp_auth, allowed_values)
            )

        self._ppp_auth = ppp_auth

    @property
    def vpdn_group_name(self):
        """Gets the vpdn_group_name of this IPPPoEContianer.  # noqa: E501


        :return: The vpdn_group_name of this IPPPoEContianer.  # noqa: E501
        :rtype: str
        """
        return self._vpdn_group_name

    @vpdn_group_name.setter
    def vpdn_group_name(self, vpdn_group_name):
        """Sets the vpdn_group_name of this IPPPoEContianer.


        :param vpdn_group_name: The vpdn_group_name of this IPPPoEContianer.  # noqa: E501
        :type: str
        """

        self._vpdn_group_name = vpdn_group_name

    @property
    def enable_route_settings(self):
        """Gets the enable_route_settings of this IPPPoEContianer.  # noqa: E501


        :return: The enable_route_settings of this IPPPoEContianer.  # noqa: E501
        :rtype: bool
        """
        return self._enable_route_settings

    @enable_route_settings.setter
    def enable_route_settings(self, enable_route_settings):
        """Sets the enable_route_settings of this IPPPoEContianer.


        :param enable_route_settings: The enable_route_settings of this IPPPoEContianer.  # noqa: E501
        :type: bool
        """

        self._enable_route_settings = enable_route_settings

    @property
    def store_creds_in_flash(self):
        """Gets the store_creds_in_flash of this IPPPoEContianer.  # noqa: E501


        :return: The store_creds_in_flash of this IPPPoEContianer.  # noqa: E501
        :rtype: bool
        """
        return self._store_creds_in_flash

    @store_creds_in_flash.setter
    def store_creds_in_flash(self, store_creds_in_flash):
        """Sets the store_creds_in_flash of this IPPPoEContianer.


        :param store_creds_in_flash: The store_creds_in_flash of this IPPPoEContianer.  # noqa: E501
        :type: bool
        """

        self._store_creds_in_flash = store_creds_in_flash

    @property
    def pppoe_user(self):
        """Gets the pppoe_user of this IPPPoEContianer.  # noqa: E501


        :return: The pppoe_user of this IPPPoEContianer.  # noqa: E501
        :rtype: str
        """
        return self._pppoe_user

    @pppoe_user.setter
    def pppoe_user(self, pppoe_user):
        """Sets the pppoe_user of this IPPPoEContianer.


        :param pppoe_user: The pppoe_user of this IPPPoEContianer.  # noqa: E501
        :type: str
        """

        self._pppoe_user = pppoe_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPPPoEContianer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPPPoEContianer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPPPoEContianer):
            return True

        return self.to_dict() != other.to_dict()
