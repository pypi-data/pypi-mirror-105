# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfv3Neighbor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configurations': 'list[IOspfv3NeighborConfiguration]',
        'device_interface': 'IFTDInterface'
    }

    attribute_map = {
        'configurations': 'configurations',
        'device_interface': 'deviceInterface'
    }

    def __init__(self, configurations=None, device_interface=None, _configuration=None):  # noqa: E501
        """IOspfv3Neighbor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._configurations = None
        self._device_interface = None
        self.discriminator = None

        self.configurations = configurations
        self.device_interface = device_interface

    @property
    def configurations(self):
        """Gets the configurations of this IOspfv3Neighbor.  # noqa: E501


        :return: The configurations of this IOspfv3Neighbor.  # noqa: E501
        :rtype: list[IOspfv3NeighborConfiguration]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this IOspfv3Neighbor.


        :param configurations: The configurations of this IOspfv3Neighbor.  # noqa: E501
        :type: list[IOspfv3NeighborConfiguration]
        """
        if self._configuration.client_side_validation and configurations is None:
            raise ValueError("Invalid value for `configurations`, must not be `None`")  # noqa: E501

        self._configurations = configurations

    @property
    def device_interface(self):
        """Gets the device_interface of this IOspfv3Neighbor.  # noqa: E501


        :return: The device_interface of this IOspfv3Neighbor.  # noqa: E501
        :rtype: IFTDInterface
        """
        return self._device_interface

    @device_interface.setter
    def device_interface(self, device_interface):
        """Sets the device_interface of this IOspfv3Neighbor.


        :param device_interface: The device_interface of this IOspfv3Neighbor.  # noqa: E501
        :type: IFTDInterface
        """
        if self._configuration.client_side_validation and device_interface is None:
            raise ValueError("Invalid value for `device_interface`, must not be `None`")  # noqa: E501

        self._device_interface = device_interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfv3Neighbor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfv3Neighbor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfv3Neighbor):
            return True

        return self.to_dict() != other.to_dict()
