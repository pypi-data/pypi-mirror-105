# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class AuditModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_id': 'str',
        'metadata': 'Metadata',
        'snapshot_id': 'str',
        'sub_system': 'str',
        'description': 'str',
        'source': 'str',
        'type': 'str',
        'message': 'str',
        'version': 'str',
        'domain': 'str',
        'name': 'str',
        'start_time': 'str',
        'links': 'ILinks',
        'end_time': 'str',
        'id': 'str',
        'time': 'int',
        'username': 'str'
    }

    attribute_map = {
        'audit_id': 'auditId',
        'metadata': 'metadata',
        'snapshot_id': 'snapshotId',
        'sub_system': 'subSystem',
        'description': 'description',
        'source': 'source',
        'type': 'type',
        'message': 'message',
        'version': 'version',
        'domain': 'domain',
        'name': 'name',
        'start_time': 'startTime',
        'links': 'links',
        'end_time': 'endTime',
        'id': 'id',
        'time': 'time',
        'username': 'username'
    }

    def __init__(self, audit_id=None, metadata=None, snapshot_id=None, sub_system=None, description=None, source=None, type=None, message=None, version=None, domain=None, name=None, start_time=None, links=None, end_time=None, id=None, time=None, username=None, _configuration=None):  # noqa: E501
        """AuditModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audit_id = None
        self._metadata = None
        self._snapshot_id = None
        self._sub_system = None
        self._description = None
        self._source = None
        self._type = None
        self._message = None
        self._version = None
        self._domain = None
        self._name = None
        self._start_time = None
        self._links = None
        self._end_time = None
        self._id = None
        self._time = None
        self._username = None
        self.discriminator = None

        if audit_id is not None:
            self.audit_id = audit_id
        if metadata is not None:
            self.metadata = metadata
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if sub_system is not None:
            self.sub_system = sub_system
        if description is not None:
            self.description = description
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type
        if message is not None:
            self.message = message
        if version is not None:
            self.version = version
        if domain is not None:
            self.domain = domain
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time
        if links is not None:
            self.links = links
        if end_time is not None:
            self.end_time = end_time
        if id is not None:
            self.id = id
        if time is not None:
            self.time = time
        if username is not None:
            self.username = username

    @property
    def audit_id(self):
        """Gets the audit_id of this AuditModel.  # noqa: E501


        :return: The audit_id of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._audit_id

    @audit_id.setter
    def audit_id(self, audit_id):
        """Sets the audit_id of this AuditModel.


        :param audit_id: The audit_id of this AuditModel.  # noqa: E501
        :type: str
        """

        self._audit_id = audit_id

    @property
    def metadata(self):
        """Gets the metadata of this AuditModel.  # noqa: E501


        :return: The metadata of this AuditModel.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AuditModel.


        :param metadata: The metadata of this AuditModel.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this AuditModel.  # noqa: E501


        :return: The snapshot_id of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this AuditModel.


        :param snapshot_id: The snapshot_id of this AuditModel.  # noqa: E501
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def sub_system(self):
        """Gets the sub_system of this AuditModel.  # noqa: E501


        :return: The sub_system of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._sub_system

    @sub_system.setter
    def sub_system(self, sub_system):
        """Sets the sub_system of this AuditModel.


        :param sub_system: The sub_system of this AuditModel.  # noqa: E501
        :type: str
        """

        self._sub_system = sub_system

    @property
    def description(self):
        """Gets the description of this AuditModel.  # noqa: E501


        :return: The description of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuditModel.


        :param description: The description of this AuditModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def source(self):
        """Gets the source of this AuditModel.  # noqa: E501


        :return: The source of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AuditModel.


        :param source: The source of this AuditModel.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this AuditModel.  # noqa: E501


        :return: The type of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuditModel.


        :param type: The type of this AuditModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def message(self):
        """Gets the message of this AuditModel.  # noqa: E501


        :return: The message of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditModel.


        :param message: The message of this AuditModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def version(self):
        """Gets the version of this AuditModel.  # noqa: E501


        :return: The version of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AuditModel.


        :param version: The version of this AuditModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def domain(self):
        """Gets the domain of this AuditModel.  # noqa: E501


        :return: The domain of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AuditModel.


        :param domain: The domain of this AuditModel.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def name(self):
        """Gets the name of this AuditModel.  # noqa: E501


        :return: The name of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuditModel.


        :param name: The name of this AuditModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this AuditModel.  # noqa: E501


        :return: The start_time of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AuditModel.


        :param start_time: The start_time of this AuditModel.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def links(self):
        """Gets the links of this AuditModel.  # noqa: E501


        :return: The links of this AuditModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AuditModel.


        :param links: The links of this AuditModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def end_time(self):
        """Gets the end_time of this AuditModel.  # noqa: E501


        :return: The end_time of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AuditModel.


        :param end_time: The end_time of this AuditModel.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this AuditModel.  # noqa: E501


        :return: The id of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditModel.


        :param id: The id of this AuditModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this AuditModel.  # noqa: E501


        :return: The time of this AuditModel.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AuditModel.


        :param time: The time of this AuditModel.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def username(self):
        """Gets the username of this AuditModel.  # noqa: E501


        :return: The username of this AuditModel.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuditModel.


        :param username: The username of this AuditModel.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditModel):
            return True

        return self.to_dict() != other.to_dict()
