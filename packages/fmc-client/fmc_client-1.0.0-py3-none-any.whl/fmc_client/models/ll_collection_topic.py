# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class LLCollectionTopic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'poll_interval_in_minutes': 'int',
        'name': 'str',
        'content_bindings': 'str',
        'description': 'str',
        'sub_type': 'str',
        'type': 'str',
        'message_binding': 'str',
        'protocol_binding': 'str',
        'hash_map': 'LLHashMap'
    }

    attribute_map = {
        'address': 'address',
        'poll_interval_in_minutes': 'pollIntervalInMinutes',
        'name': 'name',
        'content_bindings': 'contentBindings',
        'description': 'description',
        'sub_type': 'subType',
        'type': 'type',
        'message_binding': 'messageBinding',
        'protocol_binding': 'protocolBinding',
        'hash_map': 'hashMap'
    }

    def __init__(self, address=None, poll_interval_in_minutes=None, name=None, content_bindings=None, description=None, sub_type=None, type=None, message_binding=None, protocol_binding=None, hash_map=None, _configuration=None):  # noqa: E501
        """LLCollectionTopic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._poll_interval_in_minutes = None
        self._name = None
        self._content_bindings = None
        self._description = None
        self._sub_type = None
        self._type = None
        self._message_binding = None
        self._protocol_binding = None
        self._hash_map = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if poll_interval_in_minutes is not None:
            self.poll_interval_in_minutes = poll_interval_in_minutes
        if name is not None:
            self.name = name
        if content_bindings is not None:
            self.content_bindings = content_bindings
        if description is not None:
            self.description = description
        if sub_type is not None:
            self.sub_type = sub_type
        if type is not None:
            self.type = type
        if message_binding is not None:
            self.message_binding = message_binding
        if protocol_binding is not None:
            self.protocol_binding = protocol_binding
        if hash_map is not None:
            self.hash_map = hash_map

    @property
    def address(self):
        """Gets the address of this LLCollectionTopic.  # noqa: E501


        :return: The address of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LLCollectionTopic.


        :param address: The address of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def poll_interval_in_minutes(self):
        """Gets the poll_interval_in_minutes of this LLCollectionTopic.  # noqa: E501


        :return: The poll_interval_in_minutes of this LLCollectionTopic.  # noqa: E501
        :rtype: int
        """
        return self._poll_interval_in_minutes

    @poll_interval_in_minutes.setter
    def poll_interval_in_minutes(self, poll_interval_in_minutes):
        """Sets the poll_interval_in_minutes of this LLCollectionTopic.


        :param poll_interval_in_minutes: The poll_interval_in_minutes of this LLCollectionTopic.  # noqa: E501
        :type: int
        """

        self._poll_interval_in_minutes = poll_interval_in_minutes

    @property
    def name(self):
        """Gets the name of this LLCollectionTopic.  # noqa: E501


        :return: The name of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LLCollectionTopic.


        :param name: The name of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def content_bindings(self):
        """Gets the content_bindings of this LLCollectionTopic.  # noqa: E501


        :return: The content_bindings of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._content_bindings

    @content_bindings.setter
    def content_bindings(self, content_bindings):
        """Sets the content_bindings of this LLCollectionTopic.


        :param content_bindings: The content_bindings of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._content_bindings = content_bindings

    @property
    def description(self):
        """Gets the description of this LLCollectionTopic.  # noqa: E501


        :return: The description of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LLCollectionTopic.


        :param description: The description of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sub_type(self):
        """Gets the sub_type of this LLCollectionTopic.  # noqa: E501


        :return: The sub_type of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this LLCollectionTopic.


        :param sub_type: The sub_type of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def type(self):
        """Gets the type of this LLCollectionTopic.  # noqa: E501


        :return: The type of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LLCollectionTopic.


        :param type: The type of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def message_binding(self):
        """Gets the message_binding of this LLCollectionTopic.  # noqa: E501


        :return: The message_binding of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._message_binding

    @message_binding.setter
    def message_binding(self, message_binding):
        """Sets the message_binding of this LLCollectionTopic.


        :param message_binding: The message_binding of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._message_binding = message_binding

    @property
    def protocol_binding(self):
        """Gets the protocol_binding of this LLCollectionTopic.  # noqa: E501


        :return: The protocol_binding of this LLCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._protocol_binding

    @protocol_binding.setter
    def protocol_binding(self, protocol_binding):
        """Sets the protocol_binding of this LLCollectionTopic.


        :param protocol_binding: The protocol_binding of this LLCollectionTopic.  # noqa: E501
        :type: str
        """

        self._protocol_binding = protocol_binding

    @property
    def hash_map(self):
        """Gets the hash_map of this LLCollectionTopic.  # noqa: E501


        :return: The hash_map of this LLCollectionTopic.  # noqa: E501
        :rtype: LLHashMap
        """
        return self._hash_map

    @hash_map.setter
    def hash_map(self, hash_map):
        """Sets the hash_map of this LLCollectionTopic.


        :param hash_map: The hash_map of this LLCollectionTopic.  # noqa: E501
        :type: LLHashMap
        """

        self._hash_map = hash_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LLCollectionTopic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LLCollectionTopic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LLCollectionTopic):
            return True

        return self.to_dict() != other.to_dict()
