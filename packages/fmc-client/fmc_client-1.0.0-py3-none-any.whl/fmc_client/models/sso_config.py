# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class SSOConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'sso_provider': 'str',
        'sso_url': 'str',
        'description': 'str',
        'type': 'str',
        'version': 'str',
        'enabled': 'bool',
        'root_url': 'str',
        'sso_cert': 'str',
        'advanced_config': 'ISSOAdvancedConfig',
        'name': 'str',
        'links': 'ILinks',
        'id': 'str',
        'sso_issuer': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'sso_provider': 'ssoProvider',
        'sso_url': 'ssoUrl',
        'description': 'description',
        'type': 'type',
        'version': 'version',
        'enabled': 'enabled',
        'root_url': 'rootUrl',
        'sso_cert': 'ssoCert',
        'advanced_config': 'advancedConfig',
        'name': 'name',
        'links': 'links',
        'id': 'id',
        'sso_issuer': 'ssoIssuer'
    }

    def __init__(self, metadata=None, sso_provider=None, sso_url=None, description=None, type=None, version=None, enabled=None, root_url=None, sso_cert=None, advanced_config=None, name=None, links=None, id=None, sso_issuer=None, _configuration=None):  # noqa: E501
        """SSOConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._sso_provider = None
        self._sso_url = None
        self._description = None
        self._type = None
        self._version = None
        self._enabled = None
        self._root_url = None
        self._sso_cert = None
        self._advanced_config = None
        self._name = None
        self._links = None
        self._id = None
        self._sso_issuer = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if sso_provider is not None:
            self.sso_provider = sso_provider
        if sso_url is not None:
            self.sso_url = sso_url
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if enabled is not None:
            self.enabled = enabled
        if root_url is not None:
            self.root_url = root_url
        if sso_cert is not None:
            self.sso_cert = sso_cert
        if advanced_config is not None:
            self.advanced_config = advanced_config
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if sso_issuer is not None:
            self.sso_issuer = sso_issuer

    @property
    def metadata(self):
        """Gets the metadata of this SSOConfig.  # noqa: E501


        :return: The metadata of this SSOConfig.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SSOConfig.


        :param metadata: The metadata of this SSOConfig.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def sso_provider(self):
        """Gets the sso_provider of this SSOConfig.  # noqa: E501


        :return: The sso_provider of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._sso_provider

    @sso_provider.setter
    def sso_provider(self, sso_provider):
        """Sets the sso_provider of this SSOConfig.


        :param sso_provider: The sso_provider of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._sso_provider = sso_provider

    @property
    def sso_url(self):
        """Gets the sso_url of this SSOConfig.  # noqa: E501


        :return: The sso_url of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this SSOConfig.


        :param sso_url: The sso_url of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._sso_url = sso_url

    @property
    def description(self):
        """Gets the description of this SSOConfig.  # noqa: E501


        :return: The description of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SSOConfig.


        :param description: The description of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this SSOConfig.  # noqa: E501


        :return: The type of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SSOConfig.


        :param type: The type of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this SSOConfig.  # noqa: E501


        :return: The version of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SSOConfig.


        :param version: The version of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def enabled(self):
        """Gets the enabled of this SSOConfig.  # noqa: E501


        :return: The enabled of this SSOConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SSOConfig.


        :param enabled: The enabled of this SSOConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def root_url(self):
        """Gets the root_url of this SSOConfig.  # noqa: E501


        :return: The root_url of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """Sets the root_url of this SSOConfig.


        :param root_url: The root_url of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._root_url = root_url

    @property
    def sso_cert(self):
        """Gets the sso_cert of this SSOConfig.  # noqa: E501


        :return: The sso_cert of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._sso_cert

    @sso_cert.setter
    def sso_cert(self, sso_cert):
        """Sets the sso_cert of this SSOConfig.


        :param sso_cert: The sso_cert of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._sso_cert = sso_cert

    @property
    def advanced_config(self):
        """Gets the advanced_config of this SSOConfig.  # noqa: E501


        :return: The advanced_config of this SSOConfig.  # noqa: E501
        :rtype: ISSOAdvancedConfig
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this SSOConfig.


        :param advanced_config: The advanced_config of this SSOConfig.  # noqa: E501
        :type: ISSOAdvancedConfig
        """

        self._advanced_config = advanced_config

    @property
    def name(self):
        """Gets the name of this SSOConfig.  # noqa: E501


        :return: The name of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SSOConfig.


        :param name: The name of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this SSOConfig.  # noqa: E501


        :return: The links of this SSOConfig.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SSOConfig.


        :param links: The links of this SSOConfig.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this SSOConfig.  # noqa: E501


        :return: The id of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SSOConfig.


        :param id: The id of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sso_issuer(self):
        """Gets the sso_issuer of this SSOConfig.  # noqa: E501


        :return: The sso_issuer of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._sso_issuer

    @sso_issuer.setter
    def sso_issuer(self, sso_issuer):
        """Sets the sso_issuer of this SSOConfig.


        :param sso_issuer: The sso_issuer of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._sso_issuer = sso_issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSOConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSOConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SSOConfig):
            return True

        return self.to_dict() != other.to_dict()
