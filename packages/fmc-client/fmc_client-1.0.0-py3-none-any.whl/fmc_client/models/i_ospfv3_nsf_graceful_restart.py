# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfv3NsfGracefulRestart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'graceful_restart': 'IOspfv3GracefulRestart',
        'graceful_restart_helper': 'IOspfv3GracefulRestartHelper'
    }

    attribute_map = {
        'graceful_restart': 'gracefulRestart',
        'graceful_restart_helper': 'gracefulRestartHelper'
    }

    def __init__(self, graceful_restart=None, graceful_restart_helper=None, _configuration=None):  # noqa: E501
        """IOspfv3NsfGracefulRestart - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._graceful_restart = None
        self._graceful_restart_helper = None
        self.discriminator = None

        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        if graceful_restart_helper is not None:
            self.graceful_restart_helper = graceful_restart_helper

    @property
    def graceful_restart(self):
        """Gets the graceful_restart of this IOspfv3NsfGracefulRestart.  # noqa: E501


        :return: The graceful_restart of this IOspfv3NsfGracefulRestart.  # noqa: E501
        :rtype: IOspfv3GracefulRestart
        """
        return self._graceful_restart

    @graceful_restart.setter
    def graceful_restart(self, graceful_restart):
        """Sets the graceful_restart of this IOspfv3NsfGracefulRestart.


        :param graceful_restart: The graceful_restart of this IOspfv3NsfGracefulRestart.  # noqa: E501
        :type: IOspfv3GracefulRestart
        """

        self._graceful_restart = graceful_restart

    @property
    def graceful_restart_helper(self):
        """Gets the graceful_restart_helper of this IOspfv3NsfGracefulRestart.  # noqa: E501


        :return: The graceful_restart_helper of this IOspfv3NsfGracefulRestart.  # noqa: E501
        :rtype: IOspfv3GracefulRestartHelper
        """
        return self._graceful_restart_helper

    @graceful_restart_helper.setter
    def graceful_restart_helper(self, graceful_restart_helper):
        """Sets the graceful_restart_helper of this IOspfv3NsfGracefulRestart.


        :param graceful_restart_helper: The graceful_restart_helper of this IOspfv3NsfGracefulRestart.  # noqa: E501
        :type: IOspfv3GracefulRestartHelper
        """

        self._graceful_restart_helper = graceful_restart_helper

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfv3NsfGracefulRestart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfv3NsfGracefulRestart):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfv3NsfGracefulRestart):
            return True

        return self.to_dict() != other.to_dict()
