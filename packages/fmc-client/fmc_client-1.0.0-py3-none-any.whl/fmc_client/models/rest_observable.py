# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class RESTObservable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'description': 'str',
        'observable_type': 'str',
        'type': 'str',
        'version': 'str',
        'indicator_count': 'int',
        'effective_property': 'RESTFeedProperty',
        'observable': 'LLObservable',
        'name': 'str',
        'links': 'ILinks',
        'id': 'str',
        'value': 'str',
        'inherited_property': 'RESTFeedProperty',
        'custom_property': 'RESTFeedProperty',
        'updated_at': 'int'
    }

    attribute_map = {
        'metadata': 'metadata',
        'description': 'description',
        'observable_type': 'observableType',
        'type': 'type',
        'version': 'version',
        'indicator_count': 'indicatorCount',
        'effective_property': 'effectiveProperty',
        'observable': 'observable',
        'name': 'name',
        'links': 'links',
        'id': 'id',
        'value': 'value',
        'inherited_property': 'inheritedProperty',
        'custom_property': 'customProperty',
        'updated_at': 'updatedAt'
    }

    def __init__(self, metadata=None, description=None, observable_type=None, type=None, version=None, indicator_count=None, effective_property=None, observable=None, name=None, links=None, id=None, value=None, inherited_property=None, custom_property=None, updated_at=None, _configuration=None):  # noqa: E501
        """RESTObservable - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._description = None
        self._observable_type = None
        self._type = None
        self._version = None
        self._indicator_count = None
        self._effective_property = None
        self._observable = None
        self._name = None
        self._links = None
        self._id = None
        self._value = None
        self._inherited_property = None
        self._custom_property = None
        self._updated_at = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if description is not None:
            self.description = description
        if observable_type is not None:
            self.observable_type = observable_type
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if indicator_count is not None:
            self.indicator_count = indicator_count
        if effective_property is not None:
            self.effective_property = effective_property
        if observable is not None:
            self.observable = observable
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if inherited_property is not None:
            self.inherited_property = inherited_property
        if custom_property is not None:
            self.custom_property = custom_property
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def metadata(self):
        """Gets the metadata of this RESTObservable.  # noqa: E501


        :return: The metadata of this RESTObservable.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RESTObservable.


        :param metadata: The metadata of this RESTObservable.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def description(self):
        """Gets the description of this RESTObservable.  # noqa: E501


        :return: The description of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RESTObservable.


        :param description: The description of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def observable_type(self):
        """Gets the observable_type of this RESTObservable.  # noqa: E501


        :return: The observable_type of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._observable_type

    @observable_type.setter
    def observable_type(self, observable_type):
        """Sets the observable_type of this RESTObservable.


        :param observable_type: The observable_type of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._observable_type = observable_type

    @property
    def type(self):
        """Gets the type of this RESTObservable.  # noqa: E501


        :return: The type of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RESTObservable.


        :param type: The type of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this RESTObservable.  # noqa: E501


        :return: The version of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RESTObservable.


        :param version: The version of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def indicator_count(self):
        """Gets the indicator_count of this RESTObservable.  # noqa: E501


        :return: The indicator_count of this RESTObservable.  # noqa: E501
        :rtype: int
        """
        return self._indicator_count

    @indicator_count.setter
    def indicator_count(self, indicator_count):
        """Sets the indicator_count of this RESTObservable.


        :param indicator_count: The indicator_count of this RESTObservable.  # noqa: E501
        :type: int
        """

        self._indicator_count = indicator_count

    @property
    def effective_property(self):
        """Gets the effective_property of this RESTObservable.  # noqa: E501


        :return: The effective_property of this RESTObservable.  # noqa: E501
        :rtype: RESTFeedProperty
        """
        return self._effective_property

    @effective_property.setter
    def effective_property(self, effective_property):
        """Sets the effective_property of this RESTObservable.


        :param effective_property: The effective_property of this RESTObservable.  # noqa: E501
        :type: RESTFeedProperty
        """

        self._effective_property = effective_property

    @property
    def observable(self):
        """Gets the observable of this RESTObservable.  # noqa: E501


        :return: The observable of this RESTObservable.  # noqa: E501
        :rtype: LLObservable
        """
        return self._observable

    @observable.setter
    def observable(self, observable):
        """Sets the observable of this RESTObservable.


        :param observable: The observable of this RESTObservable.  # noqa: E501
        :type: LLObservable
        """

        self._observable = observable

    @property
    def name(self):
        """Gets the name of this RESTObservable.  # noqa: E501


        :return: The name of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RESTObservable.


        :param name: The name of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this RESTObservable.  # noqa: E501


        :return: The links of this RESTObservable.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RESTObservable.


        :param links: The links of this RESTObservable.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this RESTObservable.  # noqa: E501


        :return: The id of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RESTObservable.


        :param id: The id of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this RESTObservable.  # noqa: E501


        :return: The value of this RESTObservable.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RESTObservable.


        :param value: The value of this RESTObservable.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def inherited_property(self):
        """Gets the inherited_property of this RESTObservable.  # noqa: E501


        :return: The inherited_property of this RESTObservable.  # noqa: E501
        :rtype: RESTFeedProperty
        """
        return self._inherited_property

    @inherited_property.setter
    def inherited_property(self, inherited_property):
        """Sets the inherited_property of this RESTObservable.


        :param inherited_property: The inherited_property of this RESTObservable.  # noqa: E501
        :type: RESTFeedProperty
        """

        self._inherited_property = inherited_property

    @property
    def custom_property(self):
        """Gets the custom_property of this RESTObservable.  # noqa: E501


        :return: The custom_property of this RESTObservable.  # noqa: E501
        :rtype: RESTFeedProperty
        """
        return self._custom_property

    @custom_property.setter
    def custom_property(self, custom_property):
        """Sets the custom_property of this RESTObservable.


        :param custom_property: The custom_property of this RESTObservable.  # noqa: E501
        :type: RESTFeedProperty
        """

        self._custom_property = custom_property

    @property
    def updated_at(self):
        """Gets the updated_at of this RESTObservable.  # noqa: E501


        :return: The updated_at of this RESTObservable.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RESTObservable.


        :param updated_at: The updated_at of this RESTObservable.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RESTObservable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RESTObservable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RESTObservable):
            return True

        return self.to_dict() != other.to_dict()
