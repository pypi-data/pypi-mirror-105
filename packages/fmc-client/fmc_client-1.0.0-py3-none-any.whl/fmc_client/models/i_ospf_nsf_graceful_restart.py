# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfNsfGracefulRestart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nsf_enable': 'bool',
        'nsf_mechanism': 'str',
        'nsf_restart_intraval': 'int',
        'nsf_helper': 'bool',
        'nsf_capability': 'bool',
        'nsf_enforce_global': 'bool'
    }

    attribute_map = {
        'nsf_enable': 'nsfEnable',
        'nsf_mechanism': 'nsfMechanism',
        'nsf_restart_intraval': 'nsfRestartIntraval',
        'nsf_helper': 'nsfHelper',
        'nsf_capability': 'nsfCapability',
        'nsf_enforce_global': 'nsfEnforceGlobal'
    }

    def __init__(self, nsf_enable=None, nsf_mechanism=None, nsf_restart_intraval=None, nsf_helper=None, nsf_capability=None, nsf_enforce_global=None, _configuration=None):  # noqa: E501
        """IOspfNsfGracefulRestart - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nsf_enable = None
        self._nsf_mechanism = None
        self._nsf_restart_intraval = None
        self._nsf_helper = None
        self._nsf_capability = None
        self._nsf_enforce_global = None
        self.discriminator = None

        if nsf_enable is not None:
            self.nsf_enable = nsf_enable
        if nsf_mechanism is not None:
            self.nsf_mechanism = nsf_mechanism
        if nsf_restart_intraval is not None:
            self.nsf_restart_intraval = nsf_restart_intraval
        if nsf_helper is not None:
            self.nsf_helper = nsf_helper
        if nsf_capability is not None:
            self.nsf_capability = nsf_capability
        if nsf_enforce_global is not None:
            self.nsf_enforce_global = nsf_enforce_global

    @property
    def nsf_enable(self):
        """Gets the nsf_enable of this IOspfNsfGracefulRestart.  # noqa: E501


        :return: The nsf_enable of this IOspfNsfGracefulRestart.  # noqa: E501
        :rtype: bool
        """
        return self._nsf_enable

    @nsf_enable.setter
    def nsf_enable(self, nsf_enable):
        """Sets the nsf_enable of this IOspfNsfGracefulRestart.


        :param nsf_enable: The nsf_enable of this IOspfNsfGracefulRestart.  # noqa: E501
        :type: bool
        """

        self._nsf_enable = nsf_enable

    @property
    def nsf_mechanism(self):
        """Gets the nsf_mechanism of this IOspfNsfGracefulRestart.  # noqa: E501


        :return: The nsf_mechanism of this IOspfNsfGracefulRestart.  # noqa: E501
        :rtype: str
        """
        return self._nsf_mechanism

    @nsf_mechanism.setter
    def nsf_mechanism(self, nsf_mechanism):
        """Sets the nsf_mechanism of this IOspfNsfGracefulRestart.


        :param nsf_mechanism: The nsf_mechanism of this IOspfNsfGracefulRestart.  # noqa: E501
        :type: str
        """
        allowed_values = ["CISCO", "IETF", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                nsf_mechanism not in allowed_values):
            raise ValueError(
                "Invalid value for `nsf_mechanism` ({0}), must be one of {1}"  # noqa: E501
                .format(nsf_mechanism, allowed_values)
            )

        self._nsf_mechanism = nsf_mechanism

    @property
    def nsf_restart_intraval(self):
        """Gets the nsf_restart_intraval of this IOspfNsfGracefulRestart.  # noqa: E501


        :return: The nsf_restart_intraval of this IOspfNsfGracefulRestart.  # noqa: E501
        :rtype: int
        """
        return self._nsf_restart_intraval

    @nsf_restart_intraval.setter
    def nsf_restart_intraval(self, nsf_restart_intraval):
        """Sets the nsf_restart_intraval of this IOspfNsfGracefulRestart.


        :param nsf_restart_intraval: The nsf_restart_intraval of this IOspfNsfGracefulRestart.  # noqa: E501
        :type: int
        """

        self._nsf_restart_intraval = nsf_restart_intraval

    @property
    def nsf_helper(self):
        """Gets the nsf_helper of this IOspfNsfGracefulRestart.  # noqa: E501


        :return: The nsf_helper of this IOspfNsfGracefulRestart.  # noqa: E501
        :rtype: bool
        """
        return self._nsf_helper

    @nsf_helper.setter
    def nsf_helper(self, nsf_helper):
        """Sets the nsf_helper of this IOspfNsfGracefulRestart.


        :param nsf_helper: The nsf_helper of this IOspfNsfGracefulRestart.  # noqa: E501
        :type: bool
        """

        self._nsf_helper = nsf_helper

    @property
    def nsf_capability(self):
        """Gets the nsf_capability of this IOspfNsfGracefulRestart.  # noqa: E501


        :return: The nsf_capability of this IOspfNsfGracefulRestart.  # noqa: E501
        :rtype: bool
        """
        return self._nsf_capability

    @nsf_capability.setter
    def nsf_capability(self, nsf_capability):
        """Sets the nsf_capability of this IOspfNsfGracefulRestart.


        :param nsf_capability: The nsf_capability of this IOspfNsfGracefulRestart.  # noqa: E501
        :type: bool
        """

        self._nsf_capability = nsf_capability

    @property
    def nsf_enforce_global(self):
        """Gets the nsf_enforce_global of this IOspfNsfGracefulRestart.  # noqa: E501


        :return: The nsf_enforce_global of this IOspfNsfGracefulRestart.  # noqa: E501
        :rtype: bool
        """
        return self._nsf_enforce_global

    @nsf_enforce_global.setter
    def nsf_enforce_global(self, nsf_enforce_global):
        """Sets the nsf_enforce_global of this IOspfNsfGracefulRestart.


        :param nsf_enforce_global: The nsf_enforce_global of this IOspfNsfGracefulRestart.  # noqa: E501
        :type: bool
        """

        self._nsf_enforce_global = nsf_enforce_global

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfNsfGracefulRestart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfNsfGracefulRestart):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfNsfGracefulRestart):
            return True

        return self.to_dict() != other.to_dict()
