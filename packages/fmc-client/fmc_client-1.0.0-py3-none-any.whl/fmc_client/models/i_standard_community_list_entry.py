# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IStandardCommunityListEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence': 'int',
        'no_export': 'bool',
        'action': 'str',
        'type': 'str',
        'internet': 'bool',
        'no_advertise': 'bool',
        'communities': 'str'
    }

    attribute_map = {
        'sequence': 'sequence',
        'no_export': 'noExport',
        'action': 'action',
        'type': 'type',
        'internet': 'internet',
        'no_advertise': 'noAdvertise',
        'communities': 'communities'
    }

    def __init__(self, sequence=None, no_export=None, action=None, type=None, internet=None, no_advertise=None, communities=None, _configuration=None):  # noqa: E501
        """IStandardCommunityListEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sequence = None
        self._no_export = None
        self._action = None
        self._type = None
        self._internet = None
        self._no_advertise = None
        self._communities = None
        self.discriminator = None

        self.sequence = sequence
        if no_export is not None:
            self.no_export = no_export
        self.action = action
        if type is not None:
            self.type = type
        if internet is not None:
            self.internet = internet
        if no_advertise is not None:
            self.no_advertise = no_advertise
        self.communities = communities

    @property
    def sequence(self):
        """Gets the sequence of this IStandardCommunityListEntry.  # noqa: E501


        :return: The sequence of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this IStandardCommunityListEntry.


        :param sequence: The sequence of this IStandardCommunityListEntry.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def no_export(self):
        """Gets the no_export of this IStandardCommunityListEntry.  # noqa: E501


        :return: The no_export of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: bool
        """
        return self._no_export

    @no_export.setter
    def no_export(self, no_export):
        """Sets the no_export of this IStandardCommunityListEntry.


        :param no_export: The no_export of this IStandardCommunityListEntry.  # noqa: E501
        :type: bool
        """

        self._no_export = no_export

    @property
    def action(self):
        """Gets the action of this IStandardCommunityListEntry.  # noqa: E501


        :return: The action of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IStandardCommunityListEntry.


        :param action: The action of this IStandardCommunityListEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["PERMIT", "DENY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def type(self):
        """Gets the type of this IStandardCommunityListEntry.  # noqa: E501


        :return: The type of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IStandardCommunityListEntry.


        :param type: The type of this IStandardCommunityListEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def internet(self):
        """Gets the internet of this IStandardCommunityListEntry.  # noqa: E501


        :return: The internet of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: bool
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this IStandardCommunityListEntry.


        :param internet: The internet of this IStandardCommunityListEntry.  # noqa: E501
        :type: bool
        """

        self._internet = internet

    @property
    def no_advertise(self):
        """Gets the no_advertise of this IStandardCommunityListEntry.  # noqa: E501


        :return: The no_advertise of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: bool
        """
        return self._no_advertise

    @no_advertise.setter
    def no_advertise(self, no_advertise):
        """Sets the no_advertise of this IStandardCommunityListEntry.


        :param no_advertise: The no_advertise of this IStandardCommunityListEntry.  # noqa: E501
        :type: bool
        """

        self._no_advertise = no_advertise

    @property
    def communities(self):
        """Gets the communities of this IStandardCommunityListEntry.  # noqa: E501


        :return: The communities of this IStandardCommunityListEntry.  # noqa: E501
        :rtype: str
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this IStandardCommunityListEntry.


        :param communities: The communities of this IStandardCommunityListEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and communities is None:
            raise ValueError("Invalid value for `communities`, must not be `None`")  # noqa: E501

        self._communities = communities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IStandardCommunityListEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IStandardCommunityListEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IStandardCommunityListEntry):
            return True

        return self.to_dict() != other.to_dict()
