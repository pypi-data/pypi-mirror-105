# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class ISwitchPortConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port_mode': 'str',
        'protected_enabled': 'bool',
        'access_mode_vlan_id': 'int',
        'trunk_mode_allowed_vlan_ids': 'str',
        'trunk_mode_native_vlan_id': 'int'
    }

    attribute_map = {
        'port_mode': 'portMode',
        'protected_enabled': 'protectedEnabled',
        'access_mode_vlan_id': 'accessModeVlanId',
        'trunk_mode_allowed_vlan_ids': 'trunkModeAllowedVlanIds',
        'trunk_mode_native_vlan_id': 'trunkModeNativeVlanId'
    }

    def __init__(self, port_mode=None, protected_enabled=None, access_mode_vlan_id=None, trunk_mode_allowed_vlan_ids=None, trunk_mode_native_vlan_id=None, _configuration=None):  # noqa: E501
        """ISwitchPortConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._port_mode = None
        self._protected_enabled = None
        self._access_mode_vlan_id = None
        self._trunk_mode_allowed_vlan_ids = None
        self._trunk_mode_native_vlan_id = None
        self.discriminator = None

        if port_mode is not None:
            self.port_mode = port_mode
        if protected_enabled is not None:
            self.protected_enabled = protected_enabled
        if access_mode_vlan_id is not None:
            self.access_mode_vlan_id = access_mode_vlan_id
        if trunk_mode_allowed_vlan_ids is not None:
            self.trunk_mode_allowed_vlan_ids = trunk_mode_allowed_vlan_ids
        if trunk_mode_native_vlan_id is not None:
            self.trunk_mode_native_vlan_id = trunk_mode_native_vlan_id

    @property
    def port_mode(self):
        """Gets the port_mode of this ISwitchPortConfig.  # noqa: E501


        :return: The port_mode of this ISwitchPortConfig.  # noqa: E501
        :rtype: str
        """
        return self._port_mode

    @port_mode.setter
    def port_mode(self, port_mode):
        """Sets the port_mode of this ISwitchPortConfig.


        :param port_mode: The port_mode of this ISwitchPortConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCESS", "TRUNK"]  # noqa: E501
        if (self._configuration.client_side_validation and
                port_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `port_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(port_mode, allowed_values)
            )

        self._port_mode = port_mode

    @property
    def protected_enabled(self):
        """Gets the protected_enabled of this ISwitchPortConfig.  # noqa: E501


        :return: The protected_enabled of this ISwitchPortConfig.  # noqa: E501
        :rtype: bool
        """
        return self._protected_enabled

    @protected_enabled.setter
    def protected_enabled(self, protected_enabled):
        """Sets the protected_enabled of this ISwitchPortConfig.


        :param protected_enabled: The protected_enabled of this ISwitchPortConfig.  # noqa: E501
        :type: bool
        """

        self._protected_enabled = protected_enabled

    @property
    def access_mode_vlan_id(self):
        """Gets the access_mode_vlan_id of this ISwitchPortConfig.  # noqa: E501


        :return: The access_mode_vlan_id of this ISwitchPortConfig.  # noqa: E501
        :rtype: int
        """
        return self._access_mode_vlan_id

    @access_mode_vlan_id.setter
    def access_mode_vlan_id(self, access_mode_vlan_id):
        """Sets the access_mode_vlan_id of this ISwitchPortConfig.


        :param access_mode_vlan_id: The access_mode_vlan_id of this ISwitchPortConfig.  # noqa: E501
        :type: int
        """

        self._access_mode_vlan_id = access_mode_vlan_id

    @property
    def trunk_mode_allowed_vlan_ids(self):
        """Gets the trunk_mode_allowed_vlan_ids of this ISwitchPortConfig.  # noqa: E501


        :return: The trunk_mode_allowed_vlan_ids of this ISwitchPortConfig.  # noqa: E501
        :rtype: str
        """
        return self._trunk_mode_allowed_vlan_ids

    @trunk_mode_allowed_vlan_ids.setter
    def trunk_mode_allowed_vlan_ids(self, trunk_mode_allowed_vlan_ids):
        """Sets the trunk_mode_allowed_vlan_ids of this ISwitchPortConfig.


        :param trunk_mode_allowed_vlan_ids: The trunk_mode_allowed_vlan_ids of this ISwitchPortConfig.  # noqa: E501
        :type: str
        """

        self._trunk_mode_allowed_vlan_ids = trunk_mode_allowed_vlan_ids

    @property
    def trunk_mode_native_vlan_id(self):
        """Gets the trunk_mode_native_vlan_id of this ISwitchPortConfig.  # noqa: E501


        :return: The trunk_mode_native_vlan_id of this ISwitchPortConfig.  # noqa: E501
        :rtype: int
        """
        return self._trunk_mode_native_vlan_id

    @trunk_mode_native_vlan_id.setter
    def trunk_mode_native_vlan_id(self, trunk_mode_native_vlan_id):
        """Sets the trunk_mode_native_vlan_id of this ISwitchPortConfig.


        :param trunk_mode_native_vlan_id: The trunk_mode_native_vlan_id of this ISwitchPortConfig.  # noqa: E501
        :type: int
        """

        self._trunk_mode_native_vlan_id = trunk_mode_native_vlan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ISwitchPortConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ISwitchPortConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ISwitchPortConfig):
            return True

        return self.to_dict() != other.to_dict()
