# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IFTDDeviceHABootStrap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shared_key': 'str',
        'lan_failover': 'IFTDDeviceHAFailoverLink',
        'enc_key_generation_scheme': 'str',
        'use_same_link_for_failovers': 'bool',
        'stateful_failover': 'IFTDDeviceHAFailoverLink',
        'is_encryption_enabled': 'bool'
    }

    attribute_map = {
        'shared_key': 'sharedKey',
        'lan_failover': 'lanFailover',
        'enc_key_generation_scheme': 'encKeyGenerationScheme',
        'use_same_link_for_failovers': 'useSameLinkForFailovers',
        'stateful_failover': 'statefulFailover',
        'is_encryption_enabled': 'isEncryptionEnabled'
    }

    def __init__(self, shared_key=None, lan_failover=None, enc_key_generation_scheme=None, use_same_link_for_failovers=None, stateful_failover=None, is_encryption_enabled=None, _configuration=None):  # noqa: E501
        """IFTDDeviceHABootStrap - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shared_key = None
        self._lan_failover = None
        self._enc_key_generation_scheme = None
        self._use_same_link_for_failovers = None
        self._stateful_failover = None
        self._is_encryption_enabled = None
        self.discriminator = None

        if shared_key is not None:
            self.shared_key = shared_key
        self.lan_failover = lan_failover
        if enc_key_generation_scheme is not None:
            self.enc_key_generation_scheme = enc_key_generation_scheme
        self.use_same_link_for_failovers = use_same_link_for_failovers
        self.stateful_failover = stateful_failover
        if is_encryption_enabled is not None:
            self.is_encryption_enabled = is_encryption_enabled

    @property
    def shared_key(self):
        """Gets the shared_key of this IFTDDeviceHABootStrap.  # noqa: E501


        :return: The shared_key of this IFTDDeviceHABootStrap.  # noqa: E501
        :rtype: str
        """
        return self._shared_key

    @shared_key.setter
    def shared_key(self, shared_key):
        """Sets the shared_key of this IFTDDeviceHABootStrap.


        :param shared_key: The shared_key of this IFTDDeviceHABootStrap.  # noqa: E501
        :type: str
        """

        self._shared_key = shared_key

    @property
    def lan_failover(self):
        """Gets the lan_failover of this IFTDDeviceHABootStrap.  # noqa: E501


        :return: The lan_failover of this IFTDDeviceHABootStrap.  # noqa: E501
        :rtype: IFTDDeviceHAFailoverLink
        """
        return self._lan_failover

    @lan_failover.setter
    def lan_failover(self, lan_failover):
        """Sets the lan_failover of this IFTDDeviceHABootStrap.


        :param lan_failover: The lan_failover of this IFTDDeviceHABootStrap.  # noqa: E501
        :type: IFTDDeviceHAFailoverLink
        """
        if self._configuration.client_side_validation and lan_failover is None:
            raise ValueError("Invalid value for `lan_failover`, must not be `None`")  # noqa: E501

        self._lan_failover = lan_failover

    @property
    def enc_key_generation_scheme(self):
        """Gets the enc_key_generation_scheme of this IFTDDeviceHABootStrap.  # noqa: E501


        :return: The enc_key_generation_scheme of this IFTDDeviceHABootStrap.  # noqa: E501
        :rtype: str
        """
        return self._enc_key_generation_scheme

    @enc_key_generation_scheme.setter
    def enc_key_generation_scheme(self, enc_key_generation_scheme):
        """Sets the enc_key_generation_scheme of this IFTDDeviceHABootStrap.


        :param enc_key_generation_scheme: The enc_key_generation_scheme of this IFTDDeviceHABootStrap.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO", "CUSTOM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                enc_key_generation_scheme not in allowed_values):
            raise ValueError(
                "Invalid value for `enc_key_generation_scheme` ({0}), must be one of {1}"  # noqa: E501
                .format(enc_key_generation_scheme, allowed_values)
            )

        self._enc_key_generation_scheme = enc_key_generation_scheme

    @property
    def use_same_link_for_failovers(self):
        """Gets the use_same_link_for_failovers of this IFTDDeviceHABootStrap.  # noqa: E501


        :return: The use_same_link_for_failovers of this IFTDDeviceHABootStrap.  # noqa: E501
        :rtype: bool
        """
        return self._use_same_link_for_failovers

    @use_same_link_for_failovers.setter
    def use_same_link_for_failovers(self, use_same_link_for_failovers):
        """Sets the use_same_link_for_failovers of this IFTDDeviceHABootStrap.


        :param use_same_link_for_failovers: The use_same_link_for_failovers of this IFTDDeviceHABootStrap.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and use_same_link_for_failovers is None:
            raise ValueError("Invalid value for `use_same_link_for_failovers`, must not be `None`")  # noqa: E501

        self._use_same_link_for_failovers = use_same_link_for_failovers

    @property
    def stateful_failover(self):
        """Gets the stateful_failover of this IFTDDeviceHABootStrap.  # noqa: E501


        :return: The stateful_failover of this IFTDDeviceHABootStrap.  # noqa: E501
        :rtype: IFTDDeviceHAFailoverLink
        """
        return self._stateful_failover

    @stateful_failover.setter
    def stateful_failover(self, stateful_failover):
        """Sets the stateful_failover of this IFTDDeviceHABootStrap.


        :param stateful_failover: The stateful_failover of this IFTDDeviceHABootStrap.  # noqa: E501
        :type: IFTDDeviceHAFailoverLink
        """
        if self._configuration.client_side_validation and stateful_failover is None:
            raise ValueError("Invalid value for `stateful_failover`, must not be `None`")  # noqa: E501

        self._stateful_failover = stateful_failover

    @property
    def is_encryption_enabled(self):
        """Gets the is_encryption_enabled of this IFTDDeviceHABootStrap.  # noqa: E501


        :return: The is_encryption_enabled of this IFTDDeviceHABootStrap.  # noqa: E501
        :rtype: bool
        """
        return self._is_encryption_enabled

    @is_encryption_enabled.setter
    def is_encryption_enabled(self, is_encryption_enabled):
        """Sets the is_encryption_enabled of this IFTDDeviceHABootStrap.


        :param is_encryption_enabled: The is_encryption_enabled of this IFTDDeviceHABootStrap.  # noqa: E501
        :type: bool
        """

        self._is_encryption_enabled = is_encryption_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IFTDDeviceHABootStrap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IFTDDeviceHABootStrap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IFTDDeviceHABootStrap):
            return True

        return self.to_dict() != other.to_dict()
