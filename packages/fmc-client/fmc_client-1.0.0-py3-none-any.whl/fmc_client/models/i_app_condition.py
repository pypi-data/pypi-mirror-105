# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IAppCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search': 'str',
        'risks': 'list[IApplicationRisk]',
        'productivities': 'list[IApplicationProductivity]',
        'application_types': 'list[IApplicationType]',
        'categories': 'list[IApplicationCategory]',
        'type': 'str',
        'tags': 'list[IApplicationTag]'
    }

    attribute_map = {
        'search': 'search',
        'risks': 'risks',
        'productivities': 'productivities',
        'application_types': 'applicationTypes',
        'categories': 'categories',
        'type': 'type',
        'tags': 'tags'
    }

    def __init__(self, search=None, risks=None, productivities=None, application_types=None, categories=None, type=None, tags=None, _configuration=None):  # noqa: E501
        """IAppCondition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._search = None
        self._risks = None
        self._productivities = None
        self._application_types = None
        self._categories = None
        self._type = None
        self._tags = None
        self.discriminator = None

        if search is not None:
            self.search = search
        if risks is not None:
            self.risks = risks
        if productivities is not None:
            self.productivities = productivities
        if application_types is not None:
            self.application_types = application_types
        if categories is not None:
            self.categories = categories
        if type is not None:
            self.type = type
        if tags is not None:
            self.tags = tags

    @property
    def search(self):
        """Gets the search of this IAppCondition.  # noqa: E501


        :return: The search of this IAppCondition.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this IAppCondition.


        :param search: The search of this IAppCondition.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def risks(self):
        """Gets the risks of this IAppCondition.  # noqa: E501


        :return: The risks of this IAppCondition.  # noqa: E501
        :rtype: list[IApplicationRisk]
        """
        return self._risks

    @risks.setter
    def risks(self, risks):
        """Sets the risks of this IAppCondition.


        :param risks: The risks of this IAppCondition.  # noqa: E501
        :type: list[IApplicationRisk]
        """

        self._risks = risks

    @property
    def productivities(self):
        """Gets the productivities of this IAppCondition.  # noqa: E501


        :return: The productivities of this IAppCondition.  # noqa: E501
        :rtype: list[IApplicationProductivity]
        """
        return self._productivities

    @productivities.setter
    def productivities(self, productivities):
        """Sets the productivities of this IAppCondition.


        :param productivities: The productivities of this IAppCondition.  # noqa: E501
        :type: list[IApplicationProductivity]
        """

        self._productivities = productivities

    @property
    def application_types(self):
        """Gets the application_types of this IAppCondition.  # noqa: E501


        :return: The application_types of this IAppCondition.  # noqa: E501
        :rtype: list[IApplicationType]
        """
        return self._application_types

    @application_types.setter
    def application_types(self, application_types):
        """Sets the application_types of this IAppCondition.


        :param application_types: The application_types of this IAppCondition.  # noqa: E501
        :type: list[IApplicationType]
        """

        self._application_types = application_types

    @property
    def categories(self):
        """Gets the categories of this IAppCondition.  # noqa: E501


        :return: The categories of this IAppCondition.  # noqa: E501
        :rtype: list[IApplicationCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this IAppCondition.


        :param categories: The categories of this IAppCondition.  # noqa: E501
        :type: list[IApplicationCategory]
        """

        self._categories = categories

    @property
    def type(self):
        """Gets the type of this IAppCondition.  # noqa: E501


        :return: The type of this IAppCondition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IAppCondition.


        :param type: The type of this IAppCondition.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this IAppCondition.  # noqa: E501


        :return: The tags of this IAppCondition.  # noqa: E501
        :rtype: list[IApplicationTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IAppCondition.


        :param tags: The tags of this IAppCondition.  # noqa: E501
        :type: list[IApplicationTag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IAppCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IAppCondition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IAppCondition):
            return True

        return self.to_dict() != other.to_dict()
