# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IBGPAddressFamilyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'distance': 'IDistance',
        'inject_maps': 'list[IRouteInjection]',
        'description': 'str',
        'aftable_map': 'IRouteMap',
        'auto_summary': 'bool',
        'networks': 'list[IBgpNetworks]',
        'type': 'str',
        'version': 'str',
        'distribute_lists': 'list[IDistributeLists]',
        'aggregate_addresses_i_pv6s': 'list[IAggregateAddresses]',
        'default_information_orginate': 'bool',
        'maximum_paths': 'list[IMaximumPaths]',
        'bgp_redistribute_internal': 'bool',
        'aggregate_addresses_i_pv4s': 'list[IAggregateAddresses]',
        'neighbors': 'list[INeighbors]',
        'bgp_supress_inactive': 'bool',
        'name': 'str',
        'synchronization': 'bool',
        'links': 'ILinks',
        'redistribute_protocols': 'list[IRedistributeProtocolBase]',
        'id': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'distance': 'distance',
        'inject_maps': 'injectMaps',
        'description': 'description',
        'aftable_map': 'aftableMap',
        'auto_summary': 'autoSummary',
        'networks': 'networks',
        'type': 'type',
        'version': 'version',
        'distribute_lists': 'distributeLists',
        'aggregate_addresses_i_pv6s': 'aggregateAddressesIPv6s',
        'default_information_orginate': 'defaultInformationOrginate',
        'maximum_paths': 'maximumPaths',
        'bgp_redistribute_internal': 'bgpRedistributeInternal',
        'aggregate_addresses_i_pv4s': 'aggregateAddressesIPv4s',
        'neighbors': 'neighbors',
        'bgp_supress_inactive': 'bgpSupressInactive',
        'name': 'name',
        'synchronization': 'synchronization',
        'links': 'links',
        'redistribute_protocols': 'redistributeProtocols',
        'id': 'id'
    }

    def __init__(self, metadata=None, distance=None, inject_maps=None, description=None, aftable_map=None, auto_summary=None, networks=None, type=None, version=None, distribute_lists=None, aggregate_addresses_i_pv6s=None, default_information_orginate=None, maximum_paths=None, bgp_redistribute_internal=None, aggregate_addresses_i_pv4s=None, neighbors=None, bgp_supress_inactive=None, name=None, synchronization=None, links=None, redistribute_protocols=None, id=None, _configuration=None):  # noqa: E501
        """IBGPAddressFamilyModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._distance = None
        self._inject_maps = None
        self._description = None
        self._aftable_map = None
        self._auto_summary = None
        self._networks = None
        self._type = None
        self._version = None
        self._distribute_lists = None
        self._aggregate_addresses_i_pv6s = None
        self._default_information_orginate = None
        self._maximum_paths = None
        self._bgp_redistribute_internal = None
        self._aggregate_addresses_i_pv4s = None
        self._neighbors = None
        self._bgp_supress_inactive = None
        self._name = None
        self._synchronization = None
        self._links = None
        self._redistribute_protocols = None
        self._id = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if distance is not None:
            self.distance = distance
        if inject_maps is not None:
            self.inject_maps = inject_maps
        if description is not None:
            self.description = description
        if aftable_map is not None:
            self.aftable_map = aftable_map
        if auto_summary is not None:
            self.auto_summary = auto_summary
        if networks is not None:
            self.networks = networks
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if distribute_lists is not None:
            self.distribute_lists = distribute_lists
        if aggregate_addresses_i_pv6s is not None:
            self.aggregate_addresses_i_pv6s = aggregate_addresses_i_pv6s
        if default_information_orginate is not None:
            self.default_information_orginate = default_information_orginate
        if maximum_paths is not None:
            self.maximum_paths = maximum_paths
        if bgp_redistribute_internal is not None:
            self.bgp_redistribute_internal = bgp_redistribute_internal
        if aggregate_addresses_i_pv4s is not None:
            self.aggregate_addresses_i_pv4s = aggregate_addresses_i_pv4s
        if neighbors is not None:
            self.neighbors = neighbors
        if bgp_supress_inactive is not None:
            self.bgp_supress_inactive = bgp_supress_inactive
        if name is not None:
            self.name = name
        if synchronization is not None:
            self.synchronization = synchronization
        if links is not None:
            self.links = links
        if redistribute_protocols is not None:
            self.redistribute_protocols = redistribute_protocols
        if id is not None:
            self.id = id

    @property
    def metadata(self):
        """Gets the metadata of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The metadata of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IBGPAddressFamilyModel.


        :param metadata: The metadata of this IBGPAddressFamilyModel.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def distance(self):
        """Gets the distance of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The distance of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: IDistance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this IBGPAddressFamilyModel.


        :param distance: The distance of this IBGPAddressFamilyModel.  # noqa: E501
        :type: IDistance
        """

        self._distance = distance

    @property
    def inject_maps(self):
        """Gets the inject_maps of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The inject_maps of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IRouteInjection]
        """
        return self._inject_maps

    @inject_maps.setter
    def inject_maps(self, inject_maps):
        """Sets the inject_maps of this IBGPAddressFamilyModel.


        :param inject_maps: The inject_maps of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IRouteInjection]
        """

        self._inject_maps = inject_maps

    @property
    def description(self):
        """Gets the description of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The description of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IBGPAddressFamilyModel.


        :param description: The description of this IBGPAddressFamilyModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def aftable_map(self):
        """Gets the aftable_map of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The aftable_map of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: IRouteMap
        """
        return self._aftable_map

    @aftable_map.setter
    def aftable_map(self, aftable_map):
        """Sets the aftable_map of this IBGPAddressFamilyModel.


        :param aftable_map: The aftable_map of this IBGPAddressFamilyModel.  # noqa: E501
        :type: IRouteMap
        """

        self._aftable_map = aftable_map

    @property
    def auto_summary(self):
        """Gets the auto_summary of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The auto_summary of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_summary

    @auto_summary.setter
    def auto_summary(self, auto_summary):
        """Sets the auto_summary of this IBGPAddressFamilyModel.


        :param auto_summary: The auto_summary of this IBGPAddressFamilyModel.  # noqa: E501
        :type: bool
        """

        self._auto_summary = auto_summary

    @property
    def networks(self):
        """Gets the networks of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The networks of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IBgpNetworks]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this IBGPAddressFamilyModel.


        :param networks: The networks of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IBgpNetworks]
        """

        self._networks = networks

    @property
    def type(self):
        """Gets the type of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The type of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IBGPAddressFamilyModel.


        :param type: The type of this IBGPAddressFamilyModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The version of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IBGPAddressFamilyModel.


        :param version: The version of this IBGPAddressFamilyModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def distribute_lists(self):
        """Gets the distribute_lists of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The distribute_lists of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IDistributeLists]
        """
        return self._distribute_lists

    @distribute_lists.setter
    def distribute_lists(self, distribute_lists):
        """Sets the distribute_lists of this IBGPAddressFamilyModel.


        :param distribute_lists: The distribute_lists of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IDistributeLists]
        """

        self._distribute_lists = distribute_lists

    @property
    def aggregate_addresses_i_pv6s(self):
        """Gets the aggregate_addresses_i_pv6s of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The aggregate_addresses_i_pv6s of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IAggregateAddresses]
        """
        return self._aggregate_addresses_i_pv6s

    @aggregate_addresses_i_pv6s.setter
    def aggregate_addresses_i_pv6s(self, aggregate_addresses_i_pv6s):
        """Sets the aggregate_addresses_i_pv6s of this IBGPAddressFamilyModel.


        :param aggregate_addresses_i_pv6s: The aggregate_addresses_i_pv6s of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IAggregateAddresses]
        """

        self._aggregate_addresses_i_pv6s = aggregate_addresses_i_pv6s

    @property
    def default_information_orginate(self):
        """Gets the default_information_orginate of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The default_information_orginate of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: bool
        """
        return self._default_information_orginate

    @default_information_orginate.setter
    def default_information_orginate(self, default_information_orginate):
        """Sets the default_information_orginate of this IBGPAddressFamilyModel.


        :param default_information_orginate: The default_information_orginate of this IBGPAddressFamilyModel.  # noqa: E501
        :type: bool
        """

        self._default_information_orginate = default_information_orginate

    @property
    def maximum_paths(self):
        """Gets the maximum_paths of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The maximum_paths of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IMaximumPaths]
        """
        return self._maximum_paths

    @maximum_paths.setter
    def maximum_paths(self, maximum_paths):
        """Sets the maximum_paths of this IBGPAddressFamilyModel.


        :param maximum_paths: The maximum_paths of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IMaximumPaths]
        """

        self._maximum_paths = maximum_paths

    @property
    def bgp_redistribute_internal(self):
        """Gets the bgp_redistribute_internal of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The bgp_redistribute_internal of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: bool
        """
        return self._bgp_redistribute_internal

    @bgp_redistribute_internal.setter
    def bgp_redistribute_internal(self, bgp_redistribute_internal):
        """Sets the bgp_redistribute_internal of this IBGPAddressFamilyModel.


        :param bgp_redistribute_internal: The bgp_redistribute_internal of this IBGPAddressFamilyModel.  # noqa: E501
        :type: bool
        """

        self._bgp_redistribute_internal = bgp_redistribute_internal

    @property
    def aggregate_addresses_i_pv4s(self):
        """Gets the aggregate_addresses_i_pv4s of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The aggregate_addresses_i_pv4s of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IAggregateAddresses]
        """
        return self._aggregate_addresses_i_pv4s

    @aggregate_addresses_i_pv4s.setter
    def aggregate_addresses_i_pv4s(self, aggregate_addresses_i_pv4s):
        """Sets the aggregate_addresses_i_pv4s of this IBGPAddressFamilyModel.


        :param aggregate_addresses_i_pv4s: The aggregate_addresses_i_pv4s of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IAggregateAddresses]
        """

        self._aggregate_addresses_i_pv4s = aggregate_addresses_i_pv4s

    @property
    def neighbors(self):
        """Gets the neighbors of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The neighbors of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[INeighbors]
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this IBGPAddressFamilyModel.


        :param neighbors: The neighbors of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[INeighbors]
        """

        self._neighbors = neighbors

    @property
    def bgp_supress_inactive(self):
        """Gets the bgp_supress_inactive of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The bgp_supress_inactive of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: bool
        """
        return self._bgp_supress_inactive

    @bgp_supress_inactive.setter
    def bgp_supress_inactive(self, bgp_supress_inactive):
        """Sets the bgp_supress_inactive of this IBGPAddressFamilyModel.


        :param bgp_supress_inactive: The bgp_supress_inactive of this IBGPAddressFamilyModel.  # noqa: E501
        :type: bool
        """

        self._bgp_supress_inactive = bgp_supress_inactive

    @property
    def name(self):
        """Gets the name of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The name of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IBGPAddressFamilyModel.


        :param name: The name of this IBGPAddressFamilyModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def synchronization(self):
        """Gets the synchronization of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The synchronization of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: bool
        """
        return self._synchronization

    @synchronization.setter
    def synchronization(self, synchronization):
        """Sets the synchronization of this IBGPAddressFamilyModel.


        :param synchronization: The synchronization of this IBGPAddressFamilyModel.  # noqa: E501
        :type: bool
        """

        self._synchronization = synchronization

    @property
    def links(self):
        """Gets the links of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The links of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IBGPAddressFamilyModel.


        :param links: The links of this IBGPAddressFamilyModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def redistribute_protocols(self):
        """Gets the redistribute_protocols of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The redistribute_protocols of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: list[IRedistributeProtocolBase]
        """
        return self._redistribute_protocols

    @redistribute_protocols.setter
    def redistribute_protocols(self, redistribute_protocols):
        """Sets the redistribute_protocols of this IBGPAddressFamilyModel.


        :param redistribute_protocols: The redistribute_protocols of this IBGPAddressFamilyModel.  # noqa: E501
        :type: list[IRedistributeProtocolBase]
        """

        self._redistribute_protocols = redistribute_protocols

    @property
    def id(self):
        """Gets the id of this IBGPAddressFamilyModel.  # noqa: E501


        :return: The id of this IBGPAddressFamilyModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IBGPAddressFamilyModel.


        :param id: The id of this IBGPAddressFamilyModel.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IBGPAddressFamilyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IBGPAddressFamilyModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IBGPAddressFamilyModel):
            return True

        return self.to_dict() != other.to_dict()
