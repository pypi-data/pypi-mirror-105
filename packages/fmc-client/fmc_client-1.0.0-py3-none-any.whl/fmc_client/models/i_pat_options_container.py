# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IPatOptionsContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_allocation': 'bool',
        'pat_pool_address': 'INetworkAddress',
        'include_reserve': 'bool',
        'flat_port_range': 'bool',
        'interface_pat': 'bool',
        'extended_pat': 'bool',
        'round_robin': 'bool'
    }

    attribute_map = {
        'block_allocation': 'blockAllocation',
        'pat_pool_address': 'patPoolAddress',
        'include_reserve': 'includeReserve',
        'flat_port_range': 'flatPortRange',
        'interface_pat': 'interfacePat',
        'extended_pat': 'extendedPat',
        'round_robin': 'roundRobin'
    }

    def __init__(self, block_allocation=None, pat_pool_address=None, include_reserve=None, flat_port_range=None, interface_pat=None, extended_pat=None, round_robin=None, _configuration=None):  # noqa: E501
        """IPatOptionsContainer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._block_allocation = None
        self._pat_pool_address = None
        self._include_reserve = None
        self._flat_port_range = None
        self._interface_pat = None
        self._extended_pat = None
        self._round_robin = None
        self.discriminator = None

        if block_allocation is not None:
            self.block_allocation = block_allocation
        if pat_pool_address is not None:
            self.pat_pool_address = pat_pool_address
        if include_reserve is not None:
            self.include_reserve = include_reserve
        if flat_port_range is not None:
            self.flat_port_range = flat_port_range
        if interface_pat is not None:
            self.interface_pat = interface_pat
        if extended_pat is not None:
            self.extended_pat = extended_pat
        if round_robin is not None:
            self.round_robin = round_robin

    @property
    def block_allocation(self):
        """Gets the block_allocation of this IPatOptionsContainer.  # noqa: E501


        :return: The block_allocation of this IPatOptionsContainer.  # noqa: E501
        :rtype: bool
        """
        return self._block_allocation

    @block_allocation.setter
    def block_allocation(self, block_allocation):
        """Sets the block_allocation of this IPatOptionsContainer.


        :param block_allocation: The block_allocation of this IPatOptionsContainer.  # noqa: E501
        :type: bool
        """

        self._block_allocation = block_allocation

    @property
    def pat_pool_address(self):
        """Gets the pat_pool_address of this IPatOptionsContainer.  # noqa: E501


        :return: The pat_pool_address of this IPatOptionsContainer.  # noqa: E501
        :rtype: INetworkAddress
        """
        return self._pat_pool_address

    @pat_pool_address.setter
    def pat_pool_address(self, pat_pool_address):
        """Sets the pat_pool_address of this IPatOptionsContainer.


        :param pat_pool_address: The pat_pool_address of this IPatOptionsContainer.  # noqa: E501
        :type: INetworkAddress
        """

        self._pat_pool_address = pat_pool_address

    @property
    def include_reserve(self):
        """Gets the include_reserve of this IPatOptionsContainer.  # noqa: E501


        :return: The include_reserve of this IPatOptionsContainer.  # noqa: E501
        :rtype: bool
        """
        return self._include_reserve

    @include_reserve.setter
    def include_reserve(self, include_reserve):
        """Sets the include_reserve of this IPatOptionsContainer.


        :param include_reserve: The include_reserve of this IPatOptionsContainer.  # noqa: E501
        :type: bool
        """

        self._include_reserve = include_reserve

    @property
    def flat_port_range(self):
        """Gets the flat_port_range of this IPatOptionsContainer.  # noqa: E501


        :return: The flat_port_range of this IPatOptionsContainer.  # noqa: E501
        :rtype: bool
        """
        return self._flat_port_range

    @flat_port_range.setter
    def flat_port_range(self, flat_port_range):
        """Sets the flat_port_range of this IPatOptionsContainer.


        :param flat_port_range: The flat_port_range of this IPatOptionsContainer.  # noqa: E501
        :type: bool
        """

        self._flat_port_range = flat_port_range

    @property
    def interface_pat(self):
        """Gets the interface_pat of this IPatOptionsContainer.  # noqa: E501


        :return: The interface_pat of this IPatOptionsContainer.  # noqa: E501
        :rtype: bool
        """
        return self._interface_pat

    @interface_pat.setter
    def interface_pat(self, interface_pat):
        """Sets the interface_pat of this IPatOptionsContainer.


        :param interface_pat: The interface_pat of this IPatOptionsContainer.  # noqa: E501
        :type: bool
        """

        self._interface_pat = interface_pat

    @property
    def extended_pat(self):
        """Gets the extended_pat of this IPatOptionsContainer.  # noqa: E501


        :return: The extended_pat of this IPatOptionsContainer.  # noqa: E501
        :rtype: bool
        """
        return self._extended_pat

    @extended_pat.setter
    def extended_pat(self, extended_pat):
        """Sets the extended_pat of this IPatOptionsContainer.


        :param extended_pat: The extended_pat of this IPatOptionsContainer.  # noqa: E501
        :type: bool
        """

        self._extended_pat = extended_pat

    @property
    def round_robin(self):
        """Gets the round_robin of this IPatOptionsContainer.  # noqa: E501


        :return: The round_robin of this IPatOptionsContainer.  # noqa: E501
        :rtype: bool
        """
        return self._round_robin

    @round_robin.setter
    def round_robin(self, round_robin):
        """Sets the round_robin of this IPatOptionsContainer.


        :param round_robin: The round_robin of this IPatOptionsContainer.  # noqa: E501
        :type: bool
        """

        self._round_robin = round_robin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPatOptionsContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPatOptionsContainer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPatOptionsContainer):
            return True

        return self.to_dict() != other.to_dict()
