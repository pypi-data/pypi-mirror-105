# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfFilterRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'process_id': 'str',
        'in_interface': 'IFTDInterface',
        'access_list': 'IStandardACL',
        'type': 'str'
    }

    attribute_map = {
        'protocol': 'protocol',
        'process_id': 'processId',
        'in_interface': 'inInterface',
        'access_list': 'accessList',
        'type': 'type'
    }

    def __init__(self, protocol=None, process_id=None, in_interface=None, access_list=None, type=None, _configuration=None):  # noqa: E501
        """IOspfFilterRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._protocol = None
        self._process_id = None
        self._in_interface = None
        self._access_list = None
        self._type = None
        self.discriminator = None

        if protocol is not None:
            self.protocol = protocol
        if process_id is not None:
            self.process_id = process_id
        if in_interface is not None:
            self.in_interface = in_interface
        if access_list is not None:
            self.access_list = access_list
        self.type = type

    @property
    def protocol(self):
        """Gets the protocol of this IOspfFilterRule.  # noqa: E501


        :return: The protocol of this IOspfFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IOspfFilterRule.


        :param protocol: The protocol of this IOspfFilterRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONNECTED", "STATIC", "RIP", "OSPF", "BGP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                protocol not in allowed_values):
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def process_id(self):
        """Gets the process_id of this IOspfFilterRule.  # noqa: E501


        :return: The process_id of this IOspfFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this IOspfFilterRule.


        :param process_id: The process_id of this IOspfFilterRule.  # noqa: E501
        :type: str
        """

        self._process_id = process_id

    @property
    def in_interface(self):
        """Gets the in_interface of this IOspfFilterRule.  # noqa: E501


        :return: The in_interface of this IOspfFilterRule.  # noqa: E501
        :rtype: IFTDInterface
        """
        return self._in_interface

    @in_interface.setter
    def in_interface(self, in_interface):
        """Sets the in_interface of this IOspfFilterRule.


        :param in_interface: The in_interface of this IOspfFilterRule.  # noqa: E501
        :type: IFTDInterface
        """

        self._in_interface = in_interface

    @property
    def access_list(self):
        """Gets the access_list of this IOspfFilterRule.  # noqa: E501


        :return: The access_list of this IOspfFilterRule.  # noqa: E501
        :rtype: IStandardACL
        """
        return self._access_list

    @access_list.setter
    def access_list(self, access_list):
        """Sets the access_list of this IOspfFilterRule.


        :param access_list: The access_list of this IOspfFilterRule.  # noqa: E501
        :type: IStandardACL
        """

        self._access_list = access_list

    @property
    def type(self):
        """Gets the type of this IOspfFilterRule.  # noqa: E501


        :return: The type of this IOspfFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IOspfFilterRule.


        :param type: The type of this IOspfFilterRule.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfFilterRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfFilterRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfFilterRule):
            return True

        return self.to_dict() != other.to_dict()
