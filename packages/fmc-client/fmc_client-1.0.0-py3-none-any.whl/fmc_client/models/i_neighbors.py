# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class INeighbors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'neighbor_timers': 'INeighborTimers',
        'ipv6_address': 'str',
        'neighbor_ha_mode': 'INeighborHaMode',
        'ipv4_address': 'str',
        'neighbor_advanced': 'INeighborAdvanced',
        'neighbor_routes': 'INeighborRoutes',
        'type': 'str',
        'neighbor_filtering': 'INeighborFiltering',
        'neighbor_local_as': 'INeighborLocalAs',
        'remote_as': 'str',
        'link_local_interface': 'IFTDInterface',
        'name': 'str',
        'links': 'ILinks',
        'id': 'str',
        'neighbor_general': 'INeighborGeneral'
    }

    attribute_map = {
        'neighbor_timers': 'neighborTimers',
        'ipv6_address': 'ipv6Address',
        'neighbor_ha_mode': 'neighborHaMode',
        'ipv4_address': 'ipv4Address',
        'neighbor_advanced': 'neighborAdvanced',
        'neighbor_routes': 'neighborRoutes',
        'type': 'type',
        'neighbor_filtering': 'neighborFiltering',
        'neighbor_local_as': 'neighborLocalAs',
        'remote_as': 'remoteAs',
        'link_local_interface': 'linkLocalInterface',
        'name': 'name',
        'links': 'links',
        'id': 'id',
        'neighbor_general': 'neighborGeneral'
    }

    def __init__(self, neighbor_timers=None, ipv6_address=None, neighbor_ha_mode=None, ipv4_address=None, neighbor_advanced=None, neighbor_routes=None, type=None, neighbor_filtering=None, neighbor_local_as=None, remote_as=None, link_local_interface=None, name=None, links=None, id=None, neighbor_general=None, _configuration=None):  # noqa: E501
        """INeighbors - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._neighbor_timers = None
        self._ipv6_address = None
        self._neighbor_ha_mode = None
        self._ipv4_address = None
        self._neighbor_advanced = None
        self._neighbor_routes = None
        self._type = None
        self._neighbor_filtering = None
        self._neighbor_local_as = None
        self._remote_as = None
        self._link_local_interface = None
        self._name = None
        self._links = None
        self._id = None
        self._neighbor_general = None
        self.discriminator = None

        if neighbor_timers is not None:
            self.neighbor_timers = neighbor_timers
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if neighbor_ha_mode is not None:
            self.neighbor_ha_mode = neighbor_ha_mode
        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if neighbor_advanced is not None:
            self.neighbor_advanced = neighbor_advanced
        if neighbor_routes is not None:
            self.neighbor_routes = neighbor_routes
        if type is not None:
            self.type = type
        if neighbor_filtering is not None:
            self.neighbor_filtering = neighbor_filtering
        if neighbor_local_as is not None:
            self.neighbor_local_as = neighbor_local_as
        if remote_as is not None:
            self.remote_as = remote_as
        if link_local_interface is not None:
            self.link_local_interface = link_local_interface
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if neighbor_general is not None:
            self.neighbor_general = neighbor_general

    @property
    def neighbor_timers(self):
        """Gets the neighbor_timers of this INeighbors.  # noqa: E501


        :return: The neighbor_timers of this INeighbors.  # noqa: E501
        :rtype: INeighborTimers
        """
        return self._neighbor_timers

    @neighbor_timers.setter
    def neighbor_timers(self, neighbor_timers):
        """Sets the neighbor_timers of this INeighbors.


        :param neighbor_timers: The neighbor_timers of this INeighbors.  # noqa: E501
        :type: INeighborTimers
        """

        self._neighbor_timers = neighbor_timers

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this INeighbors.  # noqa: E501


        :return: The ipv6_address of this INeighbors.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this INeighbors.


        :param ipv6_address: The ipv6_address of this INeighbors.  # noqa: E501
        :type: str
        """

        self._ipv6_address = ipv6_address

    @property
    def neighbor_ha_mode(self):
        """Gets the neighbor_ha_mode of this INeighbors.  # noqa: E501


        :return: The neighbor_ha_mode of this INeighbors.  # noqa: E501
        :rtype: INeighborHaMode
        """
        return self._neighbor_ha_mode

    @neighbor_ha_mode.setter
    def neighbor_ha_mode(self, neighbor_ha_mode):
        """Sets the neighbor_ha_mode of this INeighbors.


        :param neighbor_ha_mode: The neighbor_ha_mode of this INeighbors.  # noqa: E501
        :type: INeighborHaMode
        """

        self._neighbor_ha_mode = neighbor_ha_mode

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this INeighbors.  # noqa: E501


        :return: The ipv4_address of this INeighbors.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this INeighbors.


        :param ipv4_address: The ipv4_address of this INeighbors.  # noqa: E501
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def neighbor_advanced(self):
        """Gets the neighbor_advanced of this INeighbors.  # noqa: E501


        :return: The neighbor_advanced of this INeighbors.  # noqa: E501
        :rtype: INeighborAdvanced
        """
        return self._neighbor_advanced

    @neighbor_advanced.setter
    def neighbor_advanced(self, neighbor_advanced):
        """Sets the neighbor_advanced of this INeighbors.


        :param neighbor_advanced: The neighbor_advanced of this INeighbors.  # noqa: E501
        :type: INeighborAdvanced
        """

        self._neighbor_advanced = neighbor_advanced

    @property
    def neighbor_routes(self):
        """Gets the neighbor_routes of this INeighbors.  # noqa: E501


        :return: The neighbor_routes of this INeighbors.  # noqa: E501
        :rtype: INeighborRoutes
        """
        return self._neighbor_routes

    @neighbor_routes.setter
    def neighbor_routes(self, neighbor_routes):
        """Sets the neighbor_routes of this INeighbors.


        :param neighbor_routes: The neighbor_routes of this INeighbors.  # noqa: E501
        :type: INeighborRoutes
        """

        self._neighbor_routes = neighbor_routes

    @property
    def type(self):
        """Gets the type of this INeighbors.  # noqa: E501


        :return: The type of this INeighbors.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this INeighbors.


        :param type: The type of this INeighbors.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def neighbor_filtering(self):
        """Gets the neighbor_filtering of this INeighbors.  # noqa: E501


        :return: The neighbor_filtering of this INeighbors.  # noqa: E501
        :rtype: INeighborFiltering
        """
        return self._neighbor_filtering

    @neighbor_filtering.setter
    def neighbor_filtering(self, neighbor_filtering):
        """Sets the neighbor_filtering of this INeighbors.


        :param neighbor_filtering: The neighbor_filtering of this INeighbors.  # noqa: E501
        :type: INeighborFiltering
        """

        self._neighbor_filtering = neighbor_filtering

    @property
    def neighbor_local_as(self):
        """Gets the neighbor_local_as of this INeighbors.  # noqa: E501


        :return: The neighbor_local_as of this INeighbors.  # noqa: E501
        :rtype: INeighborLocalAs
        """
        return self._neighbor_local_as

    @neighbor_local_as.setter
    def neighbor_local_as(self, neighbor_local_as):
        """Sets the neighbor_local_as of this INeighbors.


        :param neighbor_local_as: The neighbor_local_as of this INeighbors.  # noqa: E501
        :type: INeighborLocalAs
        """

        self._neighbor_local_as = neighbor_local_as

    @property
    def remote_as(self):
        """Gets the remote_as of this INeighbors.  # noqa: E501


        :return: The remote_as of this INeighbors.  # noqa: E501
        :rtype: str
        """
        return self._remote_as

    @remote_as.setter
    def remote_as(self, remote_as):
        """Sets the remote_as of this INeighbors.


        :param remote_as: The remote_as of this INeighbors.  # noqa: E501
        :type: str
        """

        self._remote_as = remote_as

    @property
    def link_local_interface(self):
        """Gets the link_local_interface of this INeighbors.  # noqa: E501


        :return: The link_local_interface of this INeighbors.  # noqa: E501
        :rtype: IFTDInterface
        """
        return self._link_local_interface

    @link_local_interface.setter
    def link_local_interface(self, link_local_interface):
        """Sets the link_local_interface of this INeighbors.


        :param link_local_interface: The link_local_interface of this INeighbors.  # noqa: E501
        :type: IFTDInterface
        """

        self._link_local_interface = link_local_interface

    @property
    def name(self):
        """Gets the name of this INeighbors.  # noqa: E501


        :return: The name of this INeighbors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this INeighbors.


        :param name: The name of this INeighbors.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this INeighbors.  # noqa: E501


        :return: The links of this INeighbors.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this INeighbors.


        :param links: The links of this INeighbors.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this INeighbors.  # noqa: E501


        :return: The id of this INeighbors.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this INeighbors.


        :param id: The id of this INeighbors.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def neighbor_general(self):
        """Gets the neighbor_general of this INeighbors.  # noqa: E501


        :return: The neighbor_general of this INeighbors.  # noqa: E501
        :rtype: INeighborGeneral
        """
        return self._neighbor_general

    @neighbor_general.setter
    def neighbor_general(self, neighbor_general):
        """Sets the neighbor_general of this INeighbors.


        :param neighbor_general: The neighbor_general of this INeighbors.  # noqa: E501
        :type: INeighborGeneral
        """

        self._neighbor_general = neighbor_general

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(INeighbors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, INeighbors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, INeighbors):
            return True

        return self.to_dict() != other.to_dict()
