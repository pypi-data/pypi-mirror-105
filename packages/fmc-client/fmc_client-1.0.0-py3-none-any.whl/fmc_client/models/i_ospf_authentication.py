# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IOspfAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passwd_auth': 'IOspfPasswdAuth',
        'md5_auth_list': 'list[IOspfMD5Auth]',
        'key_chain': 'IOspfKeyChainAuth',
        'area_auth': 'IOspfAreaAuth'
    }

    attribute_map = {
        'passwd_auth': 'passwdAuth',
        'md5_auth_list': 'md5AuthList',
        'key_chain': 'keyChain',
        'area_auth': 'areaAuth'
    }

    def __init__(self, passwd_auth=None, md5_auth_list=None, key_chain=None, area_auth=None, _configuration=None):  # noqa: E501
        """IOspfAuthentication - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._passwd_auth = None
        self._md5_auth_list = None
        self._key_chain = None
        self._area_auth = None
        self.discriminator = None

        if passwd_auth is not None:
            self.passwd_auth = passwd_auth
        if md5_auth_list is not None:
            self.md5_auth_list = md5_auth_list
        if key_chain is not None:
            self.key_chain = key_chain
        if area_auth is not None:
            self.area_auth = area_auth

    @property
    def passwd_auth(self):
        """Gets the passwd_auth of this IOspfAuthentication.  # noqa: E501


        :return: The passwd_auth of this IOspfAuthentication.  # noqa: E501
        :rtype: IOspfPasswdAuth
        """
        return self._passwd_auth

    @passwd_auth.setter
    def passwd_auth(self, passwd_auth):
        """Sets the passwd_auth of this IOspfAuthentication.


        :param passwd_auth: The passwd_auth of this IOspfAuthentication.  # noqa: E501
        :type: IOspfPasswdAuth
        """

        self._passwd_auth = passwd_auth

    @property
    def md5_auth_list(self):
        """Gets the md5_auth_list of this IOspfAuthentication.  # noqa: E501


        :return: The md5_auth_list of this IOspfAuthentication.  # noqa: E501
        :rtype: list[IOspfMD5Auth]
        """
        return self._md5_auth_list

    @md5_auth_list.setter
    def md5_auth_list(self, md5_auth_list):
        """Sets the md5_auth_list of this IOspfAuthentication.


        :param md5_auth_list: The md5_auth_list of this IOspfAuthentication.  # noqa: E501
        :type: list[IOspfMD5Auth]
        """

        self._md5_auth_list = md5_auth_list

    @property
    def key_chain(self):
        """Gets the key_chain of this IOspfAuthentication.  # noqa: E501


        :return: The key_chain of this IOspfAuthentication.  # noqa: E501
        :rtype: IOspfKeyChainAuth
        """
        return self._key_chain

    @key_chain.setter
    def key_chain(self, key_chain):
        """Sets the key_chain of this IOspfAuthentication.


        :param key_chain: The key_chain of this IOspfAuthentication.  # noqa: E501
        :type: IOspfKeyChainAuth
        """

        self._key_chain = key_chain

    @property
    def area_auth(self):
        """Gets the area_auth of this IOspfAuthentication.  # noqa: E501


        :return: The area_auth of this IOspfAuthentication.  # noqa: E501
        :rtype: IOspfAreaAuth
        """
        return self._area_auth

    @area_auth.setter
    def area_auth(self, area_auth):
        """Sets the area_auth of this IOspfAuthentication.


        :param area_auth: The area_auth of this IOspfAuthentication.  # noqa: E501
        :type: IOspfAreaAuth
        """

        self._area_auth = area_auth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOspfAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOspfAuthentication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOspfAuthentication):
            return True

        return self.to_dict() != other.to_dict()
