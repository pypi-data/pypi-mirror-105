# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class ITimeZoneDateRangeFragment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_time': 'str',
        'offset': 'int',
        'end_date_time': 'str'
    }

    attribute_map = {
        'start_date_time': 'startDateTime',
        'offset': 'offset',
        'end_date_time': 'endDateTime'
    }

    def __init__(self, start_date_time=None, offset=None, end_date_time=None, _configuration=None):  # noqa: E501
        """ITimeZoneDateRangeFragment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_date_time = None
        self._offset = None
        self._end_date_time = None
        self.discriminator = None

        if start_date_time is not None:
            self.start_date_time = start_date_time
        if offset is not None:
            self.offset = offset
        if end_date_time is not None:
            self.end_date_time = end_date_time

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ITimeZoneDateRangeFragment.  # noqa: E501

        Represents the date and time (in ISO 8601 format) at which the daylight saving will start.  # noqa: E501

        :return: The start_date_time of this ITimeZoneDateRangeFragment.  # noqa: E501
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ITimeZoneDateRangeFragment.

        Represents the date and time (in ISO 8601 format) at which the daylight saving will start.  # noqa: E501

        :param start_date_time: The start_date_time of this ITimeZoneDateRangeFragment.  # noqa: E501
        :type: str
        """

        self._start_date_time = start_date_time

    @property
    def offset(self):
        """Gets the offset of this ITimeZoneDateRangeFragment.  # noqa: E501

        Number (in minutes) representing the offset from specified time zone. Offset value must be between 1-1440.  # noqa: E501

        :return: The offset of this ITimeZoneDateRangeFragment.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ITimeZoneDateRangeFragment.

        Number (in minutes) representing the offset from specified time zone. Offset value must be between 1-1440.  # noqa: E501

        :param offset: The offset of this ITimeZoneDateRangeFragment.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ITimeZoneDateRangeFragment.  # noqa: E501

        Represents the date and time (in ISO 8601 format) at which the daylight saving with end.  # noqa: E501

        :return: The end_date_time of this ITimeZoneDateRangeFragment.  # noqa: E501
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ITimeZoneDateRangeFragment.

        Represents the date and time (in ISO 8601 format) at which the daylight saving with end.  # noqa: E501

        :param end_date_time: The end_date_time of this ITimeZoneDateRangeFragment.  # noqa: E501
        :type: str
        """

        self._end_date_time = end_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ITimeZoneDateRangeFragment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ITimeZoneDateRangeFragment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ITimeZoneDateRangeFragment):
            return True

        return self.to_dict() != other.to_dict()
