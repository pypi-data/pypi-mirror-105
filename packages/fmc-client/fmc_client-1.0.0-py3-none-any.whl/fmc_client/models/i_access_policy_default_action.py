# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IAccessPolicyDefaultAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_end': 'bool',
        'log_begin': 'bool',
        'metadata': 'IMetadata',
        'snmp_config': 'IReference',
        'intrusion_policy': 'IIntrusionPolicyModel',
        'send_events_to_fmc': 'bool',
        'description': 'str',
        'type': 'str',
        'variable_set': 'IReference',
        'version': 'str',
        'syslog_config': 'IReference',
        'name': 'str',
        'action': 'str',
        'links': 'ILinks',
        'id': 'str'
    }

    attribute_map = {
        'log_end': 'logEnd',
        'log_begin': 'logBegin',
        'metadata': 'metadata',
        'snmp_config': 'snmpConfig',
        'intrusion_policy': 'intrusionPolicy',
        'send_events_to_fmc': 'sendEventsToFMC',
        'description': 'description',
        'type': 'type',
        'variable_set': 'variableSet',
        'version': 'version',
        'syslog_config': 'syslogConfig',
        'name': 'name',
        'action': 'action',
        'links': 'links',
        'id': 'id'
    }

    def __init__(self, log_end=None, log_begin=None, metadata=None, snmp_config=None, intrusion_policy=None, send_events_to_fmc=None, description=None, type=None, variable_set=None, version=None, syslog_config=None, name=None, action=None, links=None, id=None, _configuration=None):  # noqa: E501
        """IAccessPolicyDefaultAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._log_end = None
        self._log_begin = None
        self._metadata = None
        self._snmp_config = None
        self._intrusion_policy = None
        self._send_events_to_fmc = None
        self._description = None
        self._type = None
        self._variable_set = None
        self._version = None
        self._syslog_config = None
        self._name = None
        self._action = None
        self._links = None
        self._id = None
        self.discriminator = None

        if log_end is not None:
            self.log_end = log_end
        if log_begin is not None:
            self.log_begin = log_begin
        if metadata is not None:
            self.metadata = metadata
        if snmp_config is not None:
            self.snmp_config = snmp_config
        if intrusion_policy is not None:
            self.intrusion_policy = intrusion_policy
        if send_events_to_fmc is not None:
            self.send_events_to_fmc = send_events_to_fmc
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if variable_set is not None:
            self.variable_set = variable_set
        if version is not None:
            self.version = version
        if syslog_config is not None:
            self.syslog_config = syslog_config
        if name is not None:
            self.name = name
        self.action = action
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id

    @property
    def log_end(self):
        """Gets the log_end of this IAccessPolicyDefaultAction.  # noqa: E501

        Boolean indicating whether the device will log events at the end of the connection. Default is false.  # noqa: E501

        :return: The log_end of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: bool
        """
        return self._log_end

    @log_end.setter
    def log_end(self, log_end):
        """Sets the log_end of this IAccessPolicyDefaultAction.

        Boolean indicating whether the device will log events at the end of the connection. Default is false.  # noqa: E501

        :param log_end: The log_end of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: bool
        """

        self._log_end = log_end

    @property
    def log_begin(self):
        """Gets the log_begin of this IAccessPolicyDefaultAction.  # noqa: E501

        Boolean indicating whether the device will log events at the beginning of the connection. Default is false.  # noqa: E501

        :return: The log_begin of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: bool
        """
        return self._log_begin

    @log_begin.setter
    def log_begin(self, log_begin):
        """Sets the log_begin of this IAccessPolicyDefaultAction.

        Boolean indicating whether the device will log events at the beginning of the connection. Default is false.  # noqa: E501

        :param log_begin: The log_begin of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: bool
        """

        self._log_begin = log_begin

    @property
    def metadata(self):
        """Gets the metadata of this IAccessPolicyDefaultAction.  # noqa: E501

        Object representing metadata properties of response object.  # noqa: E501

        :return: The metadata of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IAccessPolicyDefaultAction.

        Object representing metadata properties of response object.  # noqa: E501

        :param metadata: The metadata of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def snmp_config(self):
        """Gets the snmp_config of this IAccessPolicyDefaultAction.  # noqa: E501

        Object representing the SNMP alert associated with the access rule.  # noqa: E501

        :return: The snmp_config of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: IReference
        """
        return self._snmp_config

    @snmp_config.setter
    def snmp_config(self, snmp_config):
        """Sets the snmp_config of this IAccessPolicyDefaultAction.

        Object representing the SNMP alert associated with the access rule.  # noqa: E501

        :param snmp_config: The snmp_config of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: IReference
        """

        self._snmp_config = snmp_config

    @property
    def intrusion_policy(self):
        """Gets the intrusion_policy of this IAccessPolicyDefaultAction.  # noqa: E501


        :return: The intrusion_policy of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: IIntrusionPolicyModel
        """
        return self._intrusion_policy

    @intrusion_policy.setter
    def intrusion_policy(self, intrusion_policy):
        """Sets the intrusion_policy of this IAccessPolicyDefaultAction.


        :param intrusion_policy: The intrusion_policy of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: IIntrusionPolicyModel
        """

        self._intrusion_policy = intrusion_policy

    @property
    def send_events_to_fmc(self):
        """Gets the send_events_to_fmc of this IAccessPolicyDefaultAction.  # noqa: E501

        Boolean indicating whether the device will send events to the Firepower Management Center event viewer. Default is false.  # noqa: E501

        :return: The send_events_to_fmc of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: bool
        """
        return self._send_events_to_fmc

    @send_events_to_fmc.setter
    def send_events_to_fmc(self, send_events_to_fmc):
        """Sets the send_events_to_fmc of this IAccessPolicyDefaultAction.

        Boolean indicating whether the device will send events to the Firepower Management Center event viewer. Default is false.  # noqa: E501

        :param send_events_to_fmc: The send_events_to_fmc of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: bool
        """

        self._send_events_to_fmc = send_events_to_fmc

    @property
    def description(self):
        """Gets the description of this IAccessPolicyDefaultAction.  # noqa: E501

        User provided description.  # noqa: E501

        :return: The description of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IAccessPolicyDefaultAction.

        User provided description.  # noqa: E501

        :param description: The description of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this IAccessPolicyDefaultAction.  # noqa: E501

        Response object associated with resource.  # noqa: E501

        :return: The type of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IAccessPolicyDefaultAction.

        Response object associated with resource.  # noqa: E501

        :param type: The type of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def variable_set(self):
        """Gets the variable_set of this IAccessPolicyDefaultAction.  # noqa: E501

        Object representing the variable set associated with the access rule.  # noqa: E501

        :return: The variable_set of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: IReference
        """
        return self._variable_set

    @variable_set.setter
    def variable_set(self, variable_set):
        """Sets the variable_set of this IAccessPolicyDefaultAction.

        Object representing the variable set associated with the access rule.  # noqa: E501

        :param variable_set: The variable_set of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: IReference
        """

        self._variable_set = variable_set

    @property
    def version(self):
        """Gets the version of this IAccessPolicyDefaultAction.  # noqa: E501

        Version number of the response object.  # noqa: E501

        :return: The version of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IAccessPolicyDefaultAction.

        Version number of the response object.  # noqa: E501

        :param version: The version of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def syslog_config(self):
        """Gets the syslog_config of this IAccessPolicyDefaultAction.  # noqa: E501

        Object representing the syslog alert associated with the access rule.  # noqa: E501

        :return: The syslog_config of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: IReference
        """
        return self._syslog_config

    @syslog_config.setter
    def syslog_config(self, syslog_config):
        """Sets the syslog_config of this IAccessPolicyDefaultAction.

        Object representing the syslog alert associated with the access rule.  # noqa: E501

        :param syslog_config: The syslog_config of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: IReference
        """

        self._syslog_config = syslog_config

    @property
    def name(self):
        """Gets the name of this IAccessPolicyDefaultAction.  # noqa: E501

        User chosen resource name.  # noqa: E501

        :return: The name of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IAccessPolicyDefaultAction.

        User chosen resource name.  # noqa: E501

        :param name: The name of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def action(self):
        """Gets the action of this IAccessPolicyDefaultAction.  # noqa: E501

        Specifies the action to take when the conditions defined by the rule are met. One of: BLOCK | TRUST | NETWORK_DISCOVERY | PERMIT.  # noqa: E501

        :return: The action of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IAccessPolicyDefaultAction.

        Specifies the action to take when the conditions defined by the rule are met. One of: BLOCK | TRUST | NETWORK_DISCOVERY | PERMIT.  # noqa: E501

        :param action: The action of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["BLOCK", "TRUST", "PERMIT", "NETWORK_DISCOVERY", "INHERIT_FROM_PARENT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def links(self):
        """Gets the links of this IAccessPolicyDefaultAction.  # noqa: E501

        Object containing links to this resource.  # noqa: E501

        :return: The links of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IAccessPolicyDefaultAction.

        Object containing links to this resource.  # noqa: E501

        :param links: The links of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this IAccessPolicyDefaultAction.  # noqa: E501

        Unique identifier representing resource.  # noqa: E501

        :return: The id of this IAccessPolicyDefaultAction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IAccessPolicyDefaultAction.

        Unique identifier representing resource.  # noqa: E501

        :param id: The id of this IAccessPolicyDefaultAction.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IAccessPolicyDefaultAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IAccessPolicyDefaultAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IAccessPolicyDefaultAction):
            return True

        return self.to_dict() != other.to_dict()
