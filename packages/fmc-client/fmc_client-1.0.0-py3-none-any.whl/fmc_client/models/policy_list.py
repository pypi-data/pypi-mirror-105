# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class PolicyList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standard_access_list_route_sources': 'list[IReference]',
        'metadata': 'Metadata',
        'interfaces': 'list[IReference]',
        'ipv4_prefix_list_route_sources': 'list[IReference]',
        'standard_access_list_next_hops': 'list[IReference]',
        'description': 'str',
        'overrides': 'IOverride',
        'type': 'str',
        'interface_names': 'list[str]',
        'ipv4_prefix_list_addresses': 'list[IReference]',
        'version': 'str',
        'standard_access_list_addresses': 'list[IReference]',
        'match_community_exactly': 'bool',
        'metric': 'int',
        'community_lists': 'list[IReference]',
        'ipv4_prefix_list_nexthops': 'list[IReference]',
        'name': 'str',
        'overridable': 'bool',
        'action': 'str',
        'links': 'Links',
        'tag': 'int',
        'as_path_lists': 'list[IReference]',
        'id': 'str'
    }

    attribute_map = {
        'standard_access_list_route_sources': 'standardAccessListRouteSources',
        'metadata': 'metadata',
        'interfaces': 'interfaces',
        'ipv4_prefix_list_route_sources': 'ipv4PrefixListRouteSources',
        'standard_access_list_next_hops': 'standardAccessListNextHops',
        'description': 'description',
        'overrides': 'overrides',
        'type': 'type',
        'interface_names': 'interfaceNames',
        'ipv4_prefix_list_addresses': 'ipv4PrefixListAddresses',
        'version': 'version',
        'standard_access_list_addresses': 'standardAccessListAddresses',
        'match_community_exactly': 'matchCommunityExactly',
        'metric': 'metric',
        'community_lists': 'communityLists',
        'ipv4_prefix_list_nexthops': 'ipv4PrefixListNexthops',
        'name': 'name',
        'overridable': 'overridable',
        'action': 'action',
        'links': 'links',
        'tag': 'tag',
        'as_path_lists': 'asPathLists',
        'id': 'id'
    }

    def __init__(self, standard_access_list_route_sources=None, metadata=None, interfaces=None, ipv4_prefix_list_route_sources=None, standard_access_list_next_hops=None, description=None, overrides=None, type=None, interface_names=None, ipv4_prefix_list_addresses=None, version=None, standard_access_list_addresses=None, match_community_exactly=None, metric=None, community_lists=None, ipv4_prefix_list_nexthops=None, name=None, overridable=None, action=None, links=None, tag=None, as_path_lists=None, id=None, _configuration=None):  # noqa: E501
        """PolicyList - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._standard_access_list_route_sources = None
        self._metadata = None
        self._interfaces = None
        self._ipv4_prefix_list_route_sources = None
        self._standard_access_list_next_hops = None
        self._description = None
        self._overrides = None
        self._type = None
        self._interface_names = None
        self._ipv4_prefix_list_addresses = None
        self._version = None
        self._standard_access_list_addresses = None
        self._match_community_exactly = None
        self._metric = None
        self._community_lists = None
        self._ipv4_prefix_list_nexthops = None
        self._name = None
        self._overridable = None
        self._action = None
        self._links = None
        self._tag = None
        self._as_path_lists = None
        self._id = None
        self.discriminator = None

        if standard_access_list_route_sources is not None:
            self.standard_access_list_route_sources = standard_access_list_route_sources
        if metadata is not None:
            self.metadata = metadata
        if interfaces is not None:
            self.interfaces = interfaces
        if ipv4_prefix_list_route_sources is not None:
            self.ipv4_prefix_list_route_sources = ipv4_prefix_list_route_sources
        if standard_access_list_next_hops is not None:
            self.standard_access_list_next_hops = standard_access_list_next_hops
        if description is not None:
            self.description = description
        if overrides is not None:
            self.overrides = overrides
        if type is not None:
            self.type = type
        if interface_names is not None:
            self.interface_names = interface_names
        if ipv4_prefix_list_addresses is not None:
            self.ipv4_prefix_list_addresses = ipv4_prefix_list_addresses
        if version is not None:
            self.version = version
        if standard_access_list_addresses is not None:
            self.standard_access_list_addresses = standard_access_list_addresses
        if match_community_exactly is not None:
            self.match_community_exactly = match_community_exactly
        if metric is not None:
            self.metric = metric
        if community_lists is not None:
            self.community_lists = community_lists
        if ipv4_prefix_list_nexthops is not None:
            self.ipv4_prefix_list_nexthops = ipv4_prefix_list_nexthops
        self.name = name
        if overridable is not None:
            self.overridable = overridable
        self.action = action
        if links is not None:
            self.links = links
        if tag is not None:
            self.tag = tag
        if as_path_lists is not None:
            self.as_path_lists = as_path_lists
        if id is not None:
            self.id = id

    @property
    def standard_access_list_route_sources(self):
        """Gets the standard_access_list_route_sources of this PolicyList.  # noqa: E501

        Routes that have been advertised by routers and access servers at the address specified by the access lists.  # noqa: E501

        :return: The standard_access_list_route_sources of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._standard_access_list_route_sources

    @standard_access_list_route_sources.setter
    def standard_access_list_route_sources(self, standard_access_list_route_sources):
        """Sets the standard_access_list_route_sources of this PolicyList.

        Routes that have been advertised by routers and access servers at the address specified by the access lists.  # noqa: E501

        :param standard_access_list_route_sources: The standard_access_list_route_sources of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._standard_access_list_route_sources = standard_access_list_route_sources

    @property
    def metadata(self):
        """Gets the metadata of this PolicyList.  # noqa: E501


        :return: The metadata of this PolicyList.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PolicyList.


        :param metadata: The metadata of this PolicyList.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def interfaces(self):
        """Gets the interfaces of this PolicyList.  # noqa: E501

        Add the Security zones/Interface groups that contain the interfaces through which the device communicates with the management station  # noqa: E501

        :return: The interfaces of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this PolicyList.

        Add the Security zones/Interface groups that contain the interfaces through which the device communicates with the management station  # noqa: E501

        :param interfaces: The interfaces of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._interfaces = interfaces

    @property
    def ipv4_prefix_list_route_sources(self):
        """Gets the ipv4_prefix_list_route_sources of this PolicyList.  # noqa: E501

        Routes that have been advertised by routers and access servers at the address specified by the prefix lists.  # noqa: E501

        :return: The ipv4_prefix_list_route_sources of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_prefix_list_route_sources

    @ipv4_prefix_list_route_sources.setter
    def ipv4_prefix_list_route_sources(self, ipv4_prefix_list_route_sources):
        """Sets the ipv4_prefix_list_route_sources of this PolicyList.

        Routes that have been advertised by routers and access servers at the address specified by the prefix lists.  # noqa: E501

        :param ipv4_prefix_list_route_sources: The ipv4_prefix_list_route_sources of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_prefix_list_route_sources = ipv4_prefix_list_route_sources

    @property
    def standard_access_list_next_hops(self):
        """Gets the standard_access_list_next_hops of this PolicyList.  # noqa: E501

        A next hop router address passed by one of the access lists specified. (standardAccessListNextHops and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :return: The standard_access_list_next_hops of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._standard_access_list_next_hops

    @standard_access_list_next_hops.setter
    def standard_access_list_next_hops(self, standard_access_list_next_hops):
        """Sets the standard_access_list_next_hops of this PolicyList.

        A next hop router address passed by one of the access lists specified. (standardAccessListNextHops and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :param standard_access_list_next_hops: The standard_access_list_next_hops of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._standard_access_list_next_hops = standard_access_list_next_hops

    @property
    def description(self):
        """Gets the description of this PolicyList.  # noqa: E501


        :return: The description of this PolicyList.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyList.


        :param description: The description of this PolicyList.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def overrides(self):
        """Gets the overrides of this PolicyList.  # noqa: E501


        :return: The overrides of this PolicyList.  # noqa: E501
        :rtype: IOverride
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this PolicyList.


        :param overrides: The overrides of this PolicyList.  # noqa: E501
        :type: IOverride
        """

        self._overrides = overrides

    @property
    def type(self):
        """Gets the type of this PolicyList.  # noqa: E501

        PolicyList - type of this object  # noqa: E501

        :return: The type of this PolicyList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicyList.

        PolicyList - type of this object  # noqa: E501

        :param type: The type of this PolicyList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def interface_names(self):
        """Gets the interface_names of this PolicyList.  # noqa: E501

        Interface logical names associated with this object  # noqa: E501

        :return: The interface_names of this PolicyList.  # noqa: E501
        :rtype: list[str]
        """
        return self._interface_names

    @interface_names.setter
    def interface_names(self, interface_names):
        """Sets the interface_names of this PolicyList.

        Interface logical names associated with this object  # noqa: E501

        :param interface_names: The interface_names of this PolicyList.  # noqa: E501
        :type: list[str]
        """

        self._interface_names = interface_names

    @property
    def ipv4_prefix_list_addresses(self):
        """Gets the ipv4_prefix_list_addresses of this PolicyList.  # noqa: E501

        A destination address that is permitted by a prefix list (standardAccessListAddresses and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :return: The ipv4_prefix_list_addresses of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_prefix_list_addresses

    @ipv4_prefix_list_addresses.setter
    def ipv4_prefix_list_addresses(self, ipv4_prefix_list_addresses):
        """Sets the ipv4_prefix_list_addresses of this PolicyList.

        A destination address that is permitted by a prefix list (standardAccessListAddresses and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :param ipv4_prefix_list_addresses: The ipv4_prefix_list_addresses of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_prefix_list_addresses = ipv4_prefix_list_addresses

    @property
    def version(self):
        """Gets the version of this PolicyList.  # noqa: E501


        :return: The version of this PolicyList.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PolicyList.


        :param version: The version of this PolicyList.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def standard_access_list_addresses(self):
        """Gets the standard_access_list_addresses of this PolicyList.  # noqa: E501

        A destination address that is permitted by a standard access list (standardAccessListAddresses and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :return: The standard_access_list_addresses of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._standard_access_list_addresses

    @standard_access_list_addresses.setter
    def standard_access_list_addresses(self, standard_access_list_addresses):
        """Sets the standard_access_list_addresses of this PolicyList.

        A destination address that is permitted by a standard access list (standardAccessListAddresses and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :param standard_access_list_addresses: The standard_access_list_addresses of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._standard_access_list_addresses = standard_access_list_addresses

    @property
    def match_community_exactly(self):
        """Gets the match_community_exactly of this PolicyList.  # noqa: E501

        Match the BGP community exactly with the specified community  # noqa: E501

        :return: The match_community_exactly of this PolicyList.  # noqa: E501
        :rtype: bool
        """
        return self._match_community_exactly

    @match_community_exactly.setter
    def match_community_exactly(self, match_community_exactly):
        """Sets the match_community_exactly of this PolicyList.

        Match the BGP community exactly with the specified community  # noqa: E501

        :param match_community_exactly: The match_community_exactly of this PolicyList.  # noqa: E501
        :type: bool
        """

        self._match_community_exactly = match_community_exactly

    @property
    def metric(self):
        """Gets the metric of this PolicyList.  # noqa: E501

        This setting allows you to match any routes that have a specified metric. The metric values can range from 0 to 4294967295.  # noqa: E501

        :return: The metric of this PolicyList.  # noqa: E501
        :rtype: int
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this PolicyList.

        This setting allows you to match any routes that have a specified metric. The metric values can range from 0 to 4294967295.  # noqa: E501

        :param metric: The metric of this PolicyList.  # noqa: E501
        :type: int
        """

        self._metric = metric

    @property
    def community_lists(self):
        """Gets the community_lists of this PolicyList.  # noqa: E501

        The route can match either community  # noqa: E501

        :return: The community_lists of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._community_lists

    @community_lists.setter
    def community_lists(self, community_lists):
        """Sets the community_lists of this PolicyList.

        The route can match either community  # noqa: E501

        :param community_lists: The community_lists of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._community_lists = community_lists

    @property
    def ipv4_prefix_list_nexthops(self):
        """Gets the ipv4_prefix_list_nexthops of this PolicyList.  # noqa: E501

        A next hop router address passed by one of the prefix lists specified.(standardAccessListNextHops and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :return: The ipv4_prefix_list_nexthops of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._ipv4_prefix_list_nexthops

    @ipv4_prefix_list_nexthops.setter
    def ipv4_prefix_list_nexthops(self, ipv4_prefix_list_nexthops):
        """Sets the ipv4_prefix_list_nexthops of this PolicyList.

        A next hop router address passed by one of the prefix lists specified.(standardAccessListNextHops and ipv4PrefixListAddresses are mutually exclusive)  # noqa: E501

        :param ipv4_prefix_list_nexthops: The ipv4_prefix_list_nexthops of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._ipv4_prefix_list_nexthops = ipv4_prefix_list_nexthops

    @property
    def name(self):
        """Gets the name of this PolicyList.  # noqa: E501

        Name for the policy list object  # noqa: E501

        :return: The name of this PolicyList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyList.

        Name for the policy list object  # noqa: E501

        :param name: The name of this PolicyList.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def overridable(self):
        """Gets the overridable of this PolicyList.  # noqa: E501


        :return: The overridable of this PolicyList.  # noqa: E501
        :rtype: bool
        """
        return self._overridable

    @overridable.setter
    def overridable(self, overridable):
        """Sets the overridable of this PolicyList.


        :param overridable: The overridable of this PolicyList.  # noqa: E501
        :type: bool
        """

        self._overridable = overridable

    @property
    def action(self):
        """Gets the action of this PolicyList.  # noqa: E501

        Action to take for this matching criteria: PERMIT or DENY  # noqa: E501

        :return: The action of this PolicyList.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PolicyList.

        Action to take for this matching criteria: PERMIT or DENY  # noqa: E501

        :param action: The action of this PolicyList.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["PERMIT", "DENY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def links(self):
        """Gets the links of this PolicyList.  # noqa: E501


        :return: The links of this PolicyList.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PolicyList.


        :param links: The links of this PolicyList.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def tag(self):
        """Gets the tag of this PolicyList.  # noqa: E501

        This setting allows you to match any routes that have a specified security group tag. The tag values can range from 0 to 4294967295  # noqa: E501

        :return: The tag of this PolicyList.  # noqa: E501
        :rtype: int
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this PolicyList.

        This setting allows you to match any routes that have a specified security group tag. The tag values can range from 0 to 4294967295  # noqa: E501

        :param tag: The tag of this PolicyList.  # noqa: E501
        :type: int
        """

        self._tag = tag

    @property
    def as_path_lists(self):
        """Gets the as_path_lists of this PolicyList.  # noqa: E501

        BGP autonomous system path for matching criteria.  # noqa: E501

        :return: The as_path_lists of this PolicyList.  # noqa: E501
        :rtype: list[IReference]
        """
        return self._as_path_lists

    @as_path_lists.setter
    def as_path_lists(self, as_path_lists):
        """Sets the as_path_lists of this PolicyList.

        BGP autonomous system path for matching criteria.  # noqa: E501

        :param as_path_lists: The as_path_lists of this PolicyList.  # noqa: E501
        :type: list[IReference]
        """

        self._as_path_lists = as_path_lists

    @property
    def id(self):
        """Gets the id of this PolicyList.  # noqa: E501

        unique object identifier  # noqa: E501

        :return: The id of this PolicyList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyList.

        unique object identifier  # noqa: E501

        :param id: The id of this PolicyList.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyList):
            return True

        return self.to_dict() != other.to_dict()
