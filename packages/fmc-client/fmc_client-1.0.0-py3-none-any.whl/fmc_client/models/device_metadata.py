# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class DeviceMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_user': 'MetadataUser',
        'is_part_of_container': 'bool',
        'inventory_details': 'IDeviceInventoryData',
        'read_only': 'ReadOnly',
        'inventory_data': 'DeviceInventoryData',
        'is_snort3': 'bool',
        'sru_version': 'str',
        'device_serial_number': 'str',
        'chassis_details': 'IDeviceChassisData',
        'vdb_version': 'str',
        'task': 'ITaskStatus',
        'domain': 'Domain',
        'chassis_data': 'DeviceChassisData',
        'is_multi_instance': 'bool',
        'container_details': 'IBaseDevice',
        'snort_version': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'last_user': 'lastUser',
        'is_part_of_container': 'isPartOfContainer',
        'inventory_details': 'inventoryDetails',
        'read_only': 'readOnly',
        'inventory_data': 'inventoryData',
        'is_snort3': 'isSnort3',
        'sru_version': 'sruVersion',
        'device_serial_number': 'deviceSerialNumber',
        'chassis_details': 'chassisDetails',
        'vdb_version': 'vdbVersion',
        'task': 'task',
        'domain': 'domain',
        'chassis_data': 'chassisData',
        'is_multi_instance': 'isMultiInstance',
        'container_details': 'containerDetails',
        'snort_version': 'snortVersion',
        'timestamp': 'timestamp'
    }

    def __init__(self, last_user=None, is_part_of_container=None, inventory_details=None, read_only=None, inventory_data=None, is_snort3=None, sru_version=None, device_serial_number=None, chassis_details=None, vdb_version=None, task=None, domain=None, chassis_data=None, is_multi_instance=None, container_details=None, snort_version=None, timestamp=None, _configuration=None):  # noqa: E501
        """DeviceMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_user = None
        self._is_part_of_container = None
        self._inventory_details = None
        self._read_only = None
        self._inventory_data = None
        self._is_snort3 = None
        self._sru_version = None
        self._device_serial_number = None
        self._chassis_details = None
        self._vdb_version = None
        self._task = None
        self._domain = None
        self._chassis_data = None
        self._is_multi_instance = None
        self._container_details = None
        self._snort_version = None
        self._timestamp = None
        self.discriminator = None

        if last_user is not None:
            self.last_user = last_user
        if is_part_of_container is not None:
            self.is_part_of_container = is_part_of_container
        if inventory_details is not None:
            self.inventory_details = inventory_details
        if read_only is not None:
            self.read_only = read_only
        if inventory_data is not None:
            self.inventory_data = inventory_data
        if is_snort3 is not None:
            self.is_snort3 = is_snort3
        if sru_version is not None:
            self.sru_version = sru_version
        if device_serial_number is not None:
            self.device_serial_number = device_serial_number
        if chassis_details is not None:
            self.chassis_details = chassis_details
        if vdb_version is not None:
            self.vdb_version = vdb_version
        if task is not None:
            self.task = task
        if domain is not None:
            self.domain = domain
        if chassis_data is not None:
            self.chassis_data = chassis_data
        if is_multi_instance is not None:
            self.is_multi_instance = is_multi_instance
        if container_details is not None:
            self.container_details = container_details
        if snort_version is not None:
            self.snort_version = snort_version
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def last_user(self):
        """Gets the last_user of this DeviceMetadata.  # noqa: E501

        The last user who modified this instance.  # noqa: E501

        :return: The last_user of this DeviceMetadata.  # noqa: E501
        :rtype: MetadataUser
        """
        return self._last_user

    @last_user.setter
    def last_user(self, last_user):
        """Sets the last_user of this DeviceMetadata.

        The last user who modified this instance.  # noqa: E501

        :param last_user: The last_user of this DeviceMetadata.  # noqa: E501
        :type: MetadataUser
        """

        self._last_user = last_user

    @property
    def is_part_of_container(self):
        """Gets the is_part_of_container of this DeviceMetadata.  # noqa: E501

        This field indicates whether it is part of any cluster. This will be true for a device which is part of NGFWHA, NGFW cluster and firepower devices which is part of Stack.  # noqa: E501

        :return: The is_part_of_container of this DeviceMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_part_of_container

    @is_part_of_container.setter
    def is_part_of_container(self, is_part_of_container):
        """Sets the is_part_of_container of this DeviceMetadata.

        This field indicates whether it is part of any cluster. This will be true for a device which is part of NGFWHA, NGFW cluster and firepower devices which is part of Stack.  # noqa: E501

        :param is_part_of_container: The is_part_of_container of this DeviceMetadata.  # noqa: E501
        :type: bool
        """

        self._is_part_of_container = is_part_of_container

    @property
    def inventory_details(self):
        """Gets the inventory_details of this DeviceMetadata.  # noqa: E501


        :return: The inventory_details of this DeviceMetadata.  # noqa: E501
        :rtype: IDeviceInventoryData
        """
        return self._inventory_details

    @inventory_details.setter
    def inventory_details(self, inventory_details):
        """Sets the inventory_details of this DeviceMetadata.


        :param inventory_details: The inventory_details of this DeviceMetadata.  # noqa: E501
        :type: IDeviceInventoryData
        """

        self._inventory_details = inventory_details

    @property
    def read_only(self):
        """Gets the read_only of this DeviceMetadata.  # noqa: E501

        Details regarding the read only status of this instance.  # noqa: E501

        :return: The read_only of this DeviceMetadata.  # noqa: E501
        :rtype: ReadOnly
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DeviceMetadata.

        Details regarding the read only status of this instance.  # noqa: E501

        :param read_only: The read_only of this DeviceMetadata.  # noqa: E501
        :type: ReadOnly
        """

        self._read_only = read_only

    @property
    def inventory_data(self):
        """Gets the inventory_data of this DeviceMetadata.  # noqa: E501

        Inventory details of the device.  # noqa: E501

        :return: The inventory_data of this DeviceMetadata.  # noqa: E501
        :rtype: DeviceInventoryData
        """
        return self._inventory_data

    @inventory_data.setter
    def inventory_data(self, inventory_data):
        """Sets the inventory_data of this DeviceMetadata.

        Inventory details of the device.  # noqa: E501

        :param inventory_data: The inventory_data of this DeviceMetadata.  # noqa: E501
        :type: DeviceInventoryData
        """

        self._inventory_data = inventory_data

    @property
    def is_snort3(self):
        """Gets the is_snort3 of this DeviceMetadata.  # noqa: E501


        :return: The is_snort3 of this DeviceMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_snort3

    @is_snort3.setter
    def is_snort3(self, is_snort3):
        """Sets the is_snort3 of this DeviceMetadata.


        :param is_snort3: The is_snort3 of this DeviceMetadata.  # noqa: E501
        :type: bool
        """

        self._is_snort3 = is_snort3

    @property
    def sru_version(self):
        """Gets the sru_version of this DeviceMetadata.  # noqa: E501

        SRU version of a particular device.  # noqa: E501

        :return: The sru_version of this DeviceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._sru_version

    @sru_version.setter
    def sru_version(self, sru_version):
        """Sets the sru_version of this DeviceMetadata.

        SRU version of a particular device.  # noqa: E501

        :param sru_version: The sru_version of this DeviceMetadata.  # noqa: E501
        :type: str
        """

        self._sru_version = sru_version

    @property
    def device_serial_number(self):
        """Gets the device_serial_number of this DeviceMetadata.  # noqa: E501


        :return: The device_serial_number of this DeviceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._device_serial_number

    @device_serial_number.setter
    def device_serial_number(self, device_serial_number):
        """Sets the device_serial_number of this DeviceMetadata.


        :param device_serial_number: The device_serial_number of this DeviceMetadata.  # noqa: E501
        :type: str
        """

        self._device_serial_number = device_serial_number

    @property
    def chassis_details(self):
        """Gets the chassis_details of this DeviceMetadata.  # noqa: E501


        :return: The chassis_details of this DeviceMetadata.  # noqa: E501
        :rtype: IDeviceChassisData
        """
        return self._chassis_details

    @chassis_details.setter
    def chassis_details(self, chassis_details):
        """Sets the chassis_details of this DeviceMetadata.


        :param chassis_details: The chassis_details of this DeviceMetadata.  # noqa: E501
        :type: IDeviceChassisData
        """

        self._chassis_details = chassis_details

    @property
    def vdb_version(self):
        """Gets the vdb_version of this DeviceMetadata.  # noqa: E501

        VDB version of a particular device.  # noqa: E501

        :return: The vdb_version of this DeviceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._vdb_version

    @vdb_version.setter
    def vdb_version(self, vdb_version):
        """Sets the vdb_version of this DeviceMetadata.

        VDB version of a particular device.  # noqa: E501

        :param vdb_version: The vdb_version of this DeviceMetadata.  # noqa: E501
        :type: str
        """

        self._vdb_version = vdb_version

    @property
    def task(self):
        """Gets the task of this DeviceMetadata.  # noqa: E501


        :return: The task of this DeviceMetadata.  # noqa: E501
        :rtype: ITaskStatus
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this DeviceMetadata.


        :param task: The task of this DeviceMetadata.  # noqa: E501
        :type: ITaskStatus
        """

        self._task = task

    @property
    def domain(self):
        """Gets the domain of this DeviceMetadata.  # noqa: E501

        Lists the domains to which this instance belongs if applicable.  # noqa: E501

        :return: The domain of this DeviceMetadata.  # noqa: E501
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DeviceMetadata.

        Lists the domains to which this instance belongs if applicable.  # noqa: E501

        :param domain: The domain of this DeviceMetadata.  # noqa: E501
        :type: Domain
        """

        self._domain = domain

    @property
    def chassis_data(self):
        """Gets the chassis_data of this DeviceMetadata.  # noqa: E501

        This field holds information related to chassis.  # noqa: E501

        :return: The chassis_data of this DeviceMetadata.  # noqa: E501
        :rtype: DeviceChassisData
        """
        return self._chassis_data

    @chassis_data.setter
    def chassis_data(self, chassis_data):
        """Sets the chassis_data of this DeviceMetadata.

        This field holds information related to chassis.  # noqa: E501

        :param chassis_data: The chassis_data of this DeviceMetadata.  # noqa: E501
        :type: DeviceChassisData
        """

        self._chassis_data = chassis_data

    @property
    def is_multi_instance(self):
        """Gets the is_multi_instance of this DeviceMetadata.  # noqa: E501

        Indicated if the device is in multiinstance or native mode.  # noqa: E501

        :return: The is_multi_instance of this DeviceMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_instance

    @is_multi_instance.setter
    def is_multi_instance(self, is_multi_instance):
        """Sets the is_multi_instance of this DeviceMetadata.

        Indicated if the device is in multiinstance or native mode.  # noqa: E501

        :param is_multi_instance: The is_multi_instance of this DeviceMetadata.  # noqa: E501
        :type: bool
        """

        self._is_multi_instance = is_multi_instance

    @property
    def container_details(self):
        """Gets the container_details of this DeviceMetadata.  # noqa: E501

        If 'isPartOfContainer' field is true then this field will hold the information of container.  # noqa: E501

        :return: The container_details of this DeviceMetadata.  # noqa: E501
        :rtype: IBaseDevice
        """
        return self._container_details

    @container_details.setter
    def container_details(self, container_details):
        """Sets the container_details of this DeviceMetadata.

        If 'isPartOfContainer' field is true then this field will hold the information of container.  # noqa: E501

        :param container_details: The container_details of this DeviceMetadata.  # noqa: E501
        :type: IBaseDevice
        """

        self._container_details = container_details

    @property
    def snort_version(self):
        """Gets the snort_version of this DeviceMetadata.  # noqa: E501

        Snort version of a particular device.  # noqa: E501

        :return: The snort_version of this DeviceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._snort_version

    @snort_version.setter
    def snort_version(self, snort_version):
        """Sets the snort_version of this DeviceMetadata.

        Snort version of a particular device.  # noqa: E501

        :param snort_version: The snort_version of this DeviceMetadata.  # noqa: E501
        :type: str
        """

        self._snort_version = snort_version

    @property
    def timestamp(self):
        """Gets the timestamp of this DeviceMetadata.  # noqa: E501

        The last updated timestamp.  # noqa: E501

        :return: The timestamp of this DeviceMetadata.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeviceMetadata.

        The last updated timestamp.  # noqa: E501

        :param timestamp: The timestamp of this DeviceMetadata.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceMetadata):
            return True

        return self.to_dict() != other.to_dict()
