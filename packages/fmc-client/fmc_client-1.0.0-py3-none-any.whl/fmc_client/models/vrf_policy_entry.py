# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class VRFPolicyEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'l2_switching_enabled': 'bool',
        'tooltip': 'str',
        'description': 'str',
        'read_only': 'bool',
        'type': 'str',
        'uuid': 'str',
        'mandatory': 'bool',
        'enabled': 'bool',
        'literal': 'bool',
        'name': 'str',
        'sub_type': 'str',
        'attributes': 'object',
        'id': 'int',
        'position': 'int',
        'interface_entry_list': 'list[VRFInterfaceEntry]',
        'value': 'str'
    }

    attribute_map = {
        'l2_switching_enabled': 'l2SwitchingEnabled',
        'tooltip': 'tooltip',
        'description': 'description',
        'read_only': 'readOnly',
        'type': 'type',
        'uuid': 'uuid',
        'mandatory': 'mandatory',
        'enabled': 'enabled',
        'literal': 'literal',
        'name': 'name',
        'sub_type': 'subType',
        'attributes': 'attributes',
        'id': 'id',
        'position': 'position',
        'interface_entry_list': 'interfaceEntryList',
        'value': 'value'
    }

    def __init__(self, l2_switching_enabled=None, tooltip=None, description=None, read_only=None, type=None, uuid=None, mandatory=None, enabled=None, literal=None, name=None, sub_type=None, attributes=None, id=None, position=None, interface_entry_list=None, value=None, _configuration=None):  # noqa: E501
        """VRFPolicyEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._l2_switching_enabled = None
        self._tooltip = None
        self._description = None
        self._read_only = None
        self._type = None
        self._uuid = None
        self._mandatory = None
        self._enabled = None
        self._literal = None
        self._name = None
        self._sub_type = None
        self._attributes = None
        self._id = None
        self._position = None
        self._interface_entry_list = None
        self._value = None
        self.discriminator = None

        if l2_switching_enabled is not None:
            self.l2_switching_enabled = l2_switching_enabled
        if tooltip is not None:
            self.tooltip = tooltip
        if description is not None:
            self.description = description
        if read_only is not None:
            self.read_only = read_only
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid
        if mandatory is not None:
            self.mandatory = mandatory
        if enabled is not None:
            self.enabled = enabled
        if literal is not None:
            self.literal = literal
        if name is not None:
            self.name = name
        if sub_type is not None:
            self.sub_type = sub_type
        if attributes is not None:
            self.attributes = attributes
        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if interface_entry_list is not None:
            self.interface_entry_list = interface_entry_list
        if value is not None:
            self.value = value

    @property
    def l2_switching_enabled(self):
        """Gets the l2_switching_enabled of this VRFPolicyEntry.  # noqa: E501


        :return: The l2_switching_enabled of this VRFPolicyEntry.  # noqa: E501
        :rtype: bool
        """
        return self._l2_switching_enabled

    @l2_switching_enabled.setter
    def l2_switching_enabled(self, l2_switching_enabled):
        """Sets the l2_switching_enabled of this VRFPolicyEntry.


        :param l2_switching_enabled: The l2_switching_enabled of this VRFPolicyEntry.  # noqa: E501
        :type: bool
        """

        self._l2_switching_enabled = l2_switching_enabled

    @property
    def tooltip(self):
        """Gets the tooltip of this VRFPolicyEntry.  # noqa: E501


        :return: The tooltip of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this VRFPolicyEntry.


        :param tooltip: The tooltip of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def description(self):
        """Gets the description of this VRFPolicyEntry.  # noqa: E501


        :return: The description of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VRFPolicyEntry.


        :param description: The description of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def read_only(self):
        """Gets the read_only of this VRFPolicyEntry.  # noqa: E501


        :return: The read_only of this VRFPolicyEntry.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this VRFPolicyEntry.


        :param read_only: The read_only of this VRFPolicyEntry.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def type(self):
        """Gets the type of this VRFPolicyEntry.  # noqa: E501


        :return: The type of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VRFPolicyEntry.


        :param type: The type of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this VRFPolicyEntry.  # noqa: E501


        :return: The uuid of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this VRFPolicyEntry.


        :param uuid: The uuid of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def mandatory(self):
        """Gets the mandatory of this VRFPolicyEntry.  # noqa: E501


        :return: The mandatory of this VRFPolicyEntry.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this VRFPolicyEntry.


        :param mandatory: The mandatory of this VRFPolicyEntry.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def enabled(self):
        """Gets the enabled of this VRFPolicyEntry.  # noqa: E501


        :return: The enabled of this VRFPolicyEntry.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VRFPolicyEntry.


        :param enabled: The enabled of this VRFPolicyEntry.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def literal(self):
        """Gets the literal of this VRFPolicyEntry.  # noqa: E501


        :return: The literal of this VRFPolicyEntry.  # noqa: E501
        :rtype: bool
        """
        return self._literal

    @literal.setter
    def literal(self, literal):
        """Sets the literal of this VRFPolicyEntry.


        :param literal: The literal of this VRFPolicyEntry.  # noqa: E501
        :type: bool
        """

        self._literal = literal

    @property
    def name(self):
        """Gets the name of this VRFPolicyEntry.  # noqa: E501


        :return: The name of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VRFPolicyEntry.


        :param name: The name of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sub_type(self):
        """Gets the sub_type of this VRFPolicyEntry.  # noqa: E501


        :return: The sub_type of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this VRFPolicyEntry.


        :param sub_type: The sub_type of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def attributes(self):
        """Gets the attributes of this VRFPolicyEntry.  # noqa: E501


        :return: The attributes of this VRFPolicyEntry.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this VRFPolicyEntry.


        :param attributes: The attributes of this VRFPolicyEntry.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this VRFPolicyEntry.  # noqa: E501


        :return: The id of this VRFPolicyEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VRFPolicyEntry.


        :param id: The id of this VRFPolicyEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this VRFPolicyEntry.  # noqa: E501


        :return: The position of this VRFPolicyEntry.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this VRFPolicyEntry.


        :param position: The position of this VRFPolicyEntry.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def interface_entry_list(self):
        """Gets the interface_entry_list of this VRFPolicyEntry.  # noqa: E501


        :return: The interface_entry_list of this VRFPolicyEntry.  # noqa: E501
        :rtype: list[VRFInterfaceEntry]
        """
        return self._interface_entry_list

    @interface_entry_list.setter
    def interface_entry_list(self, interface_entry_list):
        """Sets the interface_entry_list of this VRFPolicyEntry.


        :param interface_entry_list: The interface_entry_list of this VRFPolicyEntry.  # noqa: E501
        :type: list[VRFInterfaceEntry]
        """

        self._interface_entry_list = interface_entry_list

    @property
    def value(self):
        """Gets the value of this VRFPolicyEntry.  # noqa: E501


        :return: The value of this VRFPolicyEntry.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this VRFPolicyEntry.


        :param value: The value of this VRFPolicyEntry.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VRFPolicyEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VRFPolicyEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VRFPolicyEntry):
            return True

        return self.to_dict() != other.to_dict()
