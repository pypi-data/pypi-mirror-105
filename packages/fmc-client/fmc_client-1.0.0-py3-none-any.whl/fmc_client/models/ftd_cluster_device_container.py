# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class FTDClusterDeviceContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master_device': 'IDevice',
        'metadata': 'IMetadata',
        'model_id': 'str',
        'advanced': 'IAdvanced',
        'description': 'str',
        'slave_devices': 'list[IDevice]',
        'model_type': 'str',
        'type': 'str',
        'version': 'str',
        'sw_version': 'str',
        'health_status': 'str',
        'health_policy': 'IHealthPolicy',
        'name': 'str',
        'links': 'ILinks',
        'model': 'str',
        'model_number': 'str',
        'id': 'str',
        'access_policy': 'IPolicyModel'
    }

    attribute_map = {
        'master_device': 'masterDevice',
        'metadata': 'metadata',
        'model_id': 'modelId',
        'advanced': 'advanced',
        'description': 'description',
        'slave_devices': 'slaveDevices',
        'model_type': 'modelType',
        'type': 'type',
        'version': 'version',
        'sw_version': 'sw_version',
        'health_status': 'healthStatus',
        'health_policy': 'healthPolicy',
        'name': 'name',
        'links': 'links',
        'model': 'model',
        'model_number': 'modelNumber',
        'id': 'id',
        'access_policy': 'accessPolicy'
    }

    def __init__(self, master_device=None, metadata=None, model_id=None, advanced=None, description=None, slave_devices=None, model_type=None, type=None, version=None, sw_version=None, health_status=None, health_policy=None, name=None, links=None, model=None, model_number=None, id=None, access_policy=None, _configuration=None):  # noqa: E501
        """FTDClusterDeviceContainer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._master_device = None
        self._metadata = None
        self._model_id = None
        self._advanced = None
        self._description = None
        self._slave_devices = None
        self._model_type = None
        self._type = None
        self._version = None
        self._sw_version = None
        self._health_status = None
        self._health_policy = None
        self._name = None
        self._links = None
        self._model = None
        self._model_number = None
        self._id = None
        self._access_policy = None
        self.discriminator = None

        self.master_device = master_device
        if metadata is not None:
            self.metadata = metadata
        if model_id is not None:
            self.model_id = model_id
        if advanced is not None:
            self.advanced = advanced
        if description is not None:
            self.description = description
        self.slave_devices = slave_devices
        if model_type is not None:
            self.model_type = model_type
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if sw_version is not None:
            self.sw_version = sw_version
        if health_status is not None:
            self.health_status = health_status
        if health_policy is not None:
            self.health_policy = health_policy
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if model is not None:
            self.model = model
        if model_number is not None:
            self.model_number = model_number
        if id is not None:
            self.id = id
        if access_policy is not None:
            self.access_policy = access_policy

    @property
    def master_device(self):
        """Gets the master_device of this FTDClusterDeviceContainer.  # noqa: E501

        Current master device ID  # noqa: E501

        :return: The master_device of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: IDevice
        """
        return self._master_device

    @master_device.setter
    def master_device(self, master_device):
        """Sets the master_device of this FTDClusterDeviceContainer.

        Current master device ID  # noqa: E501

        :param master_device: The master_device of this FTDClusterDeviceContainer.  # noqa: E501
        :type: IDevice
        """
        if self._configuration.client_side_validation and master_device is None:
            raise ValueError("Invalid value for `master_device`, must not be `None`")  # noqa: E501

        self._master_device = master_device

    @property
    def metadata(self):
        """Gets the metadata of this FTDClusterDeviceContainer.  # noqa: E501

        Object representing metadata properties of response object.  # noqa: E501

        :return: The metadata of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FTDClusterDeviceContainer.

        Object representing metadata properties of response object.  # noqa: E501

        :param metadata: The metadata of this FTDClusterDeviceContainer.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def model_id(self):
        """Gets the model_id of this FTDClusterDeviceContainer.  # noqa: E501

        Model ID  # noqa: E501

        :return: The model_id of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this FTDClusterDeviceContainer.

        Model ID  # noqa: E501

        :param model_id: The model_id of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def advanced(self):
        """Gets the advanced of this FTDClusterDeviceContainer.  # noqa: E501

        Object representing Device Advanced Configuration.  # noqa: E501

        :return: The advanced of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: IAdvanced
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this FTDClusterDeviceContainer.

        Object representing Device Advanced Configuration.  # noqa: E501

        :param advanced: The advanced of this FTDClusterDeviceContainer.  # noqa: E501
        :type: IAdvanced
        """

        self._advanced = advanced

    @property
    def description(self):
        """Gets the description of this FTDClusterDeviceContainer.  # noqa: E501

        User provided resource description.  # noqa: E501

        :return: The description of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FTDClusterDeviceContainer.

        User provided resource description.  # noqa: E501

        :param description: The description of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def slave_devices(self):
        """Gets the slave_devices of this FTDClusterDeviceContainer.  # noqa: E501

        List of slave devices  # noqa: E501

        :return: The slave_devices of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: list[IDevice]
        """
        return self._slave_devices

    @slave_devices.setter
    def slave_devices(self, slave_devices):
        """Sets the slave_devices of this FTDClusterDeviceContainer.

        List of slave devices  # noqa: E501

        :param slave_devices: The slave_devices of this FTDClusterDeviceContainer.  # noqa: E501
        :type: list[IDevice]
        """
        if self._configuration.client_side_validation and slave_devices is None:
            raise ValueError("Invalid value for `slave_devices`, must not be `None`")  # noqa: E501

        self._slave_devices = slave_devices

    @property
    def model_type(self):
        """Gets the model_type of this FTDClusterDeviceContainer.  # noqa: E501

        Model type of the registered device cluster.  # noqa: E501

        :return: The model_type of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this FTDClusterDeviceContainer.

        Model type of the registered device cluster.  # noqa: E501

        :param model_type: The model_type of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def type(self):
        """Gets the type of this FTDClusterDeviceContainer.  # noqa: E501

        Type associated with resource: DeviceCluster  # noqa: E501

        :return: The type of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FTDClusterDeviceContainer.

        Type associated with resource: DeviceCluster  # noqa: E501

        :param type: The type of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this FTDClusterDeviceContainer.  # noqa: E501

        Version number of the response object.  # noqa: E501

        :return: The version of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FTDClusterDeviceContainer.

        Version number of the response object.  # noqa: E501

        :param version: The version of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def sw_version(self):
        """Gets the sw_version of this FTDClusterDeviceContainer.  # noqa: E501

        FTD Cluster version  # noqa: E501

        :return: The sw_version of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._sw_version

    @sw_version.setter
    def sw_version(self, sw_version):
        """Sets the sw_version of this FTDClusterDeviceContainer.

        FTD Cluster version  # noqa: E501

        :param sw_version: The sw_version of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._sw_version = sw_version

    @property
    def health_status(self):
        """Gets the health_status of this FTDClusterDeviceContainer.  # noqa: E501

        Current health status of the device, for e.g. green  # noqa: E501

        :return: The health_status of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this FTDClusterDeviceContainer.

        Current health status of the device, for e.g. green  # noqa: E501

        :param health_status: The health_status of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._health_status = health_status

    @property
    def health_policy(self):
        """Gets the health_policy of this FTDClusterDeviceContainer.  # noqa: E501

        Object representing the system health policy applied to the registered device cluster.  # noqa: E501

        :return: The health_policy of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: IHealthPolicy
        """
        return self._health_policy

    @health_policy.setter
    def health_policy(self, health_policy):
        """Sets the health_policy of this FTDClusterDeviceContainer.

        Object representing the system health policy applied to the registered device cluster.  # noqa: E501

        :param health_policy: The health_policy of this FTDClusterDeviceContainer.  # noqa: E501
        :type: IHealthPolicy
        """

        self._health_policy = health_policy

    @property
    def name(self):
        """Gets the name of this FTDClusterDeviceContainer.  # noqa: E501

        FTD Cluster name.  # noqa: E501

        :return: The name of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FTDClusterDeviceContainer.

        FTD Cluster name.  # noqa: E501

        :param name: The name of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this FTDClusterDeviceContainer.  # noqa: E501

        Object containing related links.  # noqa: E501

        :return: The links of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FTDClusterDeviceContainer.

        Object containing related links.  # noqa: E501

        :param links: The links of this FTDClusterDeviceContainer.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def model(self):
        """Gets the model of this FTDClusterDeviceContainer.  # noqa: E501

        Cisco device model name, for e.g. Cisco Firepower 9000 Series SM-24 Threat Defense  # noqa: E501

        :return: The model of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this FTDClusterDeviceContainer.

        Cisco device model name, for e.g. Cisco Firepower 9000 Series SM-24 Threat Defense  # noqa: E501

        :param model: The model of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def model_number(self):
        """Gets the model_number of this FTDClusterDeviceContainer.  # noqa: E501

        Model number of the registered device.  # noqa: E501

        :return: The model_number of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this FTDClusterDeviceContainer.

        Model number of the registered device.  # noqa: E501

        :param model_number: The model_number of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def id(self):
        """Gets the id of this FTDClusterDeviceContainer.  # noqa: E501

        Unique identifier of response object.  # noqa: E501

        :return: The id of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FTDClusterDeviceContainer.

        Unique identifier of response object.  # noqa: E501

        :param id: The id of this FTDClusterDeviceContainer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def access_policy(self):
        """Gets the access_policy of this FTDClusterDeviceContainer.  # noqa: E501

        Object representing the currently assigned access control policy.  # noqa: E501

        :return: The access_policy of this FTDClusterDeviceContainer.  # noqa: E501
        :rtype: IPolicyModel
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this FTDClusterDeviceContainer.

        Object representing the currently assigned access control policy.  # noqa: E501

        :param access_policy: The access_policy of this FTDClusterDeviceContainer.  # noqa: E501
        :type: IPolicyModel
        """

        self._access_policy = access_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FTDClusterDeviceContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FTDClusterDeviceContainer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FTDClusterDeviceContainer):
            return True

        return self.to_dict() != other.to_dict()
