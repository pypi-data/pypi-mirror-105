# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class RESTFeedProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'llfeed_property': 'LLFeedProperty',
        'expiration_time': 'int',
        'publish': 'bool',
        'action': 'str',
        'whitelist': 'bool',
        'ttl': 'int',
        'tags': 'LLTags'
    }

    attribute_map = {
        'llfeed_property': 'llfeedProperty',
        'expiration_time': 'expirationTime',
        'publish': 'publish',
        'action': 'action',
        'whitelist': 'whitelist',
        'ttl': 'ttl',
        'tags': 'tags'
    }

    def __init__(self, llfeed_property=None, expiration_time=None, publish=None, action=None, whitelist=None, ttl=None, tags=None, _configuration=None):  # noqa: E501
        """RESTFeedProperty - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._llfeed_property = None
        self._expiration_time = None
        self._publish = None
        self._action = None
        self._whitelist = None
        self._ttl = None
        self._tags = None
        self.discriminator = None

        if llfeed_property is not None:
            self.llfeed_property = llfeed_property
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if publish is not None:
            self.publish = publish
        if action is not None:
            self.action = action
        if whitelist is not None:
            self.whitelist = whitelist
        if ttl is not None:
            self.ttl = ttl
        if tags is not None:
            self.tags = tags

    @property
    def llfeed_property(self):
        """Gets the llfeed_property of this RESTFeedProperty.  # noqa: E501


        :return: The llfeed_property of this RESTFeedProperty.  # noqa: E501
        :rtype: LLFeedProperty
        """
        return self._llfeed_property

    @llfeed_property.setter
    def llfeed_property(self, llfeed_property):
        """Sets the llfeed_property of this RESTFeedProperty.


        :param llfeed_property: The llfeed_property of this RESTFeedProperty.  # noqa: E501
        :type: LLFeedProperty
        """

        self._llfeed_property = llfeed_property

    @property
    def expiration_time(self):
        """Gets the expiration_time of this RESTFeedProperty.  # noqa: E501


        :return: The expiration_time of this RESTFeedProperty.  # noqa: E501
        :rtype: int
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this RESTFeedProperty.


        :param expiration_time: The expiration_time of this RESTFeedProperty.  # noqa: E501
        :type: int
        """

        self._expiration_time = expiration_time

    @property
    def publish(self):
        """Gets the publish of this RESTFeedProperty.  # noqa: E501


        :return: The publish of this RESTFeedProperty.  # noqa: E501
        :rtype: bool
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this RESTFeedProperty.


        :param publish: The publish of this RESTFeedProperty.  # noqa: E501
        :type: bool
        """

        self._publish = publish

    @property
    def action(self):
        """Gets the action of this RESTFeedProperty.  # noqa: E501


        :return: The action of this RESTFeedProperty.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RESTFeedProperty.


        :param action: The action of this RESTFeedProperty.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def whitelist(self):
        """Gets the whitelist of this RESTFeedProperty.  # noqa: E501


        :return: The whitelist of this RESTFeedProperty.  # noqa: E501
        :rtype: bool
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist):
        """Sets the whitelist of this RESTFeedProperty.


        :param whitelist: The whitelist of this RESTFeedProperty.  # noqa: E501
        :type: bool
        """

        self._whitelist = whitelist

    @property
    def ttl(self):
        """Gets the ttl of this RESTFeedProperty.  # noqa: E501


        :return: The ttl of this RESTFeedProperty.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this RESTFeedProperty.


        :param ttl: The ttl of this RESTFeedProperty.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def tags(self):
        """Gets the tags of this RESTFeedProperty.  # noqa: E501


        :return: The tags of this RESTFeedProperty.  # noqa: E501
        :rtype: LLTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RESTFeedProperty.


        :param tags: The tags of this RESTFeedProperty.  # noqa: E501
        :type: LLTags
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RESTFeedProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RESTFeedProperty):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RESTFeedProperty):
            return True

        return self.to_dict() != other.to_dict()
