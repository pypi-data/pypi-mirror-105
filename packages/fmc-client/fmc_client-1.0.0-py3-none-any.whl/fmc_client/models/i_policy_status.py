# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IPolicyStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'traffic_interrupting': 'bool',
        'up_to_date': 'bool',
        'version_time_stamp': 'int',
        'referred_policy_list': 'list[IPolicyStatus]',
        'policy': 'IPolicyModel'
    }

    attribute_map = {
        'traffic_interrupting': 'trafficInterrupting',
        'up_to_date': 'upToDate',
        'version_time_stamp': 'versionTimeStamp',
        'referred_policy_list': 'referredPolicyList',
        'policy': 'policy'
    }

    def __init__(self, traffic_interrupting=None, up_to_date=None, version_time_stamp=None, referred_policy_list=None, policy=None, _configuration=None):  # noqa: E501
        """IPolicyStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._traffic_interrupting = None
        self._up_to_date = None
        self._version_time_stamp = None
        self._referred_policy_list = None
        self._policy = None
        self.discriminator = None

        if traffic_interrupting is not None:
            self.traffic_interrupting = traffic_interrupting
        if up_to_date is not None:
            self.up_to_date = up_to_date
        if version_time_stamp is not None:
            self.version_time_stamp = version_time_stamp
        if referred_policy_list is not None:
            self.referred_policy_list = referred_policy_list
        if policy is not None:
            self.policy = policy

    @property
    def traffic_interrupting(self):
        """Gets the traffic_interrupting of this IPolicyStatus.  # noqa: E501

        Boolean indicating a deployment can cause traffic interruption.  # noqa: E501

        :return: The traffic_interrupting of this IPolicyStatus.  # noqa: E501
        :rtype: bool
        """
        return self._traffic_interrupting

    @traffic_interrupting.setter
    def traffic_interrupting(self, traffic_interrupting):
        """Sets the traffic_interrupting of this IPolicyStatus.

        Boolean indicating a deployment can cause traffic interruption.  # noqa: E501

        :param traffic_interrupting: The traffic_interrupting of this IPolicyStatus.  # noqa: E501
        :type: bool
        """

        self._traffic_interrupting = traffic_interrupting

    @property
    def up_to_date(self):
        """Gets the up_to_date of this IPolicyStatus.  # noqa: E501

        Boolean indicating whether the policy is out-of-date.  # noqa: E501

        :return: The up_to_date of this IPolicyStatus.  # noqa: E501
        :rtype: bool
        """
        return self._up_to_date

    @up_to_date.setter
    def up_to_date(self, up_to_date):
        """Sets the up_to_date of this IPolicyStatus.

        Boolean indicating whether the policy is out-of-date.  # noqa: E501

        :param up_to_date: The up_to_date of this IPolicyStatus.  # noqa: E501
        :type: bool
        """

        self._up_to_date = up_to_date

    @property
    def version_time_stamp(self):
        """Gets the version_time_stamp of this IPolicyStatus.  # noqa: E501

        Epoch time, indicating last modified time of the policy.  # noqa: E501

        :return: The version_time_stamp of this IPolicyStatus.  # noqa: E501
        :rtype: int
        """
        return self._version_time_stamp

    @version_time_stamp.setter
    def version_time_stamp(self, version_time_stamp):
        """Sets the version_time_stamp of this IPolicyStatus.

        Epoch time, indicating last modified time of the policy.  # noqa: E501

        :param version_time_stamp: The version_time_stamp of this IPolicyStatus.  # noqa: E501
        :type: int
        """

        self._version_time_stamp = version_time_stamp

    @property
    def referred_policy_list(self):
        """Gets the referred_policy_list of this IPolicyStatus.  # noqa: E501

        List of PolicyStatus objects which are referred by the policy.  # noqa: E501

        :return: The referred_policy_list of this IPolicyStatus.  # noqa: E501
        :rtype: list[IPolicyStatus]
        """
        return self._referred_policy_list

    @referred_policy_list.setter
    def referred_policy_list(self, referred_policy_list):
        """Sets the referred_policy_list of this IPolicyStatus.

        List of PolicyStatus objects which are referred by the policy.  # noqa: E501

        :param referred_policy_list: The referred_policy_list of this IPolicyStatus.  # noqa: E501
        :type: list[IPolicyStatus]
        """

        self._referred_policy_list = referred_policy_list

    @property
    def policy(self):
        """Gets the policy of this IPolicyStatus.  # noqa: E501

        Object which contains Policy Information such as id, name and policy type.  # noqa: E501

        :return: The policy of this IPolicyStatus.  # noqa: E501
        :rtype: IPolicyModel
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this IPolicyStatus.

        Object which contains Policy Information such as id, name and policy type.  # noqa: E501

        :param policy: The policy of this IPolicyStatus.  # noqa: E501
        :type: IPolicyModel
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPolicyStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPolicyStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPolicyStatus):
            return True

        return self.to_dict() != other.to_dict()
