# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class DeploymentRequestMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_user': 'MetadataUser',
        'task': 'TaskStatus',
        'domain': 'Domain',
        'read_only': 'ReadOnly',
        'timestamp': 'int'
    }

    attribute_map = {
        'last_user': 'lastUser',
        'task': 'task',
        'domain': 'domain',
        'read_only': 'readOnly',
        'timestamp': 'timestamp'
    }

    def __init__(self, last_user=None, task=None, domain=None, read_only=None, timestamp=None, _configuration=None):  # noqa: E501
        """DeploymentRequestMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_user = None
        self._task = None
        self._domain = None
        self._read_only = None
        self._timestamp = None
        self.discriminator = None

        if last_user is not None:
            self.last_user = last_user
        if task is not None:
            self.task = task
        if domain is not None:
            self.domain = domain
        if read_only is not None:
            self.read_only = read_only
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def last_user(self):
        """Gets the last_user of this DeploymentRequestMetadata.  # noqa: E501


        :return: The last_user of this DeploymentRequestMetadata.  # noqa: E501
        :rtype: MetadataUser
        """
        return self._last_user

    @last_user.setter
    def last_user(self, last_user):
        """Sets the last_user of this DeploymentRequestMetadata.


        :param last_user: The last_user of this DeploymentRequestMetadata.  # noqa: E501
        :type: MetadataUser
        """

        self._last_user = last_user

    @property
    def task(self):
        """Gets the task of this DeploymentRequestMetadata.  # noqa: E501


        :return: The task of this DeploymentRequestMetadata.  # noqa: E501
        :rtype: TaskStatus
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this DeploymentRequestMetadata.


        :param task: The task of this DeploymentRequestMetadata.  # noqa: E501
        :type: TaskStatus
        """

        self._task = task

    @property
    def domain(self):
        """Gets the domain of this DeploymentRequestMetadata.  # noqa: E501


        :return: The domain of this DeploymentRequestMetadata.  # noqa: E501
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DeploymentRequestMetadata.


        :param domain: The domain of this DeploymentRequestMetadata.  # noqa: E501
        :type: Domain
        """

        self._domain = domain

    @property
    def read_only(self):
        """Gets the read_only of this DeploymentRequestMetadata.  # noqa: E501


        :return: The read_only of this DeploymentRequestMetadata.  # noqa: E501
        :rtype: ReadOnly
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DeploymentRequestMetadata.


        :param read_only: The read_only of this DeploymentRequestMetadata.  # noqa: E501
        :type: ReadOnly
        """

        self._read_only = read_only

    @property
    def timestamp(self):
        """Gets the timestamp of this DeploymentRequestMetadata.  # noqa: E501


        :return: The timestamp of this DeploymentRequestMetadata.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeploymentRequestMetadata.


        :param timestamp: The timestamp of this DeploymentRequestMetadata.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentRequestMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentRequestMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentRequestMetadata):
            return True

        return self.to_dict() != other.to_dict()
