# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class FTDBridgeGroupInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'IMetadata',
        'description': 'str',
        'type': 'str',
        'enabled': 'bool',
        'mtu': 'int',
        'mode': 'str',
        'fmc_access_config': 'IFMCAccessConfig',
        'arp_config': 'list[IARPConfigContainer]',
        'selected_interfaces': 'list[IInterface]',
        'ipv4': 'IIPv4Container',
        'ifname': 'str',
        'ipv6': 'IIPv6Container',
        'links': 'ILinks',
        'id': 'str',
        'management_only': 'bool',
        'mac_learn': 'bool',
        'enable_sgt_propagate': 'bool',
        'enable_anti_spoofing': 'bool',
        'security_zone': 'ISecurityZoneObjectModel',
        'active_mac_address': 'str',
        'fragment_reassembly': 'bool',
        'mac_table': 'list[str]',
        'bridge_group_id': 'int',
        'standby_mac_address': 'str',
        'ip_address': 'str',
        'enable_dns_lookup': 'bool',
        'override_default_fragment_setting': 'IOverrideDefaultFragmentSetting',
        'version': 'str',
        'name': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'description': 'description',
        'type': 'type',
        'enabled': 'enabled',
        'mtu': 'MTU',
        'mode': 'mode',
        'fmc_access_config': 'fmcAccessConfig',
        'arp_config': 'arpConfig',
        'selected_interfaces': 'selectedInterfaces',
        'ipv4': 'ipv4',
        'ifname': 'ifname',
        'ipv6': 'ipv6',
        'links': 'links',
        'id': 'id',
        'management_only': 'managementOnly',
        'mac_learn': 'macLearn',
        'enable_sgt_propagate': 'enableSGTPropagate',
        'enable_anti_spoofing': 'enableAntiSpoofing',
        'security_zone': 'securityZone',
        'active_mac_address': 'activeMACAddress',
        'fragment_reassembly': 'fragmentReassembly',
        'mac_table': 'macTable',
        'bridge_group_id': 'bridgeGroupId',
        'standby_mac_address': 'standbyMACAddress',
        'ip_address': 'ipAddress',
        'enable_dns_lookup': 'enableDNSLookup',
        'override_default_fragment_setting': 'overrideDefaultFragmentSetting',
        'version': 'version',
        'name': 'name'
    }

    def __init__(self, metadata=None, description=None, type=None, enabled=None, mtu=None, mode=None, fmc_access_config=None, arp_config=None, selected_interfaces=None, ipv4=None, ifname=None, ipv6=None, links=None, id=None, management_only=None, mac_learn=None, enable_sgt_propagate=None, enable_anti_spoofing=None, security_zone=None, active_mac_address=None, fragment_reassembly=None, mac_table=None, bridge_group_id=None, standby_mac_address=None, ip_address=None, enable_dns_lookup=None, override_default_fragment_setting=None, version=None, name=None, _configuration=None):  # noqa: E501
        """FTDBridgeGroupInterface - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._description = None
        self._type = None
        self._enabled = None
        self._mtu = None
        self._mode = None
        self._fmc_access_config = None
        self._arp_config = None
        self._selected_interfaces = None
        self._ipv4 = None
        self._ifname = None
        self._ipv6 = None
        self._links = None
        self._id = None
        self._management_only = None
        self._mac_learn = None
        self._enable_sgt_propagate = None
        self._enable_anti_spoofing = None
        self._security_zone = None
        self._active_mac_address = None
        self._fragment_reassembly = None
        self._mac_table = None
        self._bridge_group_id = None
        self._standby_mac_address = None
        self._ip_address = None
        self._enable_dns_lookup = None
        self._override_default_fragment_setting = None
        self._version = None
        self._name = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if enabled is not None:
            self.enabled = enabled
        if mtu is not None:
            self.mtu = mtu
        if mode is not None:
            self.mode = mode
        if fmc_access_config is not None:
            self.fmc_access_config = fmc_access_config
        if arp_config is not None:
            self.arp_config = arp_config
        if selected_interfaces is not None:
            self.selected_interfaces = selected_interfaces
        if ipv4 is not None:
            self.ipv4 = ipv4
        if ifname is not None:
            self.ifname = ifname
        if ipv6 is not None:
            self.ipv6 = ipv6
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if management_only is not None:
            self.management_only = management_only
        if mac_learn is not None:
            self.mac_learn = mac_learn
        if enable_sgt_propagate is not None:
            self.enable_sgt_propagate = enable_sgt_propagate
        if enable_anti_spoofing is not None:
            self.enable_anti_spoofing = enable_anti_spoofing
        if security_zone is not None:
            self.security_zone = security_zone
        if active_mac_address is not None:
            self.active_mac_address = active_mac_address
        if fragment_reassembly is not None:
            self.fragment_reassembly = fragment_reassembly
        if mac_table is not None:
            self.mac_table = mac_table
        if bridge_group_id is not None:
            self.bridge_group_id = bridge_group_id
        if standby_mac_address is not None:
            self.standby_mac_address = standby_mac_address
        if ip_address is not None:
            self.ip_address = ip_address
        if enable_dns_lookup is not None:
            self.enable_dns_lookup = enable_dns_lookup
        if override_default_fragment_setting is not None:
            self.override_default_fragment_setting = override_default_fragment_setting
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name

    @property
    def metadata(self):
        """Gets the metadata of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The metadata of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: IMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FTDBridgeGroupInterface.


        :param metadata: The metadata of this FTDBridgeGroupInterface.  # noqa: E501
        :type: IMetadata
        """

        self._metadata = metadata

    @property
    def description(self):
        """Gets the description of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The description of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FTDBridgeGroupInterface.


        :param description: The description of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The type of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FTDBridgeGroupInterface.


        :param type: The type of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def enabled(self):
        """Gets the enabled of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The enabled of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FTDBridgeGroupInterface.


        :param enabled: The enabled of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def mtu(self):
        """Gets the mtu of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The mtu of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this FTDBridgeGroupInterface.


        :param mtu: The mtu of this FTDBridgeGroupInterface.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def mode(self):
        """Gets the mode of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The mode of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this FTDBridgeGroupInterface.


        :param mode: The mode of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """
        allowed_values = ["INLINE", "PASSIVE", "TAP", "ERSPAN", "NONE", "SWITCHPORT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def fmc_access_config(self):
        """Gets the fmc_access_config of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The fmc_access_config of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: IFMCAccessConfig
        """
        return self._fmc_access_config

    @fmc_access_config.setter
    def fmc_access_config(self, fmc_access_config):
        """Sets the fmc_access_config of this FTDBridgeGroupInterface.


        :param fmc_access_config: The fmc_access_config of this FTDBridgeGroupInterface.  # noqa: E501
        :type: IFMCAccessConfig
        """

        self._fmc_access_config = fmc_access_config

    @property
    def arp_config(self):
        """Gets the arp_config of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The arp_config of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: list[IARPConfigContainer]
        """
        return self._arp_config

    @arp_config.setter
    def arp_config(self, arp_config):
        """Sets the arp_config of this FTDBridgeGroupInterface.


        :param arp_config: The arp_config of this FTDBridgeGroupInterface.  # noqa: E501
        :type: list[IARPConfigContainer]
        """

        self._arp_config = arp_config

    @property
    def selected_interfaces(self):
        """Gets the selected_interfaces of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The selected_interfaces of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: list[IInterface]
        """
        return self._selected_interfaces

    @selected_interfaces.setter
    def selected_interfaces(self, selected_interfaces):
        """Sets the selected_interfaces of this FTDBridgeGroupInterface.


        :param selected_interfaces: The selected_interfaces of this FTDBridgeGroupInterface.  # noqa: E501
        :type: list[IInterface]
        """

        self._selected_interfaces = selected_interfaces

    @property
    def ipv4(self):
        """Gets the ipv4 of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The ipv4 of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: IIPv4Container
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this FTDBridgeGroupInterface.


        :param ipv4: The ipv4 of this FTDBridgeGroupInterface.  # noqa: E501
        :type: IIPv4Container
        """

        self._ipv4 = ipv4

    @property
    def ifname(self):
        """Gets the ifname of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The ifname of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._ifname

    @ifname.setter
    def ifname(self, ifname):
        """Sets the ifname of this FTDBridgeGroupInterface.


        :param ifname: The ifname of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._ifname = ifname

    @property
    def ipv6(self):
        """Gets the ipv6 of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The ipv6 of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: IIPv6Container
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this FTDBridgeGroupInterface.


        :param ipv6: The ipv6 of this FTDBridgeGroupInterface.  # noqa: E501
        :type: IIPv6Container
        """

        self._ipv6 = ipv6

    @property
    def links(self):
        """Gets the links of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The links of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FTDBridgeGroupInterface.


        :param links: The links of this FTDBridgeGroupInterface.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The id of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FTDBridgeGroupInterface.


        :param id: The id of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def management_only(self):
        """Gets the management_only of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The management_only of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._management_only

    @management_only.setter
    def management_only(self, management_only):
        """Sets the management_only of this FTDBridgeGroupInterface.


        :param management_only: The management_only of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._management_only = management_only

    @property
    def mac_learn(self):
        """Gets the mac_learn of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The mac_learn of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._mac_learn

    @mac_learn.setter
    def mac_learn(self, mac_learn):
        """Sets the mac_learn of this FTDBridgeGroupInterface.


        :param mac_learn: The mac_learn of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._mac_learn = mac_learn

    @property
    def enable_sgt_propagate(self):
        """Gets the enable_sgt_propagate of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The enable_sgt_propagate of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._enable_sgt_propagate

    @enable_sgt_propagate.setter
    def enable_sgt_propagate(self, enable_sgt_propagate):
        """Sets the enable_sgt_propagate of this FTDBridgeGroupInterface.


        :param enable_sgt_propagate: The enable_sgt_propagate of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._enable_sgt_propagate = enable_sgt_propagate

    @property
    def enable_anti_spoofing(self):
        """Gets the enable_anti_spoofing of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The enable_anti_spoofing of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._enable_anti_spoofing

    @enable_anti_spoofing.setter
    def enable_anti_spoofing(self, enable_anti_spoofing):
        """Sets the enable_anti_spoofing of this FTDBridgeGroupInterface.


        :param enable_anti_spoofing: The enable_anti_spoofing of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._enable_anti_spoofing = enable_anti_spoofing

    @property
    def security_zone(self):
        """Gets the security_zone of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The security_zone of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: ISecurityZoneObjectModel
        """
        return self._security_zone

    @security_zone.setter
    def security_zone(self, security_zone):
        """Sets the security_zone of this FTDBridgeGroupInterface.


        :param security_zone: The security_zone of this FTDBridgeGroupInterface.  # noqa: E501
        :type: ISecurityZoneObjectModel
        """

        self._security_zone = security_zone

    @property
    def active_mac_address(self):
        """Gets the active_mac_address of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The active_mac_address of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._active_mac_address

    @active_mac_address.setter
    def active_mac_address(self, active_mac_address):
        """Sets the active_mac_address of this FTDBridgeGroupInterface.


        :param active_mac_address: The active_mac_address of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._active_mac_address = active_mac_address

    @property
    def fragment_reassembly(self):
        """Gets the fragment_reassembly of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The fragment_reassembly of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._fragment_reassembly

    @fragment_reassembly.setter
    def fragment_reassembly(self, fragment_reassembly):
        """Sets the fragment_reassembly of this FTDBridgeGroupInterface.


        :param fragment_reassembly: The fragment_reassembly of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._fragment_reassembly = fragment_reassembly

    @property
    def mac_table(self):
        """Gets the mac_table of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The mac_table of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: list[str]
        """
        return self._mac_table

    @mac_table.setter
    def mac_table(self, mac_table):
        """Sets the mac_table of this FTDBridgeGroupInterface.


        :param mac_table: The mac_table of this FTDBridgeGroupInterface.  # noqa: E501
        :type: list[str]
        """

        self._mac_table = mac_table

    @property
    def bridge_group_id(self):
        """Gets the bridge_group_id of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The bridge_group_id of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: int
        """
        return self._bridge_group_id

    @bridge_group_id.setter
    def bridge_group_id(self, bridge_group_id):
        """Sets the bridge_group_id of this FTDBridgeGroupInterface.


        :param bridge_group_id: The bridge_group_id of this FTDBridgeGroupInterface.  # noqa: E501
        :type: int
        """

        self._bridge_group_id = bridge_group_id

    @property
    def standby_mac_address(self):
        """Gets the standby_mac_address of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The standby_mac_address of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._standby_mac_address

    @standby_mac_address.setter
    def standby_mac_address(self, standby_mac_address):
        """Sets the standby_mac_address of this FTDBridgeGroupInterface.


        :param standby_mac_address: The standby_mac_address of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._standby_mac_address = standby_mac_address

    @property
    def ip_address(self):
        """Gets the ip_address of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The ip_address of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this FTDBridgeGroupInterface.


        :param ip_address: The ip_address of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def enable_dns_lookup(self):
        """Gets the enable_dns_lookup of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The enable_dns_lookup of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dns_lookup

    @enable_dns_lookup.setter
    def enable_dns_lookup(self, enable_dns_lookup):
        """Sets the enable_dns_lookup of this FTDBridgeGroupInterface.


        :param enable_dns_lookup: The enable_dns_lookup of this FTDBridgeGroupInterface.  # noqa: E501
        :type: bool
        """

        self._enable_dns_lookup = enable_dns_lookup

    @property
    def override_default_fragment_setting(self):
        """Gets the override_default_fragment_setting of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The override_default_fragment_setting of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: IOverrideDefaultFragmentSetting
        """
        return self._override_default_fragment_setting

    @override_default_fragment_setting.setter
    def override_default_fragment_setting(self, override_default_fragment_setting):
        """Sets the override_default_fragment_setting of this FTDBridgeGroupInterface.


        :param override_default_fragment_setting: The override_default_fragment_setting of this FTDBridgeGroupInterface.  # noqa: E501
        :type: IOverrideDefaultFragmentSetting
        """

        self._override_default_fragment_setting = override_default_fragment_setting

    @property
    def version(self):
        """Gets the version of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The version of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FTDBridgeGroupInterface.


        :param version: The version of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this FTDBridgeGroupInterface.  # noqa: E501


        :return: The name of this FTDBridgeGroupInterface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FTDBridgeGroupInterface.


        :param name: The name of this FTDBridgeGroupInterface.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FTDBridgeGroupInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FTDBridgeGroupInterface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FTDBridgeGroupInterface):
            return True

        return self.to_dict() != other.to_dict()
