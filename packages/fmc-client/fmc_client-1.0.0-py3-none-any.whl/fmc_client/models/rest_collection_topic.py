# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class RESTCollectionTopic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_sub_type': 'str',
        'collection_address': 'str',
        'collection_content_binding': 'str',
        'collection_poll_interval_in_minutes': 'int',
        'llcollection_topic': 'LLCollectionTopic',
        'collection_description': 'str',
        'type': 'str',
        'collection_protocol_binding': 'str',
        'value': 'str',
        'collection_message_binding': 'str',
        'collection_name': 'str'
    }

    attribute_map = {
        'collection_sub_type': 'collectionSubType',
        'collection_address': 'collectionAddress',
        'collection_content_binding': 'collectionContentBinding',
        'collection_poll_interval_in_minutes': 'collectionPollIntervalInMinutes',
        'llcollection_topic': 'llcollectionTopic',
        'collection_description': 'collectionDescription',
        'type': 'type',
        'collection_protocol_binding': 'collectionProtocolBinding',
        'value': 'value',
        'collection_message_binding': 'collectionMessageBinding',
        'collection_name': 'collectionName'
    }

    def __init__(self, collection_sub_type=None, collection_address=None, collection_content_binding=None, collection_poll_interval_in_minutes=None, llcollection_topic=None, collection_description=None, type=None, collection_protocol_binding=None, value=None, collection_message_binding=None, collection_name=None, _configuration=None):  # noqa: E501
        """RESTCollectionTopic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collection_sub_type = None
        self._collection_address = None
        self._collection_content_binding = None
        self._collection_poll_interval_in_minutes = None
        self._llcollection_topic = None
        self._collection_description = None
        self._type = None
        self._collection_protocol_binding = None
        self._value = None
        self._collection_message_binding = None
        self._collection_name = None
        self.discriminator = None

        if collection_sub_type is not None:
            self.collection_sub_type = collection_sub_type
        if collection_address is not None:
            self.collection_address = collection_address
        if collection_content_binding is not None:
            self.collection_content_binding = collection_content_binding
        if collection_poll_interval_in_minutes is not None:
            self.collection_poll_interval_in_minutes = collection_poll_interval_in_minutes
        if llcollection_topic is not None:
            self.llcollection_topic = llcollection_topic
        if collection_description is not None:
            self.collection_description = collection_description
        if type is not None:
            self.type = type
        if collection_protocol_binding is not None:
            self.collection_protocol_binding = collection_protocol_binding
        if value is not None:
            self.value = value
        if collection_message_binding is not None:
            self.collection_message_binding = collection_message_binding
        if collection_name is not None:
            self.collection_name = collection_name

    @property
    def collection_sub_type(self):
        """Gets the collection_sub_type of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_sub_type of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_sub_type

    @collection_sub_type.setter
    def collection_sub_type(self, collection_sub_type):
        """Sets the collection_sub_type of this RESTCollectionTopic.


        :param collection_sub_type: The collection_sub_type of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_sub_type = collection_sub_type

    @property
    def collection_address(self):
        """Gets the collection_address of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_address of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_address

    @collection_address.setter
    def collection_address(self, collection_address):
        """Sets the collection_address of this RESTCollectionTopic.


        :param collection_address: The collection_address of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_address = collection_address

    @property
    def collection_content_binding(self):
        """Gets the collection_content_binding of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_content_binding of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_content_binding

    @collection_content_binding.setter
    def collection_content_binding(self, collection_content_binding):
        """Sets the collection_content_binding of this RESTCollectionTopic.


        :param collection_content_binding: The collection_content_binding of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_content_binding = collection_content_binding

    @property
    def collection_poll_interval_in_minutes(self):
        """Gets the collection_poll_interval_in_minutes of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_poll_interval_in_minutes of this RESTCollectionTopic.  # noqa: E501
        :rtype: int
        """
        return self._collection_poll_interval_in_minutes

    @collection_poll_interval_in_minutes.setter
    def collection_poll_interval_in_minutes(self, collection_poll_interval_in_minutes):
        """Sets the collection_poll_interval_in_minutes of this RESTCollectionTopic.


        :param collection_poll_interval_in_minutes: The collection_poll_interval_in_minutes of this RESTCollectionTopic.  # noqa: E501
        :type: int
        """

        self._collection_poll_interval_in_minutes = collection_poll_interval_in_minutes

    @property
    def llcollection_topic(self):
        """Gets the llcollection_topic of this RESTCollectionTopic.  # noqa: E501


        :return: The llcollection_topic of this RESTCollectionTopic.  # noqa: E501
        :rtype: LLCollectionTopic
        """
        return self._llcollection_topic

    @llcollection_topic.setter
    def llcollection_topic(self, llcollection_topic):
        """Sets the llcollection_topic of this RESTCollectionTopic.


        :param llcollection_topic: The llcollection_topic of this RESTCollectionTopic.  # noqa: E501
        :type: LLCollectionTopic
        """

        self._llcollection_topic = llcollection_topic

    @property
    def collection_description(self):
        """Gets the collection_description of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_description of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_description

    @collection_description.setter
    def collection_description(self, collection_description):
        """Sets the collection_description of this RESTCollectionTopic.


        :param collection_description: The collection_description of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_description = collection_description

    @property
    def type(self):
        """Gets the type of this RESTCollectionTopic.  # noqa: E501


        :return: The type of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RESTCollectionTopic.


        :param type: The type of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def collection_protocol_binding(self):
        """Gets the collection_protocol_binding of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_protocol_binding of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_protocol_binding

    @collection_protocol_binding.setter
    def collection_protocol_binding(self, collection_protocol_binding):
        """Sets the collection_protocol_binding of this RESTCollectionTopic.


        :param collection_protocol_binding: The collection_protocol_binding of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_protocol_binding = collection_protocol_binding

    @property
    def value(self):
        """Gets the value of this RESTCollectionTopic.  # noqa: E501


        :return: The value of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RESTCollectionTopic.


        :param value: The value of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def collection_message_binding(self):
        """Gets the collection_message_binding of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_message_binding of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_message_binding

    @collection_message_binding.setter
    def collection_message_binding(self, collection_message_binding):
        """Sets the collection_message_binding of this RESTCollectionTopic.


        :param collection_message_binding: The collection_message_binding of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_message_binding = collection_message_binding

    @property
    def collection_name(self):
        """Gets the collection_name of this RESTCollectionTopic.  # noqa: E501


        :return: The collection_name of this RESTCollectionTopic.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this RESTCollectionTopic.


        :param collection_name: The collection_name of this RESTCollectionTopic.  # noqa: E501
        :type: str
        """

        self._collection_name = collection_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RESTCollectionTopic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RESTCollectionTopic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RESTCollectionTopic):
            return True

        return self.to_dict() != other.to_dict()
