# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class IKeyObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_life_time': 'ILifeTime',
        'auth_algorithm': 'str',
        'key_id': 'int',
        'auth_string': 'IAuthTypeAndString',
        'send_life_time': 'ILifeTime'
    }

    attribute_map = {
        'accept_life_time': 'acceptLifeTime',
        'auth_algorithm': 'authAlgorithm',
        'key_id': 'keyId',
        'auth_string': 'authString',
        'send_life_time': 'sendLifeTime'
    }

    def __init__(self, accept_life_time=None, auth_algorithm=None, key_id=None, auth_string=None, send_life_time=None, _configuration=None):  # noqa: E501
        """IKeyObject - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accept_life_time = None
        self._auth_algorithm = None
        self._key_id = None
        self._auth_string = None
        self._send_life_time = None
        self.discriminator = None

        if accept_life_time is not None:
            self.accept_life_time = accept_life_time
        if auth_algorithm is not None:
            self.auth_algorithm = auth_algorithm
        if key_id is not None:
            self.key_id = key_id
        if auth_string is not None:
            self.auth_string = auth_string
        if send_life_time is not None:
            self.send_life_time = send_life_time

    @property
    def accept_life_time(self):
        """Gets the accept_life_time of this IKeyObject.  # noqa: E501


        :return: The accept_life_time of this IKeyObject.  # noqa: E501
        :rtype: ILifeTime
        """
        return self._accept_life_time

    @accept_life_time.setter
    def accept_life_time(self, accept_life_time):
        """Sets the accept_life_time of this IKeyObject.


        :param accept_life_time: The accept_life_time of this IKeyObject.  # noqa: E501
        :type: ILifeTime
        """

        self._accept_life_time = accept_life_time

    @property
    def auth_algorithm(self):
        """Gets the auth_algorithm of this IKeyObject.  # noqa: E501


        :return: The auth_algorithm of this IKeyObject.  # noqa: E501
        :rtype: str
        """
        return self._auth_algorithm

    @auth_algorithm.setter
    def auth_algorithm(self, auth_algorithm):
        """Sets the auth_algorithm of this IKeyObject.


        :param auth_algorithm: The auth_algorithm of this IKeyObject.  # noqa: E501
        :type: str
        """

        self._auth_algorithm = auth_algorithm

    @property
    def key_id(self):
        """Gets the key_id of this IKeyObject.  # noqa: E501


        :return: The key_id of this IKeyObject.  # noqa: E501
        :rtype: int
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this IKeyObject.


        :param key_id: The key_id of this IKeyObject.  # noqa: E501
        :type: int
        """

        self._key_id = key_id

    @property
    def auth_string(self):
        """Gets the auth_string of this IKeyObject.  # noqa: E501


        :return: The auth_string of this IKeyObject.  # noqa: E501
        :rtype: IAuthTypeAndString
        """
        return self._auth_string

    @auth_string.setter
    def auth_string(self, auth_string):
        """Sets the auth_string of this IKeyObject.


        :param auth_string: The auth_string of this IKeyObject.  # noqa: E501
        :type: IAuthTypeAndString
        """

        self._auth_string = auth_string

    @property
    def send_life_time(self):
        """Gets the send_life_time of this IKeyObject.  # noqa: E501


        :return: The send_life_time of this IKeyObject.  # noqa: E501
        :rtype: ILifeTime
        """
        return self._send_life_time

    @send_life_time.setter
    def send_life_time(self, send_life_time):
        """Sets the send_life_time of this IKeyObject.


        :param send_life_time: The send_life_time of this IKeyObject.  # noqa: E501
        :type: ILifeTime
        """

        self._send_life_time = send_life_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IKeyObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IKeyObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IKeyObject):
            return True

        return self.to_dict() != other.to_dict()
