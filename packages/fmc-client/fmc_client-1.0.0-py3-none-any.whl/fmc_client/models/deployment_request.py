# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class DeploymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'DeploymentRequestMetadata',
        'force_deploy': 'bool',
        'selected_policiesfor_devices': 'list[ISelectedPoliciesforDevices]',
        'name': 'str',
        'device_list': 'list[str]',
        'ignore_warning': 'bool',
        'description': 'str',
        'links': 'ILinks',
        'id': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'force_deploy': 'forceDeploy',
        'selected_policiesfor_devices': 'selectedPoliciesforDevices',
        'name': 'name',
        'device_list': 'deviceList',
        'ignore_warning': 'ignoreWarning',
        'description': 'description',
        'links': 'links',
        'id': 'id',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, metadata=None, force_deploy=None, selected_policiesfor_devices=None, name=None, device_list=None, ignore_warning=None, description=None, links=None, id=None, type=None, version=None, _configuration=None):  # noqa: E501
        """DeploymentRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata = None
        self._force_deploy = None
        self._selected_policiesfor_devices = None
        self._name = None
        self._device_list = None
        self._ignore_warning = None
        self._description = None
        self._links = None
        self._id = None
        self._type = None
        self._version = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if force_deploy is not None:
            self.force_deploy = force_deploy
        if selected_policiesfor_devices is not None:
            self.selected_policiesfor_devices = selected_policiesfor_devices
        if name is not None:
            self.name = name
        if device_list is not None:
            self.device_list = device_list
        if ignore_warning is not None:
            self.ignore_warning = ignore_warning
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def metadata(self):
        """Gets the metadata of this DeploymentRequest.  # noqa: E501


        :return: The metadata of this DeploymentRequest.  # noqa: E501
        :rtype: DeploymentRequestMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DeploymentRequest.


        :param metadata: The metadata of this DeploymentRequest.  # noqa: E501
        :type: DeploymentRequestMetadata
        """

        self._metadata = metadata

    @property
    def force_deploy(self):
        """Gets the force_deploy of this DeploymentRequest.  # noqa: E501

        Boolean indicating the deployment is force deploy or not. Value set to `true` only if device is not out-of-date and user wants to force a deployment. This should not be used unless needed. Default is `false`.  # noqa: E501

        :return: The force_deploy of this DeploymentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._force_deploy

    @force_deploy.setter
    def force_deploy(self, force_deploy):
        """Sets the force_deploy of this DeploymentRequest.

        Boolean indicating the deployment is force deploy or not. Value set to `true` only if device is not out-of-date and user wants to force a deployment. This should not be used unless needed. Default is `false`.  # noqa: E501

        :param force_deploy: The force_deploy of this DeploymentRequest.  # noqa: E501
        :type: bool
        """

        self._force_deploy = force_deploy

    @property
    def selected_policiesfor_devices(self):
        """Gets the selected_policiesfor_devices of this DeploymentRequest.  # noqa: E501

        List of devices for Selective Policy Deployment. </br> The devices mentioned here should be part of the 'devicelist' attribute.  # noqa: E501

        :return: The selected_policiesfor_devices of this DeploymentRequest.  # noqa: E501
        :rtype: list[ISelectedPoliciesforDevices]
        """
        return self._selected_policiesfor_devices

    @selected_policiesfor_devices.setter
    def selected_policiesfor_devices(self, selected_policiesfor_devices):
        """Sets the selected_policiesfor_devices of this DeploymentRequest.

        List of devices for Selective Policy Deployment. </br> The devices mentioned here should be part of the 'devicelist' attribute.  # noqa: E501

        :param selected_policiesfor_devices: The selected_policiesfor_devices of this DeploymentRequest.  # noqa: E501
        :type: list[ISelectedPoliciesforDevices]
        """

        self._selected_policiesfor_devices = selected_policiesfor_devices

    @property
    def name(self):
        """Gets the name of this DeploymentRequest.  # noqa: E501

        String represents the name to the device.  # noqa: E501

        :return: The name of this DeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentRequest.

        String represents the name to the device.  # noqa: E501

        :param name: The name of this DeploymentRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def device_list(self):
        """Gets the device_list of this DeploymentRequest.  # noqa: E501

        List of device UUIDs for which the deployment has to triggered.  # noqa: E501

        :return: The device_list of this DeploymentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_list

    @device_list.setter
    def device_list(self, device_list):
        """Sets the device_list of this DeploymentRequest.

        List of device UUIDs for which the deployment has to triggered.  # noqa: E501

        :param device_list: The device_list of this DeploymentRequest.  # noqa: E501
        :type: list[str]
        """

        self._device_list = device_list

    @property
    def ignore_warning(self):
        """Gets the ignore_warning of this DeploymentRequest.  # noqa: E501

        Boolean indicating whether the warnings needs to be ignored during the prevalidation of deployment job. Default is `false`.  # noqa: E501

        :return: The ignore_warning of this DeploymentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_warning

    @ignore_warning.setter
    def ignore_warning(self, ignore_warning):
        """Sets the ignore_warning of this DeploymentRequest.

        Boolean indicating whether the warnings needs to be ignored during the prevalidation of deployment job. Default is `false`.  # noqa: E501

        :param ignore_warning: The ignore_warning of this DeploymentRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_warning = ignore_warning

    @property
    def description(self):
        """Gets the description of this DeploymentRequest.  # noqa: E501

        User provided description of the object.  # noqa: E501

        :return: The description of this DeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeploymentRequest.

        User provided description of the object.  # noqa: E501

        :param description: The description of this DeploymentRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this DeploymentRequest.  # noqa: E501

        Link to the deployment request with the job id.  # noqa: E501

        :return: The links of this DeploymentRequest.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DeploymentRequest.

        Link to the deployment request with the job id.  # noqa: E501

        :param links: The links of this DeploymentRequest.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this DeploymentRequest.  # noqa: E501

        Id created as part of the deployment.  # noqa: E501

        :return: The id of this DeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentRequest.

        Id created as part of the deployment.  # noqa: E501

        :param id: The id of this DeploymentRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this DeploymentRequest.  # noqa: E501

        Type of the Request object. This value is always DeploymentRequest.  # noqa: E501

        :return: The type of this DeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeploymentRequest.

        Type of the Request object. This value is always DeploymentRequest.  # noqa: E501

        :param type: The type of this DeploymentRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this DeploymentRequest.  # noqa: E501

        Integer indicating the version to which the deployment should be done.  # noqa: E501

        :return: The version of this DeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeploymentRequest.

        Integer indicating the version to which the deployment should be done.  # noqa: E501

        :param version: The version of this DeploymentRequest.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentRequest):
            return True

        return self.to_dict() != other.to_dict()
