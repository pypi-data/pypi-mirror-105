# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class CategoryEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_type': 'str',
        'expanded': 'bool',
        'bread_crumb': 'str',
        'name': 'str',
        'categorydescription': 'str',
        'categorysize': 'int',
        'id': 'int',
        'type': 'str',
        'value': 'str',
        'uuid': 'str',
        'category_start': 'int',
        'literal': 'bool'
    }

    attribute_map = {
        'category_type': 'categoryType',
        'expanded': 'expanded',
        'bread_crumb': 'breadCrumb',
        'name': 'name',
        'categorydescription': 'categorydescription',
        'categorysize': 'categorysize',
        'id': 'id',
        'type': 'type',
        'value': 'value',
        'uuid': 'uuid',
        'category_start': 'categoryStart',
        'literal': 'literal'
    }

    def __init__(self, category_type=None, expanded=None, bread_crumb=None, name=None, categorydescription=None, categorysize=None, id=None, type=None, value=None, uuid=None, category_start=None, literal=None, _configuration=None):  # noqa: E501
        """CategoryEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category_type = None
        self._expanded = None
        self._bread_crumb = None
        self._name = None
        self._categorydescription = None
        self._categorysize = None
        self._id = None
        self._type = None
        self._value = None
        self._uuid = None
        self._category_start = None
        self._literal = None
        self.discriminator = None

        if category_type is not None:
            self.category_type = category_type
        if expanded is not None:
            self.expanded = expanded
        if bread_crumb is not None:
            self.bread_crumb = bread_crumb
        if name is not None:
            self.name = name
        if categorydescription is not None:
            self.categorydescription = categorydescription
        if categorysize is not None:
            self.categorysize = categorysize
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if uuid is not None:
            self.uuid = uuid
        if category_start is not None:
            self.category_start = category_start
        if literal is not None:
            self.literal = literal

    @property
    def category_type(self):
        """Gets the category_type of this CategoryEntry.  # noqa: E501


        :return: The category_type of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this CategoryEntry.


        :param category_type: The category_type of this CategoryEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["SECTION", "HEADER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                category_type not in allowed_values):
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"  # noqa: E501
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def expanded(self):
        """Gets the expanded of this CategoryEntry.  # noqa: E501


        :return: The expanded of this CategoryEntry.  # noqa: E501
        :rtype: bool
        """
        return self._expanded

    @expanded.setter
    def expanded(self, expanded):
        """Sets the expanded of this CategoryEntry.


        :param expanded: The expanded of this CategoryEntry.  # noqa: E501
        :type: bool
        """

        self._expanded = expanded

    @property
    def bread_crumb(self):
        """Gets the bread_crumb of this CategoryEntry.  # noqa: E501


        :return: The bread_crumb of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._bread_crumb

    @bread_crumb.setter
    def bread_crumb(self, bread_crumb):
        """Sets the bread_crumb of this CategoryEntry.


        :param bread_crumb: The bread_crumb of this CategoryEntry.  # noqa: E501
        :type: str
        """

        self._bread_crumb = bread_crumb

    @property
    def name(self):
        """Gets the name of this CategoryEntry.  # noqa: E501


        :return: The name of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryEntry.


        :param name: The name of this CategoryEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def categorydescription(self):
        """Gets the categorydescription of this CategoryEntry.  # noqa: E501


        :return: The categorydescription of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._categorydescription

    @categorydescription.setter
    def categorydescription(self, categorydescription):
        """Sets the categorydescription of this CategoryEntry.


        :param categorydescription: The categorydescription of this CategoryEntry.  # noqa: E501
        :type: str
        """

        self._categorydescription = categorydescription

    @property
    def categorysize(self):
        """Gets the categorysize of this CategoryEntry.  # noqa: E501


        :return: The categorysize of this CategoryEntry.  # noqa: E501
        :rtype: int
        """
        return self._categorysize

    @categorysize.setter
    def categorysize(self, categorysize):
        """Sets the categorysize of this CategoryEntry.


        :param categorysize: The categorysize of this CategoryEntry.  # noqa: E501
        :type: int
        """

        self._categorysize = categorysize

    @property
    def id(self):
        """Gets the id of this CategoryEntry.  # noqa: E501


        :return: The id of this CategoryEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryEntry.


        :param id: The id of this CategoryEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CategoryEntry.  # noqa: E501


        :return: The type of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CategoryEntry.


        :param type: The type of this CategoryEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this CategoryEntry.  # noqa: E501


        :return: The value of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CategoryEntry.


        :param value: The value of this CategoryEntry.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def uuid(self):
        """Gets the uuid of this CategoryEntry.  # noqa: E501


        :return: The uuid of this CategoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this CategoryEntry.


        :param uuid: The uuid of this CategoryEntry.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def category_start(self):
        """Gets the category_start of this CategoryEntry.  # noqa: E501


        :return: The category_start of this CategoryEntry.  # noqa: E501
        :rtype: int
        """
        return self._category_start

    @category_start.setter
    def category_start(self, category_start):
        """Sets the category_start of this CategoryEntry.


        :param category_start: The category_start of this CategoryEntry.  # noqa: E501
        :type: int
        """

        self._category_start = category_start

    @property
    def literal(self):
        """Gets the literal of this CategoryEntry.  # noqa: E501


        :return: The literal of this CategoryEntry.  # noqa: E501
        :rtype: bool
        """
        return self._literal

    @literal.setter
    def literal(self, literal):
        """Sets the literal of this CategoryEntry.


        :param literal: The literal of this CategoryEntry.  # noqa: E501
        :type: bool
        """

        self._literal = literal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CategoryEntry):
            return True

        return self.to_dict() != other.to_dict()
