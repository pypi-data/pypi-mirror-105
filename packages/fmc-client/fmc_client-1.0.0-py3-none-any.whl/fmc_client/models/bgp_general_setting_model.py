# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class BGPGeneralSettingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_graceful_restart': 'IBGPGSGracefulRestart',
        'metadata': 'Metadata',
        'transport_path_mtu_discovery': 'bool',
        'aggregate_timer': 'int',
        'scan_time': 'int',
        'best_path': 'IBGPGSBestPath',
        'as_number': 'str',
        'asnotation_dot': 'bool',
        'description': 'str',
        'bgp_next_hop_trigger_delay': 'int',
        'bgptimers': 'IBGPGSTimers',
        'type': 'str',
        'bgp_next_hop_trigger_enable': 'bool',
        'version': 'str',
        'router_id': 'str',
        'name': 'str',
        'links': 'ILinks',
        'fast_external_fall_over': 'bool',
        'id': 'str',
        'log_neighbor_changes': 'bool',
        'enforce_first_as': 'bool',
        'maxas_limit': 'int'
    }

    attribute_map = {
        'bgp_graceful_restart': 'bgpGracefulRestart',
        'metadata': 'metadata',
        'transport_path_mtu_discovery': 'transportPathMtuDiscovery',
        'aggregate_timer': 'aggregateTimer',
        'scan_time': 'scanTime',
        'best_path': 'bestPath',
        'as_number': 'asNumber',
        'asnotation_dot': 'asnotationDot',
        'description': 'description',
        'bgp_next_hop_trigger_delay': 'bgpNextHopTriggerDelay',
        'bgptimers': 'bgptimers',
        'type': 'type',
        'bgp_next_hop_trigger_enable': 'bgpNextHopTriggerEnable',
        'version': 'version',
        'router_id': 'routerId',
        'name': 'name',
        'links': 'links',
        'fast_external_fall_over': 'fastExternalFallOver',
        'id': 'id',
        'log_neighbor_changes': 'logNeighborChanges',
        'enforce_first_as': 'enforceFirstAs',
        'maxas_limit': 'maxasLimit'
    }

    def __init__(self, bgp_graceful_restart=None, metadata=None, transport_path_mtu_discovery=None, aggregate_timer=None, scan_time=None, best_path=None, as_number=None, asnotation_dot=None, description=None, bgp_next_hop_trigger_delay=None, bgptimers=None, type=None, bgp_next_hop_trigger_enable=None, version=None, router_id=None, name=None, links=None, fast_external_fall_over=None, id=None, log_neighbor_changes=None, enforce_first_as=None, maxas_limit=None, _configuration=None):  # noqa: E501
        """BGPGeneralSettingModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bgp_graceful_restart = None
        self._metadata = None
        self._transport_path_mtu_discovery = None
        self._aggregate_timer = None
        self._scan_time = None
        self._best_path = None
        self._as_number = None
        self._asnotation_dot = None
        self._description = None
        self._bgp_next_hop_trigger_delay = None
        self._bgptimers = None
        self._type = None
        self._bgp_next_hop_trigger_enable = None
        self._version = None
        self._router_id = None
        self._name = None
        self._links = None
        self._fast_external_fall_over = None
        self._id = None
        self._log_neighbor_changes = None
        self._enforce_first_as = None
        self._maxas_limit = None
        self.discriminator = None

        if bgp_graceful_restart is not None:
            self.bgp_graceful_restart = bgp_graceful_restart
        if metadata is not None:
            self.metadata = metadata
        if transport_path_mtu_discovery is not None:
            self.transport_path_mtu_discovery = transport_path_mtu_discovery
        if aggregate_timer is not None:
            self.aggregate_timer = aggregate_timer
        if scan_time is not None:
            self.scan_time = scan_time
        if best_path is not None:
            self.best_path = best_path
        if as_number is not None:
            self.as_number = as_number
        if asnotation_dot is not None:
            self.asnotation_dot = asnotation_dot
        if description is not None:
            self.description = description
        if bgp_next_hop_trigger_delay is not None:
            self.bgp_next_hop_trigger_delay = bgp_next_hop_trigger_delay
        if bgptimers is not None:
            self.bgptimers = bgptimers
        if type is not None:
            self.type = type
        if bgp_next_hop_trigger_enable is not None:
            self.bgp_next_hop_trigger_enable = bgp_next_hop_trigger_enable
        if version is not None:
            self.version = version
        self.router_id = router_id
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if fast_external_fall_over is not None:
            self.fast_external_fall_over = fast_external_fall_over
        if id is not None:
            self.id = id
        if log_neighbor_changes is not None:
            self.log_neighbor_changes = log_neighbor_changes
        if enforce_first_as is not None:
            self.enforce_first_as = enforce_first_as
        if maxas_limit is not None:
            self.maxas_limit = maxas_limit

    @property
    def bgp_graceful_restart(self):
        """Gets the bgp_graceful_restart of this BGPGeneralSettingModel.  # noqa: E501


        :return: The bgp_graceful_restart of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: IBGPGSGracefulRestart
        """
        return self._bgp_graceful_restart

    @bgp_graceful_restart.setter
    def bgp_graceful_restart(self, bgp_graceful_restart):
        """Sets the bgp_graceful_restart of this BGPGeneralSettingModel.


        :param bgp_graceful_restart: The bgp_graceful_restart of this BGPGeneralSettingModel.  # noqa: E501
        :type: IBGPGSGracefulRestart
        """

        self._bgp_graceful_restart = bgp_graceful_restart

    @property
    def metadata(self):
        """Gets the metadata of this BGPGeneralSettingModel.  # noqa: E501


        :return: The metadata of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BGPGeneralSettingModel.


        :param metadata: The metadata of this BGPGeneralSettingModel.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def transport_path_mtu_discovery(self):
        """Gets the transport_path_mtu_discovery of this BGPGeneralSettingModel.  # noqa: E501


        :return: The transport_path_mtu_discovery of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._transport_path_mtu_discovery

    @transport_path_mtu_discovery.setter
    def transport_path_mtu_discovery(self, transport_path_mtu_discovery):
        """Sets the transport_path_mtu_discovery of this BGPGeneralSettingModel.


        :param transport_path_mtu_discovery: The transport_path_mtu_discovery of this BGPGeneralSettingModel.  # noqa: E501
        :type: bool
        """

        self._transport_path_mtu_discovery = transport_path_mtu_discovery

    @property
    def aggregate_timer(self):
        """Gets the aggregate_timer of this BGPGeneralSettingModel.  # noqa: E501


        :return: The aggregate_timer of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: int
        """
        return self._aggregate_timer

    @aggregate_timer.setter
    def aggregate_timer(self, aggregate_timer):
        """Sets the aggregate_timer of this BGPGeneralSettingModel.


        :param aggregate_timer: The aggregate_timer of this BGPGeneralSettingModel.  # noqa: E501
        :type: int
        """

        self._aggregate_timer = aggregate_timer

    @property
    def scan_time(self):
        """Gets the scan_time of this BGPGeneralSettingModel.  # noqa: E501


        :return: The scan_time of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: int
        """
        return self._scan_time

    @scan_time.setter
    def scan_time(self, scan_time):
        """Sets the scan_time of this BGPGeneralSettingModel.


        :param scan_time: The scan_time of this BGPGeneralSettingModel.  # noqa: E501
        :type: int
        """

        self._scan_time = scan_time

    @property
    def best_path(self):
        """Gets the best_path of this BGPGeneralSettingModel.  # noqa: E501


        :return: The best_path of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: IBGPGSBestPath
        """
        return self._best_path

    @best_path.setter
    def best_path(self, best_path):
        """Sets the best_path of this BGPGeneralSettingModel.


        :param best_path: The best_path of this BGPGeneralSettingModel.  # noqa: E501
        :type: IBGPGSBestPath
        """

        self._best_path = best_path

    @property
    def as_number(self):
        """Gets the as_number of this BGPGeneralSettingModel.  # noqa: E501


        :return: The as_number of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this BGPGeneralSettingModel.


        :param as_number: The as_number of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """

        self._as_number = as_number

    @property
    def asnotation_dot(self):
        """Gets the asnotation_dot of this BGPGeneralSettingModel.  # noqa: E501


        :return: The asnotation_dot of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._asnotation_dot

    @asnotation_dot.setter
    def asnotation_dot(self, asnotation_dot):
        """Sets the asnotation_dot of this BGPGeneralSettingModel.


        :param asnotation_dot: The asnotation_dot of this BGPGeneralSettingModel.  # noqa: E501
        :type: bool
        """

        self._asnotation_dot = asnotation_dot

    @property
    def description(self):
        """Gets the description of this BGPGeneralSettingModel.  # noqa: E501


        :return: The description of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BGPGeneralSettingModel.


        :param description: The description of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def bgp_next_hop_trigger_delay(self):
        """Gets the bgp_next_hop_trigger_delay of this BGPGeneralSettingModel.  # noqa: E501


        :return: The bgp_next_hop_trigger_delay of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: int
        """
        return self._bgp_next_hop_trigger_delay

    @bgp_next_hop_trigger_delay.setter
    def bgp_next_hop_trigger_delay(self, bgp_next_hop_trigger_delay):
        """Sets the bgp_next_hop_trigger_delay of this BGPGeneralSettingModel.


        :param bgp_next_hop_trigger_delay: The bgp_next_hop_trigger_delay of this BGPGeneralSettingModel.  # noqa: E501
        :type: int
        """

        self._bgp_next_hop_trigger_delay = bgp_next_hop_trigger_delay

    @property
    def bgptimers(self):
        """Gets the bgptimers of this BGPGeneralSettingModel.  # noqa: E501


        :return: The bgptimers of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: IBGPGSTimers
        """
        return self._bgptimers

    @bgptimers.setter
    def bgptimers(self, bgptimers):
        """Sets the bgptimers of this BGPGeneralSettingModel.


        :param bgptimers: The bgptimers of this BGPGeneralSettingModel.  # noqa: E501
        :type: IBGPGSTimers
        """

        self._bgptimers = bgptimers

    @property
    def type(self):
        """Gets the type of this BGPGeneralSettingModel.  # noqa: E501


        :return: The type of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BGPGeneralSettingModel.


        :param type: The type of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def bgp_next_hop_trigger_enable(self):
        """Gets the bgp_next_hop_trigger_enable of this BGPGeneralSettingModel.  # noqa: E501


        :return: The bgp_next_hop_trigger_enable of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._bgp_next_hop_trigger_enable

    @bgp_next_hop_trigger_enable.setter
    def bgp_next_hop_trigger_enable(self, bgp_next_hop_trigger_enable):
        """Sets the bgp_next_hop_trigger_enable of this BGPGeneralSettingModel.


        :param bgp_next_hop_trigger_enable: The bgp_next_hop_trigger_enable of this BGPGeneralSettingModel.  # noqa: E501
        :type: bool
        """

        self._bgp_next_hop_trigger_enable = bgp_next_hop_trigger_enable

    @property
    def version(self):
        """Gets the version of this BGPGeneralSettingModel.  # noqa: E501


        :return: The version of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BGPGeneralSettingModel.


        :param version: The version of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def router_id(self):
        """Gets the router_id of this BGPGeneralSettingModel.  # noqa: E501


        :return: The router_id of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._router_id

    @router_id.setter
    def router_id(self, router_id):
        """Sets the router_id of this BGPGeneralSettingModel.


        :param router_id: The router_id of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and router_id is None:
            raise ValueError("Invalid value for `router_id`, must not be `None`")  # noqa: E501

        self._router_id = router_id

    @property
    def name(self):
        """Gets the name of this BGPGeneralSettingModel.  # noqa: E501


        :return: The name of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BGPGeneralSettingModel.


        :param name: The name of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this BGPGeneralSettingModel.  # noqa: E501


        :return: The links of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BGPGeneralSettingModel.


        :param links: The links of this BGPGeneralSettingModel.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def fast_external_fall_over(self):
        """Gets the fast_external_fall_over of this BGPGeneralSettingModel.  # noqa: E501


        :return: The fast_external_fall_over of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._fast_external_fall_over

    @fast_external_fall_over.setter
    def fast_external_fall_over(self, fast_external_fall_over):
        """Sets the fast_external_fall_over of this BGPGeneralSettingModel.


        :param fast_external_fall_over: The fast_external_fall_over of this BGPGeneralSettingModel.  # noqa: E501
        :type: bool
        """

        self._fast_external_fall_over = fast_external_fall_over

    @property
    def id(self):
        """Gets the id of this BGPGeneralSettingModel.  # noqa: E501


        :return: The id of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BGPGeneralSettingModel.


        :param id: The id of this BGPGeneralSettingModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def log_neighbor_changes(self):
        """Gets the log_neighbor_changes of this BGPGeneralSettingModel.  # noqa: E501


        :return: The log_neighbor_changes of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._log_neighbor_changes

    @log_neighbor_changes.setter
    def log_neighbor_changes(self, log_neighbor_changes):
        """Sets the log_neighbor_changes of this BGPGeneralSettingModel.


        :param log_neighbor_changes: The log_neighbor_changes of this BGPGeneralSettingModel.  # noqa: E501
        :type: bool
        """

        self._log_neighbor_changes = log_neighbor_changes

    @property
    def enforce_first_as(self):
        """Gets the enforce_first_as of this BGPGeneralSettingModel.  # noqa: E501


        :return: The enforce_first_as of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_first_as

    @enforce_first_as.setter
    def enforce_first_as(self, enforce_first_as):
        """Sets the enforce_first_as of this BGPGeneralSettingModel.


        :param enforce_first_as: The enforce_first_as of this BGPGeneralSettingModel.  # noqa: E501
        :type: bool
        """

        self._enforce_first_as = enforce_first_as

    @property
    def maxas_limit(self):
        """Gets the maxas_limit of this BGPGeneralSettingModel.  # noqa: E501


        :return: The maxas_limit of this BGPGeneralSettingModel.  # noqa: E501
        :rtype: int
        """
        return self._maxas_limit

    @maxas_limit.setter
    def maxas_limit(self, maxas_limit):
        """Sets the maxas_limit of this BGPGeneralSettingModel.


        :param maxas_limit: The maxas_limit of this BGPGeneralSettingModel.  # noqa: E501
        :type: int
        """

        self._maxas_limit = maxas_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BGPGeneralSettingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BGPGeneralSettingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BGPGeneralSettingModel):
            return True

        return self.to_dict() != other.to_dict()
