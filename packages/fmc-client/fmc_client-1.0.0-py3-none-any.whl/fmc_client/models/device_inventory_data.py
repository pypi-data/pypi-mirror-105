# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fmc_client.configuration import Configuration


class DeviceInventoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_type': 'str',
        'cpu_cores': 'str',
        'memory_in_mb': 'str',
        'storage_in_gb': 'str'
    }

    attribute_map = {
        'cpu_type': 'cpuType',
        'cpu_cores': 'cpuCores',
        'memory_in_mb': 'memoryInMB',
        'storage_in_gb': 'storageInGB'
    }

    def __init__(self, cpu_type=None, cpu_cores=None, memory_in_mb=None, storage_in_gb=None, _configuration=None):  # noqa: E501
        """DeviceInventoryData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_type = None
        self._cpu_cores = None
        self._memory_in_mb = None
        self._storage_in_gb = None
        self.discriminator = None

        if cpu_type is not None:
            self.cpu_type = cpu_type
        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if memory_in_mb is not None:
            self.memory_in_mb = memory_in_mb
        if storage_in_gb is not None:
            self.storage_in_gb = storage_in_gb

    @property
    def cpu_type(self):
        """Gets the cpu_type of this DeviceInventoryData.  # noqa: E501


        :return: The cpu_type of this DeviceInventoryData.  # noqa: E501
        :rtype: str
        """
        return self._cpu_type

    @cpu_type.setter
    def cpu_type(self, cpu_type):
        """Sets the cpu_type of this DeviceInventoryData.


        :param cpu_type: The cpu_type of this DeviceInventoryData.  # noqa: E501
        :type: str
        """

        self._cpu_type = cpu_type

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this DeviceInventoryData.  # noqa: E501


        :return: The cpu_cores of this DeviceInventoryData.  # noqa: E501
        :rtype: str
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this DeviceInventoryData.


        :param cpu_cores: The cpu_cores of this DeviceInventoryData.  # noqa: E501
        :type: str
        """

        self._cpu_cores = cpu_cores

    @property
    def memory_in_mb(self):
        """Gets the memory_in_mb of this DeviceInventoryData.  # noqa: E501


        :return: The memory_in_mb of this DeviceInventoryData.  # noqa: E501
        :rtype: str
        """
        return self._memory_in_mb

    @memory_in_mb.setter
    def memory_in_mb(self, memory_in_mb):
        """Sets the memory_in_mb of this DeviceInventoryData.


        :param memory_in_mb: The memory_in_mb of this DeviceInventoryData.  # noqa: E501
        :type: str
        """

        self._memory_in_mb = memory_in_mb

    @property
    def storage_in_gb(self):
        """Gets the storage_in_gb of this DeviceInventoryData.  # noqa: E501


        :return: The storage_in_gb of this DeviceInventoryData.  # noqa: E501
        :rtype: str
        """
        return self._storage_in_gb

    @storage_in_gb.setter
    def storage_in_gb(self, storage_in_gb):
        """Sets the storage_in_gb of this DeviceInventoryData.


        :param storage_in_gb: The storage_in_gb of this DeviceInventoryData.  # noqa: E501
        :type: str
        """

        self._storage_in_gb = storage_in_gb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceInventoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInventoryData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceInventoryData):
            return True

        return self.to_dict() != other.to_dict()
