# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fmc_client.api_client import ApiClient


class UpdatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cancel_upgrade(self, body, **kwargs):  # noqa: E501
        """create_cancel_upgrade  # noqa: E501

        **API to trigger Cancel of a failed upgrade. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cancel_upgrade(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancelUpgrade body: The input representation of CancelUpgrade object model. (required)
        :return: CancelUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cancel_upgrade_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cancel_upgrade_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_cancel_upgrade_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_cancel_upgrade  # noqa: E501

        **API to trigger Cancel of a failed upgrade. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cancel_upgrade_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancelUpgrade body: The input representation of CancelUpgrade object model. (required)
        :return: CancelUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cancel_upgrade" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_cancel_upgrade`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/cancelupgrades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancelUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_retry_upgrade(self, body, **kwargs):  # noqa: E501
        """create_retry_upgrade  # noqa: E501

        **API to trigger Retry of a failed upgrade. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_retry_upgrade(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetryUpgrade body: The input representation of RetryUpgrade object model. (required)
        :return: RetryUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_retry_upgrade_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_retry_upgrade_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_retry_upgrade_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_retry_upgrade  # noqa: E501

        **API to trigger Retry of a failed upgrade. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_retry_upgrade_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetryUpgrade body: The input representation of RetryUpgrade object model. (required)
        :return: RetryUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_retry_upgrade" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_retry_upgrade`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/retryupgrades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RetryUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_upgrade(self, body, **kwargs):  # noqa: E501
        """create_upgrade  # noqa: E501

        **API to trigger upgrade. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_upgrade(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Upgrade body: The input representation of Upgrade object model. (required)
        :return: Upgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_upgrade_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_upgrade_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_upgrade_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_upgrade  # noqa: E501

        **API to trigger upgrade. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_upgrade_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Upgrade body: The input representation of Upgrade object model. (required)
        :return: Upgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_upgrade" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_upgrade`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/upgrades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Upgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_upgrade_package(self, object_id, **kwargs):  # noqa: E501
        """delete_upgrade_package  # noqa: E501

        **API operation for listing upgrade packages. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_upgrade_package(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :return: UpgradePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_upgrade_package_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_upgrade_package_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def delete_upgrade_package_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """delete_upgrade_package  # noqa: E501

        **API operation for listing upgrade packages. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_upgrade_package_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :return: UpgradePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_upgrade_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_upgrade_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/upgradepackages/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradePackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_applicable_device(self, container_uuid, **kwargs):  # noqa: E501
        """get_all_applicable_device  # noqa: E501

        **Devices available for a particular upgrade package.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_applicable_device(container_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicableDeviceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_applicable_device_with_http_info(container_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_applicable_device_with_http_info(container_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_applicable_device_with_http_info(self, container_uuid, **kwargs):  # noqa: E501
        """get_all_applicable_device  # noqa: E501

        **Devices available for a particular upgrade package.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_applicable_device_with_http_info(container_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicableDeviceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_applicable_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_applicable_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/upgradepackages/{containerUUID}/applicabledevices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicableDeviceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_upgrade_package(self, **kwargs):  # noqa: E501
        """get_all_upgrade_package  # noqa: E501

        **API operation for listing upgrade packages.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_upgrade_package(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: UpgradePackageListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_upgrade_package_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_upgrade_package_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_upgrade_package_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_upgrade_package  # noqa: E501

        **API operation for listing upgrade packages.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_upgrade_package_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: UpgradePackageListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_upgrade_package" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/upgradepackages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradePackageListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_package(self, object_id, **kwargs):  # noqa: E501
        """get_upgrade_package  # noqa: E501

        **API operation for listing upgrade packages.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upgrade_package(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :return: UpgradePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_upgrade_package_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_package_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def get_upgrade_package_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """get_upgrade_package  # noqa: E501

        **API operation for listing upgrade packages.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upgrade_package_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :return: UpgradePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_upgrade_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_platform/v1/updates/upgradepackages/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradePackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
