# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fmc_client.api_client import ApiClient


class DeploymentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_deployment_request(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_deployment_request  # noqa: E501

        **Creates a request for deploying configuration changes to devices. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_deployment_request(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentRequest body: JSON data for deploying to devices. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DeploymentRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_deployment_request_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_deployment_request_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_deployment_request_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_deployment_request  # noqa: E501

        **Creates a request for deploying configuration changes to devices. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_deployment_request_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentRequest body: JSON data for deploying to devices. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DeploymentRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_deployment_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_deployment_request`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_deployment_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/deployment/deploymentrequests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_rollback_request(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rollback_request  # noqa: E501

        **Creates a request for rollback configuration to devices. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rollback_request(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RollbackRequest body: JSON data for rollback to devices. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RollbackRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rollback_request_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_rollback_request_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_rollback_request_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rollback_request  # noqa: E501

        **Creates a request for rollback configuration to devices. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rollback_request_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RollbackRequest body: JSON data for rollback to devices. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RollbackRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rollback_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_rollback_request`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_rollback_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/deployment/rollbackrequests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RollbackRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployable_device(self, domain_uuid, **kwargs):  # noqa: E501
        """get_deployable_device  # noqa: E501

        **Retrieves list of all devices with configuration changes, ready to be deployed.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployable_device(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str group_dependency: Group Dependency of the dirty policies. Allowed values are <code>true</code> or <code>false</code>. Group dependency value helps to add dependent policies in Selective Policy Deployment. Results will be shown only when expanded is set to true. It may affect the performance of the API.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DeployableDeviceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployable_device_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployable_device_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_deployable_device_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_deployable_device  # noqa: E501

        **Retrieves list of all devices with configuration changes, ready to be deployed.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployable_device_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str group_dependency: Group Dependency of the dirty policies. Allowed values are <code>true</code> or <code>false</code>. Group dependency value helps to add dependent policies in Selective Policy Deployment. Results will be shown only when expanded is set to true. It may affect the performance of the API.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DeployableDeviceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'group_dependency', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployable_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_deployable_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'group_dependency' in params:
            query_params.append(('groupDependency', params['group_dependency']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/deployment/deployabledevices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeployableDeviceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployment_detail(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_deployment_detail  # noqa: E501

        **Retrieves Deployment details for device**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_detail(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str filter: Value is of format <code>startTime:start_time_in_secs;endTime:end_time_in_secs;</code>. <br/><br/><code>startTime</code> -- start time in unix format (in seconds). startTime and endTime should be specified together.<br/><code>endTime</code> -- end time in unix format (in seconds). startTime and endTime should be specified together.<br/>
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DeploymentDetailListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployment_detail_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployment_detail_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_deployment_detail_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_deployment_detail  # noqa: E501

        **Retrieves Deployment details for device**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_detail_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str filter: Value is of format <code>startTime:start_time_in_secs;endTime:end_time_in_secs;</code>. <br/><br/><code>startTime</code> -- start time in unix format (in seconds). startTime and endTime should be specified together.<br/><code>endTime</code> -- end time in unix format (in seconds). startTime and endTime should be specified together.<br/>
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DeploymentDetailListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_deployment_detail`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_deployment_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/deployment/deployabledevices/{containerUUID}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentDetailListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_history(self, domain_uuid, **kwargs):  # noqa: E501
        """get_job_history  # noqa: E501

        **Retrieves all the deployment jobs.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_history(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: Supports only deviceUUID as the filter param. Value is of format <code>deviceUUID:{uuid};</code>
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: JobHistoryListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_history_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_history_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_job_history_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_job_history  # noqa: E501

        **Retrieves all the deployment jobs.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_history_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: Supports only deviceUUID as the filter param. Value is of format <code>deviceUUID:{uuid};</code>
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: JobHistoryListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_job_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/deployment/jobhistories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobHistoryListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pending_changes(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_pending_changes  # noqa: E501

        **Retrieves all the policy and object changes for the selected device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pending_changes(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str filter: The filter criteria for which the details have to be fetched - Only works when \"expanded\" is set to \"true\". Examples: ParentEntityTypes:AccessPolicy, ParentEntityTypes:RAVPNTopology, EntityUUID:0050568C-35A0-0ed3-0000-004294969351
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PendingChangesListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pending_changes_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pending_changes_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_pending_changes_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_pending_changes  # noqa: E501

        **Retrieves all the policy and object changes for the selected device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pending_changes_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str filter: The filter criteria for which the details have to be fetched - Only works when \"expanded\" is set to \"true\". Examples: ParentEntityTypes:AccessPolicy, ParentEntityTypes:RAVPNTopology, EntityUUID:0050568C-35A0-0ed3-0000-004294969351
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PendingChangesListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pending_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_pending_changes`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_pending_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/deployment/deployabledevices/{containerUUID}/pendingchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PendingChangesListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
