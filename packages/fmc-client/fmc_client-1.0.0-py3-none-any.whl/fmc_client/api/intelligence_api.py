# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fmc_client.api_client import ApiClient


class IntelligenceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_rest_discovery_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rest_discovery_info  # noqa: E501

        **API Operations on Discovery Info objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rest_discovery_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RESTDiscoveryInfo body: The input Discovery Info object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTDiscoveryInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rest_discovery_info_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_rest_discovery_info_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_rest_discovery_info_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rest_discovery_info  # noqa: E501

        **API Operations on Discovery Info objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rest_discovery_info_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RESTDiscoveryInfo body: The input Discovery Info object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTDiscoveryInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rest_discovery_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_rest_discovery_info`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_rest_discovery_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/taxiiconfig/discoveryinfo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTDiscoveryInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_rest_taxii_collection(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rest_taxii_collection  # noqa: E501

        **API Operations on Taxii Collection objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rest_taxii_collection(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RESTTaxiiCollection body: The input Taxii Collection object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTaxiiCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rest_taxii_collection_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_rest_taxii_collection_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_rest_taxii_collection_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rest_taxii_collection  # noqa: E501

        **API Operations on Taxii Collection objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rest_taxii_collection_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RESTTaxiiCollection body: The input Taxii Collection object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTaxiiCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rest_taxii_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_rest_taxii_collection`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_rest_taxii_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/taxiiconfig/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTTaxiiCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_rest_tid_source(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rest_tid_source  # noqa: E501

        **API Operations on Source objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rest_tid_source(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RESTTidSource body: The input Source object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rest_tid_source_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_rest_tid_source_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_rest_tid_source_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_rest_tid_source  # noqa: E501

        **API Operations on Source objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rest_tid_source_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RESTTidSource body: The input Source object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rest_tid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_rest_tid_source`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_rest_tid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/source', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTTidSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_rest_incident(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_rest_incident  # noqa: E501

        **API Operations on Incident objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rest_incident(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Incident. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIncident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_rest_incident_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_rest_incident_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_rest_incident_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_rest_incident  # noqa: E501

        **API Operations on Incident objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rest_incident_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Incident. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIncident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_rest_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_rest_incident`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_rest_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/incident/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIncident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_rest_tid_source(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_rest_tid_source  # noqa: E501

        **API Operations on Source objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rest_tid_source(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Source. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_rest_tid_source_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_rest_tid_source_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_rest_tid_source_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_rest_tid_source  # noqa: E501

        **API Operations on Source objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rest_tid_source_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Source. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_rest_tid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_rest_tid_source`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_rest_tid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/source/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTTidSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_rest_element(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_element  # noqa: E501

        **API Operations on Element objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_element(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTElementListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_rest_element_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_rest_element_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_rest_element_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_element  # noqa: E501

        **API Operations on Element objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_element_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTElementListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rest_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_rest_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/element', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTElementListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_rest_incident(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_incident  # noqa: E501

        **API Operations on Incident objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_incident(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTIncidentListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_rest_incident_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_rest_incident_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_rest_incident_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_incident  # noqa: E501

        **API Operations on Incident objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_incident_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTIncidentListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rest_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_rest_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/incident', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIncidentListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_rest_indicator(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_indicator  # noqa: E501

        **API Operations on Indicator objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_indicator(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTIndicatorListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_rest_indicator_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_rest_indicator_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_rest_indicator_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_indicator  # noqa: E501

        **API Operations on Indicator objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_indicator_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTIndicatorListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rest_indicator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_rest_indicator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/indicator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIndicatorListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_rest_observable(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_observable  # noqa: E501

        **API Operations on Observable objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_observable(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTObservableListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_rest_observable_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_rest_observable_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_rest_observable_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_observable  # noqa: E501

        **API Operations on Observable objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_observable_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTObservableListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rest_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_rest_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/observable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTObservableListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_rest_tid_source(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_tid_source  # noqa: E501

        **API Operations on Source objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_tid_source(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTTidSourceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_rest_tid_source_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_rest_tid_source_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_rest_tid_source_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_rest_tid_source  # noqa: E501

        **API Operations on Source objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rest_tid_source_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RESTTidSourceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rest_tid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_rest_tid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/source', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTTidSourceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rest_element(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_element  # noqa: E501

        **API Operations on Element objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_element(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Element. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rest_element_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rest_element_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_rest_element_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_element  # noqa: E501

        **API Operations on Element objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_element_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Element. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rest_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_rest_element`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_rest_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/element/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rest_incident(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_incident  # noqa: E501

        **API Operations on Incident objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_incident(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Incident. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIncident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rest_incident_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rest_incident_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_rest_incident_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_incident  # noqa: E501

        **API Operations on Incident objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_incident_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Incident. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIncident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rest_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_rest_incident`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_rest_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/incident/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIncident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rest_indicator(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_indicator  # noqa: E501

        **API Operations on Indicator objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_indicator(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Indicator. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rest_indicator_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rest_indicator_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_rest_indicator_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_indicator  # noqa: E501

        **API Operations on Indicator objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_indicator_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Indicator. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rest_indicator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_rest_indicator`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_rest_indicator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/indicator/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rest_observable(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_observable  # noqa: E501

        **API Operations on Observable objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_observable(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Observable. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTObservable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rest_observable_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rest_observable_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_rest_observable_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_observable  # noqa: E501

        **API Operations on Observable objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_observable_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Observable. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTObservable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rest_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_rest_observable`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_rest_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/observable/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTObservable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rest_settings(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_settings  # noqa: E501

        **API Operations on Settings objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_settings(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Settings object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rest_settings_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rest_settings_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_rest_settings_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_settings  # noqa: E501

        **API Operations on Settings objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_settings_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Settings object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rest_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_rest_settings`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_rest_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/settings/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rest_tid_source(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_tid_source  # noqa: E501

        **API Operations on Source objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_tid_source(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Source. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rest_tid_source_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rest_tid_source_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_rest_tid_source_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_rest_tid_source  # noqa: E501

        **API Operations on Source objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rest_tid_source_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Source. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rest_tid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_rest_tid_source`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_rest_tid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/source/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTTidSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rest_incident(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_incident  # noqa: E501

        **API Operations on Incident objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_incident(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Incident. (required)
        :param RESTIncident body: The input Incident object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIncident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rest_incident_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rest_incident_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_rest_incident_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_incident  # noqa: E501

        **API Operations on Incident objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_incident_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Incident. (required)
        :param RESTIncident body: The input Incident object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIncident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rest_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_rest_incident`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_rest_incident`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_rest_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/incident/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIncident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rest_indicator(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_indicator  # noqa: E501

        **API Operations on Indicator objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_indicator(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Indicator. (required)
        :param RESTIndicator body: The input Indicator object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rest_indicator_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rest_indicator_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_rest_indicator_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_indicator  # noqa: E501

        **API Operations on Indicator objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_indicator_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Indicator. (required)
        :param RESTIndicator body: The input Indicator object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rest_indicator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_rest_indicator`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_rest_indicator`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_rest_indicator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/indicator/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rest_observable(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_observable  # noqa: E501

        **API Operations on Observable objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_observable(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Observable. (required)
        :param RESTObservable body: The input Observable object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTObservable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rest_observable_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rest_observable_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_rest_observable_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_observable  # noqa: E501

        **API Operations on Observable objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_observable_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Observable. (required)
        :param RESTObservable body: The input Observable object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTObservable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rest_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_rest_observable`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_rest_observable`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_rest_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/observable/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTObservable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rest_settings(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_settings  # noqa: E501

        **API Operations on Settings objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_settings(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Settings object. (required)
        :param RESTSettings body: The input Settings object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rest_settings_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rest_settings_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_rest_settings_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_settings  # noqa: E501

        **API Operations on Settings objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_settings_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Settings object. (required)
        :param RESTSettings body: The input Settings object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rest_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_rest_settings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_rest_settings`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_rest_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/settings/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rest_tid_source(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_tid_source  # noqa: E501

        **API Operations on Source objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_tid_source(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Source. (required)
        :param RESTTidSource body: The input Source object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rest_tid_source_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rest_tid_source_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_rest_tid_source_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_rest_tid_source  # noqa: E501

        **API Operations on Source objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rest_tid_source_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Source. (required)
        :param RESTTidSource body: The input Source object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RESTTidSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rest_tid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_rest_tid_source`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_rest_tid_source`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_rest_tid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_tid/v1/domain/{domainUUID}/tid/source/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RESTTidSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
