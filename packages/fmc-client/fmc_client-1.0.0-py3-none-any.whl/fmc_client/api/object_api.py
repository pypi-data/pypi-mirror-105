# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fmc_client.api_client import ApiClient


class ObjectApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dns_server_group_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_server_group_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DNSServerGroupObject body: Input representation of DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_server_group_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_server_group_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_dns_server_group_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_server_group_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DNSServerGroupObject body: Input representation of DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_server_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_dns_server_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_dns_server_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/dnsservergroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DNSServerGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ik_ev1_i_psec_proposal(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ik_ev1_i_psec_proposal(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IKEv1IPsecProposal body: Input representation of IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ik_ev1_i_psec_proposal_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ik_ev1_i_psec_proposal_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ik_ev1_i_psec_proposal_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ik_ev1_i_psec_proposal_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IKEv1IPsecProposal body: Input representation of IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ik_ev1_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ik_ev1_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ik_ev1_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1ipsecproposals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv1IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ik_ev2_i_psec_proposal(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ik_ev2_i_psec_proposal(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IKEv2IPsecProposal body: Input representation of IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ik_ev2_i_psec_proposal_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ik_ev2_i_psec_proposal_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ik_ev2_i_psec_proposal_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ik_ev2_i_psec_proposal_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IKEv2IPsecProposal body: Input representation of IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ik_ev2_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ik_ev2_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ik_ev2_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2ipsecproposals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv2IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ikev1_policy_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ikev1_policy_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ikev1PolicyObject body: Input representation of IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ikev1_policy_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ikev1_policy_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ikev1_policy_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ikev1_policy_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ikev1PolicyObject body: Input representation of IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ikev1_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ikev1_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ikev1_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev1PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ikev2_policy_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ikev2_policy_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ikev2PolicyObject body: Input representation of IKEv2 object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ikev2_policy_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ikev2_policy_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ikev2_policy_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ikev2_policy_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ikev2PolicyObject body: Input representation of IKEv2 object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ikev2_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ikev2_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ikev2_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev2PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_fqdn_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_fqdn_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FQDNObject body: Input representation of FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for FQDN objects.
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_fqdn_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_fqdn_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_fqdn_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_fqdn_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FQDNObject body: Input representation of FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for FQDN objects.
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_fqdn_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_fqdn_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_fqdn_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_host_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_host_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostObject body: Input representation of host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for host objects.
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_host_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_host_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_host_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_host_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostObject body: Input representation of host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for host objects.
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_host_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_host_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_host_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_icmpv4_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_icmpv4_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ICMPV4Object body: The input icmpv4 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for ICMPv4 objects.
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_icmpv4_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_icmpv4_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_icmpv4_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_icmpv4_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ICMPV4Object body: The input icmpv4 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for ICMPv4 objects.
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_icmpv4_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_icmpv4_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_icmpv4_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_icmpv6_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_icmpv6_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ICMPV6Object body: The input icmpv6 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for ICMPv6 objects.
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_icmpv6_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_icmpv6_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_icmpv6_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_icmpv6_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ICMPV6Object body: The input icmpv6 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for ICMPv6 objects.
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_icmpv6_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_icmpv6_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_icmpv6_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_interface_group_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_interface_group_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InterfaceGroupObject body: The input interface group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for interface group objects.
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_interface_group_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_interface_group_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_interface_group_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_interface_group_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InterfaceGroupObject body: The input interface group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for interface group objects.
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_interface_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_interface_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_interface_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfacegroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_key_chain_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_key_chain_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeyChainObject body: Input representation of KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for KeyChain objects.
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_key_chain_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_key_chain_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_key_chain_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_key_chain_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeyChainObject body: Input representation of KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for KeyChain objects.
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_key_chain_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_key_chain_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_key_chain_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_network_group(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_network_group(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkGroup body: Input representation of network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for network group objects.
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_network_group_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_network_group_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_network_group_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_network_group_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkGroup body: Input representation of network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for network group objects.
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_network_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_network_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_network_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_network_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_network_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkObject body: The input network object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for network objects.
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_network_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_network_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_network_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_network_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkObject body: The input network object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for network objects.
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_network_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_network_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_network_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_port_object_group(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_port_object_group(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortObjectGroup body: The input port object group model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for port group objects.
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_port_object_group_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_port_object_group_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_port_object_group_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_port_object_group_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortObjectGroup body: The input port object group model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for port group objects.
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_port_object_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_port_object_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_port_object_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_protocol_port_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_protocol_port_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProtocolPortObject body: The input protocol port object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for protocol port objects.
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_protocol_port_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_protocol_port_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_protocol_port_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_protocol_port_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProtocolPortObject body: The input protocol port object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for protocol port objects.
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_protocol_port_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_range_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_range_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RangeObject body: Input representation of address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for range objects.
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_range_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_range_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_range_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_range_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RangeObject body: Input representation of address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for range objects.
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_range_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_range_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_range_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_security_zone_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_security_zone_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecurityZoneObject body: The input security zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for security zone objects.
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_security_zone_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_security_zone_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_security_zone_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_security_zone_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecurityZoneObject body: The input security zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for security zone objects.
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_security_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_security_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_security_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securityzones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_sla_monitor_object_model(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_sla_monitor_object_model(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SLAMonitorObjectModel body: Input representation of sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for SLA monitor objects.
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_sla_monitor_object_model_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_sla_monitor_object_model_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_sla_monitor_object_model_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_sla_monitor_object_model_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SLAMonitorObjectModel body: Input representation of sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for SLA monitor objects.
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_sla_monitor_object_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_sla_monitor_object_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_sla_monitor_object_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/slamonitors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SLAMonitorObjectModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_time_range(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_time_range(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeRange body: The input TimeRange object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for TimeRange objects.
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_time_range_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_time_range_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_time_range_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_time_range_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeRange body: The input TimeRange object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for TimeRange objects.
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_time_range`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timeranges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeRange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_time_zone_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_time_zone_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeZoneObject body: The input Time Zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for Time Zone objects.
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_time_zone_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_time_zone_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_time_zone_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_time_zone_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeZoneObject body: The input Time Zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for Time Zone objects.
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_time_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_time_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_time_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timezoneobjects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_tunnel_tags(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_tunnel_tags(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TunnelTags body: The input tunnel tags model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: This parameter specifies that bulk operation is being used in the query. This parameter is required for bulk object operations. Only bulk POST is currently supported for tunnel tags. Allowed values are 'true' and 'false'.
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_tunnel_tags_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_tunnel_tags_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_tunnel_tags_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_tunnel_tags_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TunnelTags body: The input tunnel tags model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: This parameter specifies that bulk operation is being used in the query. This parameter is required for bulk object operations. Only bulk POST is currently supported for tunnel tags. Allowed values are 'true' and 'false'.
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_tunnel_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_tunnel_tags`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_tunnel_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/tunneltags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TunnelTags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_url_group_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_url_group_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param URLGroupObject body: The input url group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for url group objects.
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_url_group_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_url_group_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_url_group_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_url_group_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param URLGroupObject body: The input url group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for url group objects.
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_url_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_url_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_url_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_url_object(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_url_object(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param URLObject body: The input url object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for url objects.
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_url_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_url_object_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_url_object_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_url_object_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param URLObject body: The input url object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for url objects.
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_url_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_url_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_url_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_vlan_tag(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_vlan_tag(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VlanTag body: The input vlantag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for vlan tag objects.
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_vlan_tag_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_vlan_tag_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_vlan_tag_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_vlan_tag_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VlanTag body: The input vlantag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for vlan tag objects.
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_vlan_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_vlan_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_vlan_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_vlan_tag_group(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_vlan_tag_group(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VlanTagGroup body: The input vlan group tag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for vlan group tags.
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_vlan_tag_group_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_vlan_tag_group_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_vlan_tag_group_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_vlan_tag_group_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VlanTagGroup body: The input vlan group tag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for vlan group tags.
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_vlan_tag_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_vlan_tag_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_vlan_tag_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_server_group_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_server_group_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_server_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_server_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_dns_server_group_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_server_group_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_server_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_dns_server_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_dns_server_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/dnsservergroups/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DNSServerGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_fqdn_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fqdn_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_fqdn_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_fqdn_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_fqdn_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fqdn_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fqdn_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_fqdn_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_fqdn_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_host_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_host_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_host_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_host_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_host_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_host_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_host_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_icmpv4_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_icmpv4_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_icmpv4_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_icmpv4_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_icmpv4_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_icmpv4_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_icmpv4_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_icmpv4_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_icmpv4_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_icmpv6_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_icmpv6_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_icmpv6_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_icmpv6_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_icmpv6_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_icmpv6_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_icmpv6_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_icmpv6_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_icmpv6_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ik_ev1_i_psec_proposal(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ik_ev1_i_psec_proposal(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ik_ev1_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ik_ev1_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ik_ev1_i_psec_proposal_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ik_ev1_i_psec_proposal_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ik_ev1_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ik_ev1_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ik_ev1_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1ipsecproposals/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv1IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ik_ev2_i_psec_proposal(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ik_ev2_i_psec_proposal(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ik_ev2_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ik_ev2_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ik_ev2_i_psec_proposal_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ik_ev2_i_psec_proposal_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ik_ev2_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ik_ev2_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ik_ev2_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2ipsecproposals/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv2IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ikev1_policy_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ikev1_policy_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ikev1_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ikev1_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ikev1_policy_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ikev1_policy_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ikev1_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ikev1_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ikev1_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1policies/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev1PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ikev2_policy_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ikev2_policy_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ikev2_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ikev2_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ikev2_policy_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ikev2_policy_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ikev2_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ikev2_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ikev2_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2policies/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev2PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_interface_group_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_interface_group_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_interface_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_interface_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_interface_group_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_interface_group_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_interface_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_interface_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_interface_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfacegroups/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_key_chain_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_key_chain_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_key_chain_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_key_chain_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_key_chain_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_key_chain_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_key_chain_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_key_chain_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_key_chain_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_group(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_group(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_network_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_network_group_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_group_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_network_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_network_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_network_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_network_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_network_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_network_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networks/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_port_object_group(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_port_object_group(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the port object group. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_port_object_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_port_object_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_port_object_group_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_port_object_group_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the port object group. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_port_object_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_port_object_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_port_object_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_protocol_port_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_protocol_port_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_protocol_port_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_protocol_port_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_protocol_port_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_protocol_port_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_protocol_port_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_range_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_range_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_range_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_range_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_range_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_range_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_range_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_range_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_range_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_security_zone_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_security_zone_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_security_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_security_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_security_zone_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_security_zone_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_security_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_security_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_security_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securityzones/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sla_monitor_object_model(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sla_monitor_object_model(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sla_monitor_object_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sla_monitor_object_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_sla_monitor_object_model_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sla_monitor_object_model_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sla_monitor_object_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_sla_monitor_object_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_sla_monitor_object_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/slamonitors/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SLAMonitorObjectModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_time_range(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_time_range(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a TimeRange object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_time_range_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_time_range_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_time_range_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_time_range_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a TimeRange object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_time_range`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timeranges/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeRange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_time_zone_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_time_zone_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Time Zone object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the object on given target ID.
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_time_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_time_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_time_zone_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_time_zone_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Time Zone object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the object on given target ID.
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_time_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_time_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_time_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timezoneobjects/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tunnel_tags(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tunnel_tags(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a tunnel tag. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tunnel_tags_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tunnel_tags_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_tunnel_tags_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tunnel_tags_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a tunnel tag. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tunnel_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_tunnel_tags`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_tunnel_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/tunneltags/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TunnelTags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_url_group_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_url_group_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_url_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_url_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_url_group_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_url_group_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_url_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_url_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_url_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_url_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_url_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_url_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_url_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_url_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_url_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_url_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_url_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_url_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vlan_tag(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vlan_tag(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vlan_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vlan_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_vlan_tag_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vlan_tag_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vlan_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_vlan_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_vlan_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vlan_tag_group(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vlan_tag_group(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vlan_tag_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vlan_tag_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_vlan_tag_group_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vlan_tag_group_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vlan_tag_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_vlan_tag_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_vlan_tag_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_any_protocol_port_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_any_protocol_port_object  # noqa: E501

        **Retrieves any protocol port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all any protocol port objects (all port objects with a protocol value of All).**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_any_protocol_port_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: AnyProtocolPortObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_any_protocol_port_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_any_protocol_port_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_any_protocol_port_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_any_protocol_port_object  # noqa: E501

        **Retrieves any protocol port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all any protocol port objects (all port objects with a protocol value of All).**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_any_protocol_port_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: AnyProtocolPortObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_any_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_any_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/anyprotocolportobjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyProtocolPortObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application  # noqa: E501

        **Retrieves the application object associated with the specified ID. If no ID is specified, retrieves list of all application objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application  # noqa: E501

        **Retrieves the application object associated with the specified ID. If no ID is specified, retrieves list of all application objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_category(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_category  # noqa: E501

        **Retrieves the application category object associated with the specified ID. If no ID is specified, retrieves list of all application category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_category(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationCategoryListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_category_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_category_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_category_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_category  # noqa: E501

        **Retrieves the application category object associated with the specified ID. If no ID is specified, retrieves list of all application category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_category_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationCategoryListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationcategories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationCategoryListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_filter(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_filter  # noqa: E501

        **Retrieves the application filter object associated with the specified ID. If no ID is specified, retrieves list of all application filter objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_filter(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationFilterListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_filter_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_filter_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_filter_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_filter  # noqa: E501

        **Retrieves the application filter object associated with the specified ID. If no ID is specified, retrieves list of all application filter objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_filter_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationFilterListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationfilters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationFilterListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_productivity(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_productivity  # noqa: E501

        **Retrieves the application productivity object associated with the specified ID. If no ID is specified, retrieves list of all application productivity objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_productivity(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationProductivityListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_productivity_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_productivity_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_productivity_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_productivity  # noqa: E501

        **Retrieves the application productivity object associated with the specified ID. If no ID is specified, retrieves list of all application productivity objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_productivity_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationProductivityListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_productivity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application_productivity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationproductivities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationProductivityListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_risk(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_risk  # noqa: E501

        **Retrieves the application risk object associated with the specified ID. If no ID is specified, retrieves list of all application risk objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_risk(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationRiskListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_risk_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_risk_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_risk_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_risk  # noqa: E501

        **Retrieves the application risk object associated with the specified ID. If no ID is specified, retrieves list of all application risk objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_risk_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationRiskListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_risk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application_risk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationrisks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationRiskListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_tag(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_tag  # noqa: E501

        **Retrieves the application tag object associated with the specified ID. If no ID is specified, retrieves list of all application tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_tag(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_tag_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_tag  # noqa: E501

        **Retrieves the application tag object associated with the specified ID. If no ID is specified, retrieves list of all application tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_tag_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationtags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationTagListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_type(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_type  # noqa: E501

        **Retrieves the application type object associated with the specified ID. If no ID is specified, retrieves list of all application type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_type(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationTypeListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_type_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_type_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_application_type_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_application_type  # noqa: E501

        **Retrieves the application type object associated with the specified ID. If no ID is specified, retrieves list of all application type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_type_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ApplicationTypeListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_application_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationtypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationTypeListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_as_path_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_as_path_list  # noqa: E501

        **Retrieves the aspath object associated with the specified ID. If no ID is specified, retrieves list of all aspath objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_as_path_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: AsPathListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_as_path_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_as_path_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_as_path_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_as_path_list  # noqa: E501

        **Retrieves the aspath object associated with the specified ID. If no ID is specified, retrieves list of all aspath objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_as_path_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: AsPathListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_as_path_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_as_path_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/aspathlists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsPathListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_community_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_community_list  # noqa: E501

        **Community lists object Read only.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_community_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: CommunityListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_community_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_community_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_community_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_community_list  # noqa: E501

        **Community lists object Read only.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_community_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: CommunityListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_community_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_community_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/communitylists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommunityListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_continent_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_continent_object  # noqa: E501

        **Retrieves the continent object associated with the specified ID. If no ID is specified, retrieves list of all continent objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_continent_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ContinentObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_continent_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_continent_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_continent_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_continent_object  # noqa: E501

        **Retrieves the continent object associated with the specified ID. If no ID is specified, retrieves list of all continent objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_continent_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ContinentObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_continent_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_continent_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/continents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContinentObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_country_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_country_object  # noqa: E501

        **Retrieves the country object associated with the specified ID. If no ID is specified, retrieves list of all country objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_country_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: CountryObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_country_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_country_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_country_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_country_object  # noqa: E501

        **Retrieves the country object associated with the specified ID. If no ID is specified, retrieves list of all country objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_country_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: CountryObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_country_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_country_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountryObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_dns_server_group_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_dns_server_group_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DNSServerGroupObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_dns_server_group_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_dns_server_group_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_dns_server_group_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_dns_server_group_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DNSServerGroupObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_dns_server_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_dns_server_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/dnsservergroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DNSServerGroupObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_end_point_device_type(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_end_point_device_type  # noqa: E501

        **Retrieves the endpoint device type object associated with the specified ID. If no ID is specified, retrieves list of all endpoint device type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_end_point_device_type(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: EndPointDeviceTypeListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_end_point_device_type_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_end_point_device_type_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_end_point_device_type_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_end_point_device_type  # noqa: E501

        **Retrieves the endpoint device type object associated with the specified ID. If no ID is specified, retrieves list of all endpoint device type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_end_point_device_type_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: EndPointDeviceTypeListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_end_point_device_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_end_point_device_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/endpointdevicetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndPointDeviceTypeListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_expanded_community_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_expanded_community_list  # noqa: E501

        **Extended community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_expanded_community_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ExpandedCommunityListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_expanded_community_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_expanded_community_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_expanded_community_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_expanded_community_list  # noqa: E501

        **Extended community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_expanded_community_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ExpandedCommunityListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_expanded_community_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_expanded_community_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/expandedcommunitylists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpandedCommunityListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_extended_access_list_model(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_extended_access_list_model  # noqa: E501

        **Retrieves list of all Extended Access List objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_extended_access_list_model(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ExtendedAccessListModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_extended_access_list_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_extended_access_list_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_extended_access_list_model_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_extended_access_list_model  # noqa: E501

        **Retrieves list of all Extended Access List objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_extended_access_list_model_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ExtendedAccessListModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_extended_access_list_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_extended_access_list_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/extendedaccesslists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedAccessListModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_fqdn_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fqdn_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FQDNObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_fqdn_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_fqdn_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_fqdn_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fqdn_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FQDNObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_fqdn_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_fqdn_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_fqdn_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fqdn_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a FQDN object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fqdn_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FQDNOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_fqdn_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_fqdn_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_fqdn_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fqdn_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a FQDN object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fqdn_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FQDNOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_fqdn_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_fqdn_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_fqdn_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_geo_location_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_geo_location_object  # noqa: E501

        **Retrieves the geolocation object associated with the specified ID. If no ID is specified, retrieves list of all geolocation objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_geo_location_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: GeoLocationObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_geo_location_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_geo_location_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_geo_location_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_geo_location_object  # noqa: E501

        **Retrieves the geolocation object associated with the specified ID. If no ID is specified, retrieves list of all geolocation objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_geo_location_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: GeoLocationObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_geo_location_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_geo_location_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/geolocations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoLocationObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_global_time_zone(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_global_time_zone  # noqa: E501

        **Retrieves the objects representing all the time zones defined in the IANA global time zone (tz) database.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_global_time_zone(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: GlobalTimeZoneListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_global_time_zone_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_global_time_zone_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_global_time_zone_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_global_time_zone  # noqa: E501

        **Retrieves the objects representing all the time zones defined in the IANA global time zone (tz) database.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_global_time_zone_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: GlobalTimeZoneListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_global_time_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_global_time_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/globaltimezones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalTimeZoneListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_host_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HostObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_host_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_host_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_host_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HostObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_host_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_host_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_host_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_host_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Host object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HostOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_host_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_host_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_host_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_host_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Host object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HostOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_host_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_host_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_host_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_i_pv4_prefix_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv4_prefix_list  # noqa: E501

        **Ipv4Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv4_prefix_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv4PrefixListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_i_pv4_prefix_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_i_pv4_prefix_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_i_pv4_prefix_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv4_prefix_list  # noqa: E501

        **Ipv4Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv4_prefix_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv4PrefixListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_i_pv4_prefix_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_i_pv4_prefix_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ipv4prefixlists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4PrefixListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_i_pv6_prefix_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv6_prefix_list  # noqa: E501

        **Ipv6Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv6_prefix_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv6PrefixListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_i_pv6_prefix_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_i_pv6_prefix_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_i_pv6_prefix_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv6_prefix_list  # noqa: E501

        **Ipv6Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv6_prefix_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv6PrefixListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_i_pv6_prefix_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_i_pv6_prefix_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ipv6prefixlists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6PrefixListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_icmpv4_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv4_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV4ObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_icmpv4_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_icmpv4_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_icmpv4_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv4_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV4ObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_icmpv4_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_icmpv4_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4ObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_icmpv4_object_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv4_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ICMPV4 object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv4_object_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV4ObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_icmpv4_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_icmpv4_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_icmpv4_object_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv4_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ICMPV4 object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv4_object_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV4ObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_icmpv4_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_icmpv4_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_icmpv4_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4ObjectOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_icmpv6_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv6_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV6ObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_icmpv6_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_icmpv6_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_icmpv6_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv6_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV6ObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_icmpv6_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_icmpv6_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6ObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_icmpv6_object_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv6_object_override  # noqa: E501

        **[DEV ERROR: Missing description]**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv6_object_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV6ObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_icmpv6_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_icmpv6_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_icmpv6_object_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_icmpv6_object_override  # noqa: E501

        **[DEV ERROR: Missing description]**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_icmpv6_object_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ICMPV6ObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_icmpv6_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_icmpv6_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_icmpv6_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6ObjectOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ik_ev1_i_psec_proposal(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ik_ev1_i_psec_proposal(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IKEv1IPsecProposalListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ik_ev1_i_psec_proposal_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ik_ev1_i_psec_proposal_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ik_ev1_i_psec_proposal_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ik_ev1_i_psec_proposal_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IKEv1IPsecProposalListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ik_ev1_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ik_ev1_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1ipsecproposals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv1IPsecProposalListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ik_ev2_i_psec_proposal(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ik_ev2_i_psec_proposal(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IKEv2IPsecProposalListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ik_ev2_i_psec_proposal_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ik_ev2_i_psec_proposal_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ik_ev2_i_psec_proposal_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ik_ev2_i_psec_proposal_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IKEv2IPsecProposalListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ik_ev2_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ik_ev2_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2ipsecproposals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv2IPsecProposalListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ikev1_policy_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ikev1_policy_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ikev1PolicyObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ikev1_policy_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ikev1_policy_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ikev1_policy_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ikev1_policy_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ikev1PolicyObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ikev1_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ikev1_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev1PolicyObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ikev2_policy_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ikev2_policy_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ikev2PolicyObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ikev2_policy_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ikev2_policy_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ikev2_policy_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ikev2_policy_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ikev2PolicyObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ikev2_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ikev2_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev2PolicyObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_interface_group_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_interface_group_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InterfaceGroupObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_interface_group_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_interface_group_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_interface_group_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_interface_group_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InterfaceGroupObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_interface_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_interface_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfacegroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceGroupObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_interface_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_interface_object  # noqa: E501

        **Retrieves list of all the interface objects both security zones and interface groups.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_interface_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InterfaceObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_interface_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_interface_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_interface_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_interface_object  # noqa: E501

        **Retrieves list of all the interface objects both security zones and interface groups.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_interface_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InterfaceObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_interface_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_interface_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfaceobjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ise_security_group_tag(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ise_security_group_tag  # noqa: E501

        **Retrieves the ISE security group tag object with the specified ID. If no ID is specified, retrieves list of all ISE security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ise_security_group_tag(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ISESecurityGroupTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ise_security_group_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ise_security_group_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ise_security_group_tag_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ise_security_group_tag  # noqa: E501

        **Retrieves the ISE security group tag object with the specified ID. If no ID is specified, retrieves list of all ISE security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ise_security_group_tag_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ISESecurityGroupTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ise_security_group_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ise_security_group_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/isesecuritygrouptags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ISESecurityGroupTagListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_key_chain_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_key_chain_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: KeyChainObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_key_chain_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_key_chain_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_key_chain_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_key_chain_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: KeyChainObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_key_chain_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_key_chain_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_key_chain_object_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_key_chain_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a KeyChain object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_key_chain_object_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: KeyChainObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_key_chain_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_key_chain_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_key_chain_object_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_key_chain_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a KeyChain object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_key_chain_object_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: KeyChainObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_key_chain_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_key_chain_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_key_chain_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObjectOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_network_group(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_group(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_network_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_network_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_network_group_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_group_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_network_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_network_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroupListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_network_group_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a NetworkGroup object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_group_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_network_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_network_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_network_group_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a NetworkGroup object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_group_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_network_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_network_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_network_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroupOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_network_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_network_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_network_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_network_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_network_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_network_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_network_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Network object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_network_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_network_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_network_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_network_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Network object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_network_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_network_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_network_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_network_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networks/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_policy_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_policy_list  # noqa: E501

        **Policy List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policy_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PolicyListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_policy_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_policy_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_policy_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_policy_list  # noqa: E501

        **Policy List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policy_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PolicyListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_policy_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_policy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/policylists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_port_object_group(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_port_object_group(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PortObjectGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_port_object_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_port_object_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_port_object_group_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_port_object_group_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PortObjectGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_port_object_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_port_object_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroupListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_port_object_group_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_port_object_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a PortObjectGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_port_object_group_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PortObjectGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_port_object_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_port_object_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_port_object_group_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_port_object_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a PortObjectGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_port_object_group_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PortObjectGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_port_object_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_port_object_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_port_object_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroupOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_protocol_port_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_protocol_port_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ProtocolPortObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_protocol_port_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_protocol_port_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_protocol_port_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_protocol_port_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ProtocolPortObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_protocol_port_object_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_protocol_port_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ProtocolPort object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_protocol_port_object_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ProtocolPortObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_protocol_port_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_protocol_port_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_protocol_port_object_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_protocol_port_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ProtocolPort object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_protocol_port_object_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: ProtocolPortObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_protocol_port_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_protocol_port_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_protocol_port_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObjectOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_range_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_range_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RangeObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_range_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_range_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_range_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_range_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RangeObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_range_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_range_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_range_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_range_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Range object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_range_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RangeOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_range_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_range_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_range_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_range_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Range object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_range_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RangeOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_range_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_range_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_range_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_realm(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_realm  # noqa: E501

        **Retrieves the realm object associated with the specified ID. If no ID is specified, retrieves list of all realm objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_realm(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RealmListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_realm_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_realm_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_realm_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_realm  # noqa: E501

        **Retrieves the realm object associated with the specified ID. If no ID is specified, retrieves list of all realm objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_realm_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RealmListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_realm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_realm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/realms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RealmListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_realm_user(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_realm_user  # noqa: E501

        **Retrieves the realm user object associated with the specified ID. If no ID is specified, retrieves list of all realm user objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_realm_user(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RealmUserListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_realm_user_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_realm_user_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_realm_user_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_realm_user  # noqa: E501

        **Retrieves the realm user object associated with the specified ID. If no ID is specified, retrieves list of all realm user objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_realm_user_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RealmUserListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_realm_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_realm_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/realmusers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RealmUserListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_realm_user_group(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_realm_user_group  # noqa: E501

        **Retrieves the realm user group object associated with the specified ID. If no ID is specified, retrieves list of all realm user group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_realm_user_group(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RealmUserGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_realm_user_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_realm_user_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_realm_user_group_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_realm_user_group  # noqa: E501

        **Retrieves the realm user group object associated with the specified ID. If no ID is specified, retrieves list of all realm user group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_realm_user_group_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RealmUserGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_realm_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_realm_user_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/realmusergroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RealmUserGroupListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_route_map(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_route_map  # noqa: E501

        **RouteMap Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_route_map(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RouteMapListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_route_map_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_route_map_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_route_map_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_route_map  # noqa: E501

        **RouteMap Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_route_map_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: RouteMapListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_route_map" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_route_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/routemaps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RouteMapListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_security_group_tag(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_security_group_tag  # noqa: E501

        **Retrieves the custom security group tag object associated with the specified ID. If no ID is specified, retrieves list of all custom security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_security_group_tag(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SecurityGroupTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_security_group_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_security_group_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_security_group_tag_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_security_group_tag  # noqa: E501

        **Retrieves the custom security group tag object associated with the specified ID. If no ID is specified, retrieves list of all custom security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_security_group_tag_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SecurityGroupTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_security_group_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_security_group_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securitygrouptags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityGroupTagListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_security_zone_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_security_zone_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SecurityZoneObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_security_zone_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_security_zone_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_security_zone_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_security_zone_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SecurityZoneObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_security_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_security_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securityzones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityZoneObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_siurl_feed(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_siurl_feed  # noqa: E501

        **Retrieves the Security Intelligence url feed object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url feed objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_siurl_feed(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SIURLFeedListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_siurl_feed_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_siurl_feed_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_siurl_feed_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_siurl_feed  # noqa: E501

        **Retrieves the Security Intelligence url feed object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url feed objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_siurl_feed_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SIURLFeedListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_siurl_feed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_siurl_feed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/siurlfeeds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SIURLFeedListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_siurl_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_siurl_list  # noqa: E501

        **Retrieves the Security Intelligence url list object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url list objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_siurl_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SIURLListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_siurl_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_siurl_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_siurl_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_siurl_list  # noqa: E501

        **Retrieves the Security Intelligence url list object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url list objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_siurl_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SIURLListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_siurl_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_siurl_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/siurllists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SIURLListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_sla_monitor_object_model(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sla_monitor_object_model(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SLAMonitorObjectModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_sla_monitor_object_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_sla_monitor_object_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_sla_monitor_object_model_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sla_monitor_object_model_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: SLAMonitorObjectModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sla_monitor_object_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_sla_monitor_object_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/slamonitors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SLAMonitorObjectModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_standard_acl(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_standard_acl  # noqa: E501

        **Standard AccessList CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standard_acl(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: StandardACLListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_standard_acl_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_standard_acl_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_standard_acl_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_standard_acl  # noqa: E501

        **Standard AccessList CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standard_acl_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: StandardACLListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_standard_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_standard_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/standardaccesslists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardACLListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_standard_community_list(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_standard_community_list  # noqa: E501

        **Standard community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standard_community_list(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: StandardCommunityListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_standard_community_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_standard_community_list_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_standard_community_list_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_standard_community_list  # noqa: E501

        **Standard community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standard_community_list_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: StandardCommunityListListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_standard_community_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_standard_community_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/standardcommunitylists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardCommunityListListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_time_range(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_time_range(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TimeRangeListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_time_range_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_time_range_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_time_range_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_time_range_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TimeRangeListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timeranges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeRangeListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_time_zone_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_time_zone_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TimeZoneObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_time_zone_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_time_zone_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_time_zone_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_time_zone_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TimeZoneObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_time_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_time_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timezoneobjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeZoneObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_tunnel_tags(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_tunnel_tags(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TunnelTagsListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_tunnel_tags_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_tunnel_tags_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_tunnel_tags_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_tunnel_tags_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TunnelTagsListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_tunnel_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_tunnel_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/tunneltags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TunnelTagsListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_url_category(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_category  # noqa: E501

        **Retrieves the url category object associated with the specified ID. If no ID is specified, retrieves list of all url category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_category(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: URLCategoryListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_url_category_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_url_category_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_url_category_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_category  # noqa: E501

        **Retrieves the url category object associated with the specified ID. If no ID is specified, retrieves list of all url category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_category_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: URLCategoryListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_url_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_url_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlcategories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLCategoryListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_url_group_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_group_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: URLGroupObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_url_group_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_url_group_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_url_group_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_group_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: URLGroupObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_url_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_url_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLGroupObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_url_group_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URLGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_group_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: UrlGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_url_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_url_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_url_group_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URLGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_group_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: UrlGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_url_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_url_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_url_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UrlGroupOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_url_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: URLObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_url_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_url_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_url_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: URLObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_url_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_url_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_url_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URL object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: UrlOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_url_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_url_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_url_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_url_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URL object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_url_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: UrlOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_url_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_url_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_url_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UrlOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_variable_set(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_variable_set  # noqa: E501

        **Retrieves the variable set object associated with the specified ID. If no ID is specified, retrieves list of all variable set objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_variable_set(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VariableSetListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_variable_set_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_variable_set_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_variable_set_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_variable_set  # noqa: E501

        **Retrieves the variable set object associated with the specified ID. If no ID is specified, retrieves list of all variable set objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_variable_set_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VariableSetListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_variable_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_variable_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/variablesets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VariableSetListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vlan_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vlan_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vlan_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vlan_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vlan_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vlan_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vlan_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vlan_tag(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_tag(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vlan_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vlan_tag_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vlan_tag_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_tag_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanTagListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vlan_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vlan_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vlan_tag_group(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_tag_group(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanTagGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vlan_tag_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vlan_tag_group_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vlan_tag_group_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_tag_group_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanTagGroupListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vlan_tag_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vlan_tag_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroupListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vlan_tag_group_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_tag_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanGroupTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_tag_group_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanTagGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vlan_tag_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vlan_tag_group_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vlan_tag_group_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vlan_tag_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanGroupTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vlan_tag_group_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VlanTagGroupOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vlan_tag_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vlan_tag_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vlan_tag_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroupOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vpn_pki_enrollment_model(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vpn_pki_enrollment_model  # noqa: E501

        **Retrieves the Cert Enrollment object associated with the specified ID. If no ID is specified for a GET, retrieves list of all PKI enrollment objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vpn_pki_enrollment_model(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VpnPKIEnrollmentModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vpn_pki_enrollment_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vpn_pki_enrollment_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vpn_pki_enrollment_model_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vpn_pki_enrollment_model  # noqa: E501

        **Retrieves the Cert Enrollment object associated with the specified ID. If no ID is specified for a GET, retrieves list of all PKI enrollment objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vpn_pki_enrollment_model_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VpnPKIEnrollmentModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vpn_pki_enrollment_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vpn_pki_enrollment_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/certenrollments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VpnPKIEnrollmentModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_any_protocol_port_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_any_protocol_port_object  # noqa: E501

        **Retrieves any protocol port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all any protocol port objects (all port objects with a protocol value of All).**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_any_protocol_port_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: AnyProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_any_protocol_port_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_any_protocol_port_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_any_protocol_port_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_any_protocol_port_object  # noqa: E501

        **Retrieves any protocol port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all any protocol port objects (all port objects with a protocol value of All).**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_any_protocol_port_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: AnyProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_any_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_any_protocol_port_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_any_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/anyprotocolportobjects/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyProtocolPortObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application  # noqa: E501

        **Retrieves the application object associated with the specified ID. If no ID is specified, retrieves list of all application objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application  # noqa: E501

        **Retrieves the application object associated with the specified ID. If no ID is specified, retrieves list of all application objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applications/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_category(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_category  # noqa: E501

        **Retrieves the application category object associated with the specified ID. If no ID is specified, retrieves list of all application category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_category(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_category_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_category_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_category_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_category  # noqa: E501

        **Retrieves the application category object associated with the specified ID. If no ID is specified, retrieves list of all application category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_category_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application_category`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationcategories/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_filter(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_filter  # noqa: E501

        **Retrieves the application filter object associated with the specified ID. If no ID is specified, retrieves list of all application filter objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_filter(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_filter_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_filter_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_filter_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_filter  # noqa: E501

        **Retrieves the application filter object associated with the specified ID. If no ID is specified, retrieves list of all application filter objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_filter_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application_filter`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationfilters/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_productivity(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_productivity  # noqa: E501

        **Retrieves the application productivity object associated with the specified ID. If no ID is specified, retrieves list of all application productivity objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_productivity(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationProductivity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_productivity_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_productivity_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_productivity_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_productivity  # noqa: E501

        **Retrieves the application productivity object associated with the specified ID. If no ID is specified, retrieves list of all application productivity objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_productivity_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationProductivity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_productivity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application_productivity`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application_productivity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationproductivities/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationProductivity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_risk(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_risk  # noqa: E501

        **Retrieves the application risk object associated with the specified ID. If no ID is specified, retrieves list of all application risk objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_risk(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationRisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_risk_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_risk_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_risk_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_risk  # noqa: E501

        **Retrieves the application risk object associated with the specified ID. If no ID is specified, retrieves list of all application risk objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_risk_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationRisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_risk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application_risk`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application_risk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationrisks/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationRisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_tag(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_tag  # noqa: E501

        **Retrieves the application tag object associated with the specified ID. If no ID is specified, retrieves list of all application tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_tag(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_tag_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_tag  # noqa: E501

        **Retrieves the application tag object associated with the specified ID. If no ID is specified, retrieves list of all application tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_tag_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationtags/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_type(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_type  # noqa: E501

        **Retrieves the application type object associated with the specified ID. If no ID is specified, retrieves list of all application type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_type(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_type_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_type_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_application_type_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_application_type  # noqa: E501

        **Retrieves the application type object associated with the specified ID. If no ID is specified, retrieves list of all application type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_type_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ApplicationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_application_type`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_application_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/applicationtypes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_as_path_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_as_path_list  # noqa: E501

        **Retrieves the aspath object associated with the specified ID. If no ID is specified, retrieves list of all aspath objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_path_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the asPath. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: AsPathList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_as_path_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_as_path_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_as_path_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_as_path_list  # noqa: E501

        **Retrieves the aspath object associated with the specified ID. If no ID is specified, retrieves list of all aspath objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_path_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the asPath. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: AsPathList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_as_path_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_as_path_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_as_path_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/aspathlists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsPathList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_community_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_community_list  # noqa: E501

        **Community lists object Read only.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the community lists object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: CommunityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_community_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_community_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_community_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_community_list  # noqa: E501

        **Community lists object Read only.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the community lists object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: CommunityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_community_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_community_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_community_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/communitylists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommunityList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_continent_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_continent_object  # noqa: E501

        **Retrieves the continent object associated with the specified ID. If no ID is specified, retrieves list of all continent objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_continent_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of continent objects. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ContinentObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_continent_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_continent_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_continent_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_continent_object  # noqa: E501

        **Retrieves the continent object associated with the specified ID. If no ID is specified, retrieves list of all continent objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_continent_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of continent objects. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ContinentObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_continent_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_continent_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_continent_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/continents/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContinentObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_country_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_country_object  # noqa: E501

        **Retrieves the country object associated with the specified ID. If no ID is specified, retrieves list of all country objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_country_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of continent objects. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: CountryObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_country_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_country_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_country_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_country_object  # noqa: E501

        **Retrieves the country object associated with the specified ID. If no ID is specified, retrieves list of all country objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_country_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of continent objects. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: CountryObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_country_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_country_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_country_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/countries/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountryObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_server_group_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_server_group_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_server_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_server_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_dns_server_group_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_server_group_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_server_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_dns_server_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_dns_server_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/dnsservergroups/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DNSServerGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_end_point_device_type(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_end_point_device_type  # noqa: E501

        **Retrieves the endpoint device type object associated with the specified ID. If no ID is specified, retrieves list of all endpoint device type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_end_point_device_type(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the endpoint device type object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: EndPointDeviceType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_end_point_device_type_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_end_point_device_type_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_end_point_device_type_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_end_point_device_type  # noqa: E501

        **Retrieves the endpoint device type object associated with the specified ID. If no ID is specified, retrieves list of all endpoint device type objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_end_point_device_type_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the endpoint device type object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: EndPointDeviceType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_end_point_device_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_end_point_device_type`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_end_point_device_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/endpointdevicetypes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndPointDeviceType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_expanded_community_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_expanded_community_list  # noqa: E501

        **Extended community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_expanded_community_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Extended community list object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ExpandedCommunityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_expanded_community_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_expanded_community_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_expanded_community_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_expanded_community_list  # noqa: E501

        **Extended community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_expanded_community_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Extended community list object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ExpandedCommunityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_expanded_community_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_expanded_community_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_expanded_community_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/expandedcommunitylists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpandedCommunityList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_extended_access_list_model(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_extended_access_list_model  # noqa: E501

        **Retrieves list of all Extended Access List objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extended_access_list_model(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique Identifier of a Extended Access List object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ExtendedAccessListModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_extended_access_list_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_extended_access_list_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_extended_access_list_model_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_extended_access_list_model  # noqa: E501

        **Retrieves list of all Extended Access List objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extended_access_list_model_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique Identifier of a Extended Access List object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ExtendedAccessListModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_extended_access_list_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_extended_access_list_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_extended_access_list_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/extendedaccesslists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedAccessListModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fqdn_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fqdn_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the FQDN object on given target ID.
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fqdn_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fqdn_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_fqdn_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fqdn_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the FQDN object on given target ID.
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fqdn_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_fqdn_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_fqdn_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fqdn_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fqdn_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a FQDN object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fqdn_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FQDNOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fqdn_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fqdn_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_fqdn_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fqdn_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a FQDN object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fqdn_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FQDNOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fqdn_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_fqdn_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_fqdn_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_fqdn_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_geo_location_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_geo_location_object  # noqa: E501

        **Retrieves the geolocation object associated with the specified ID. If no ID is specified, retrieves list of all geolocation objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_geo_location_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of geolocation objects. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: GeoLocationObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_geo_location_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_geo_location_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_geo_location_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_geo_location_object  # noqa: E501

        **Retrieves the geolocation object associated with the specified ID. If no ID is specified, retrieves list of all geolocation objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_geo_location_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of geolocation objects. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: GeoLocationObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_geo_location_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_geo_location_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_geo_location_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/geolocations/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoLocationObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_global_time_zone(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_global_time_zone  # noqa: E501

        **Retrieves the objects representing all the time zones defined in the IANA global time zone (tz) database.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_global_time_zone(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the global time zone as per the IANA tz database. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: GlobalTimeZone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_global_time_zone_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_global_time_zone_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_global_time_zone_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_global_time_zone  # noqa: E501

        **Retrieves the objects representing all the time zones defined in the IANA global time zone (tz) database.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_global_time_zone_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the global time zone as per the IANA tz database. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: GlobalTimeZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_global_time_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_global_time_zone`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_global_time_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/globaltimezones/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalTimeZone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_host_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the host object on given target ID.
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_host_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_host_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_host_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the host object on given target ID.
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_host_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_host_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_host_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_host_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Host object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: HostOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_host_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_host_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_host_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_host_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Host object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: HostOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_host_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_host_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_host_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_i_pv4_prefix_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv4_prefix_list  # noqa: E501

        **Ipv4Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv4_prefix_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Ipv4Prefix list. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4PrefixList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_i_pv4_prefix_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_i_pv4_prefix_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_i_pv4_prefix_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv4_prefix_list  # noqa: E501

        **Ipv4Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv4_prefix_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Ipv4Prefix list. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4PrefixList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_i_pv4_prefix_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_i_pv4_prefix_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_i_pv4_prefix_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ipv4prefixlists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4PrefixList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_i_pv6_prefix_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv6_prefix_list  # noqa: E501

        **Ipv6Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv6_prefix_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Ipv6Prefix list. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6PrefixList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_i_pv6_prefix_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_i_pv6_prefix_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_i_pv6_prefix_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv6_prefix_list  # noqa: E501

        **Ipv6Prefix List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv6_prefix_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Ipv6Prefix list. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6PrefixList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_i_pv6_prefix_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_i_pv6_prefix_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_i_pv6_prefix_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ipv6prefixlists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6PrefixList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_icmpv4_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv4_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the ICMPv4 object on given target ID.
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_icmpv4_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_icmpv4_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_icmpv4_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv4_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the ICMPv4 object on given target ID.
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_icmpv4_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_icmpv4_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_icmpv4_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_icmpv4_object_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv4_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ICMPV4 object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv4_object_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV4ObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_icmpv4_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_icmpv4_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_icmpv4_object_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv4_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ICMPV4 object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv4_object_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV4ObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_icmpv4_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_icmpv4_object_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_icmpv4_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_icmpv4_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4ObjectOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_icmpv6_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv6_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the ICMPv6 object on given target ID.
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_icmpv6_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_icmpv6_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_icmpv6_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv6_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the ICMPv6 object on given target ID.
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_icmpv6_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_icmpv6_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_icmpv6_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_icmpv6_object_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv6_object_override  # noqa: E501

        **[DEV ERROR: Missing description]**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv6_object_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: [DEV ERROR: Missing description] (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV6ObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_icmpv6_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_icmpv6_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_icmpv6_object_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_icmpv6_object_override  # noqa: E501

        **[DEV ERROR: Missing description]**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icmpv6_object_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: [DEV ERROR: Missing description] (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV6ObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_icmpv6_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_icmpv6_object_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_icmpv6_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_icmpv6_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6ObjectOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ik_ev1_i_psec_proposal(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ik_ev1_i_psec_proposal(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ik_ev1_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ik_ev1_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ik_ev1_i_psec_proposal_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ik_ev1_i_psec_proposal_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ik_ev1_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ik_ev1_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ik_ev1_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1ipsecproposals/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv1IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ik_ev2_i_psec_proposal(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ik_ev2_i_psec_proposal(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ik_ev2_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ik_ev2_i_psec_proposal_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ik_ev2_i_psec_proposal_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ik_ev2_i_psec_proposal_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ik_ev2_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ik_ev2_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ik_ev2_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2ipsecproposals/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv2IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ikev1_policy_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ikev1_policy_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ikev1_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ikev1_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ikev1_policy_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ikev1_policy_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ikev1_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ikev1_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ikev1_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1policies/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev1PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ikev2_policy_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ikev2_policy_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ikev2_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ikev2_policy_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ikev2_policy_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ikev2_policy_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ikev2_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ikev2_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ikev2_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2policies/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev2PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_group_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interface_group_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_interface_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_interface_group_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interface_group_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_interface_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_interface_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfacegroups/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_interface_object  # noqa: E501

        **Retrieves list of all the interface objects both security zones and interface groups.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interface_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_interface_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_interface_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_interface_object  # noqa: E501

        **Retrieves list of all the interface objects both security zones and interface groups.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interface_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_interface_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_interface_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfaceobjects/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ise_security_group_tag(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ise_security_group_tag  # noqa: E501

        **Retrieves the ISE security group tag object with the specified ID. If no ID is specified, retrieves list of all ISE security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ise_security_group_tag(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the ISE security group tag object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ISESecurityGroupTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ise_security_group_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ise_security_group_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ise_security_group_tag_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_ise_security_group_tag  # noqa: E501

        **Retrieves the ISE security group tag object with the specified ID. If no ID is specified, retrieves list of all ISE security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ise_security_group_tag_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the ISE security group tag object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ISESecurityGroupTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ise_security_group_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ise_security_group_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ise_security_group_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/isesecuritygrouptags/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ISESecurityGroupTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_key_chain_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_chain_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the KeyChain object on given target ID.
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_key_chain_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_key_chain_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_key_chain_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_chain_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the KeyChain object on given target ID.
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_key_chain_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_key_chain_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_key_chain_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_key_chain_object_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_key_chain_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a KeyChain object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_chain_object_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: KeyChainObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_key_chain_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_key_chain_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_key_chain_object_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_key_chain_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a KeyChain object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_chain_object_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: KeyChainObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_key_chain_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_key_chain_object_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_key_chain_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_key_chain_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObjectOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_address(self, domain_uuid, **kwargs):  # noqa: E501
        """get_network_address  # noqa: E501

        **Retrieves list of all  network and host objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_address(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkAddressListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_address_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_address_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_network_address_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_network_address  # noqa: E501

        **Retrieves list of all  network and host objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_address_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: NetworkAddressListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_network_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkaddresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkAddressListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_group(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_group(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the network group object on given target ID.
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_network_group_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_group_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the network group object on given target ID.
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_network_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_network_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_group_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_network_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a NetworkGroup object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_group_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_network_group_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_network_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a NetworkGroup object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_group_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_network_group_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_network_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_network_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroupOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the network object on given target ID.
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_network_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the network object on given target ID.
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_network_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_network_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networks/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_policy_list  # noqa: E501

        **Policy List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Policy List (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_policy_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_policy_list  # noqa: E501

        **Policy List Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Policy List (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_policy_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_policy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/policylists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_port_object(self, domain_uuid, **kwargs):  # noqa: E501
        """get_port_object  # noqa: E501

        **Retrieves list of all port objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_object(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PortObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_port_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_port_object_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_port_object_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_port_object  # noqa: E501

        **Retrieves list of all port objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_object_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: To be used in conjunction with <code>\"unusedOnly:true\"</code> to search for unused objects and <code>\"nameOrValue:{nameOrValue}\"</code> to search for both name and value.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: PortObjectListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_port_object_group(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_object_group(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the port object group. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the port group object on given target ID.
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_port_object_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_port_object_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_port_object_group_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_object_group_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the port object group. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the port group object on given target ID.
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port_object_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_port_object_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_port_object_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_port_object_group_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_port_object_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a PortObjectGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_object_group_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PortObjectGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_port_object_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_port_object_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_port_object_group_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_port_object_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a PortObjectGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_object_group_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PortObjectGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port_object_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_port_object_group_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_port_object_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_port_object_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroupOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_protocol_port_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_protocol_port_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the protocol port object on given target ID.
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_protocol_port_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_protocol_port_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_protocol_port_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_protocol_port_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the protocol port object on given target ID.
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_protocol_port_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_protocol_port_object_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_protocol_port_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ProtocolPort object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_protocol_port_object_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ProtocolPortObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_protocol_port_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_protocol_port_object_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_protocol_port_object_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_protocol_port_object_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a ProtocolPort object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_protocol_port_object_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ProtocolPortObjectOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_protocol_port_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_protocol_port_object_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_protocol_port_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_protocol_port_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObjectOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_range_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_range_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the range object on given target ID.
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_range_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_range_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_range_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_range_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the range object on given target ID.
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_range_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_range_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_range_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_range_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_range_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Range object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_range_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RangeOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_range_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_range_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_range_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_range_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a Range object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_range_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RangeOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_range_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_range_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_range_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_range_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_realm(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_realm  # noqa: E501

        **Retrieves the realm object associated with the specified ID. If no ID is specified, retrieves list of all realm objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realm(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of user realm. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Realm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_realm_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_realm_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_realm_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_realm  # noqa: E501

        **Retrieves the realm object associated with the specified ID. If no ID is specified, retrieves list of all realm objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realm_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of user realm. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Realm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_realm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_realm`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_realm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/realms/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Realm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_realm_user(self, object_id, realm_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_realm_user  # noqa: E501

        **Retrieves the realm user object associated with the specified ID. If no ID is specified, retrieves list of all realm user objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realm_user(object_id, realm_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of user. (required)
        :param str realm_uuid: The Realm UUID. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RealmUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_realm_user_with_http_info(object_id, realm_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_realm_user_with_http_info(object_id, realm_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_realm_user_with_http_info(self, object_id, realm_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_realm_user  # noqa: E501

        **Retrieves the realm user object associated with the specified ID. If no ID is specified, retrieves list of all realm user objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realm_user_with_http_info(object_id, realm_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of user. (required)
        :param str realm_uuid: The Realm UUID. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RealmUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'realm_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_realm_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_realm_user`")  # noqa: E501
        # verify the required parameter 'realm_uuid' is set
        if self.api_client.client_side_validation and ('realm_uuid' not in params or
                                                       params['realm_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `realm_uuid` when calling `get_realm_user`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_realm_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'realm_uuid' in params:
            query_params.append(('realmUuid', params['realm_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/realmusers/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RealmUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_realm_user_group(self, object_id, realm_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_realm_user_group  # noqa: E501

        **Retrieves the realm user group object associated with the specified ID. If no ID is specified, retrieves list of all realm user group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realm_user_group(object_id, realm_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of user groups. (required)
        :param str realm_uuid: The Realm UUID. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RealmUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_realm_user_group_with_http_info(object_id, realm_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_realm_user_group_with_http_info(object_id, realm_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_realm_user_group_with_http_info(self, object_id, realm_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_realm_user_group  # noqa: E501

        **Retrieves the realm user group object associated with the specified ID. If no ID is specified, retrieves list of all realm user group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realm_user_group_with_http_info(object_id, realm_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of user groups. (required)
        :param str realm_uuid: The Realm UUID. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RealmUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'realm_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_realm_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_realm_user_group`")  # noqa: E501
        # verify the required parameter 'realm_uuid' is set
        if self.api_client.client_side_validation and ('realm_uuid' not in params or
                                                       params['realm_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `realm_uuid` when calling `get_realm_user_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_realm_user_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'realm_uuid' in params:
            query_params.append(('realmUuid', params['realm_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/realmusergroups/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RealmUserGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_route_map(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_route_map  # noqa: E501

        **RouteMap Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_route_map(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the RouteMap (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RouteMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_route_map_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_route_map_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_route_map_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_route_map  # noqa: E501

        **RouteMap Object CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_route_map_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the RouteMap (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RouteMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_route_map" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_route_map`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_route_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/routemaps/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RouteMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_security_group_tag(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_security_group_tag  # noqa: E501

        **Retrieves the custom security group tag object associated with the specified ID. If no ID is specified, retrieves list of all custom security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_group_tag(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the security group tag object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityGroupTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_security_group_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_security_group_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_security_group_tag_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_security_group_tag  # noqa: E501

        **Retrieves the custom security group tag object associated with the specified ID. If no ID is specified, retrieves list of all custom security group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_group_tag_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the security group tag object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityGroupTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_security_group_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_security_group_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_security_group_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securitygrouptags/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityGroupTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_security_zone_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_zone_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_security_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_security_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_security_zone_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_zone_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_security_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_security_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_security_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securityzones/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_siurl_feed(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_siurl_feed  # noqa: E501

        **Retrieves the Security Intelligence url feed object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url feed objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_siurl_feed(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier of Security Intelligence url feed object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SIURLFeed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_siurl_feed_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_siurl_feed_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_siurl_feed_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_siurl_feed  # noqa: E501

        **Retrieves the Security Intelligence url feed object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url feed objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_siurl_feed_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier of Security Intelligence url feed object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SIURLFeed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_siurl_feed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_siurl_feed`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_siurl_feed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/siurlfeeds/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SIURLFeed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_siurl_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_siurl_list  # noqa: E501

        **Retrieves the Security Intelligence url list object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url list objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_siurl_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier of Security Intelligence url list object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SIURLList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_siurl_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_siurl_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_siurl_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_siurl_list  # noqa: E501

        **Retrieves the Security Intelligence url list object associated with the specified ID. If no ID is specified, retrieves list of all Security Intelligence url list objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_siurl_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier of Security Intelligence url list object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SIURLList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_siurl_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_siurl_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_siurl_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/siurllists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SIURLList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sla_monitor_object_model(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sla_monitor_object_model(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sla_monitor_object_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sla_monitor_object_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_sla_monitor_object_model_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sla_monitor_object_model_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sla_monitor_object_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_sla_monitor_object_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_sla_monitor_object_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/slamonitors/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SLAMonitorObjectModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standard_acl(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_standard_acl  # noqa: E501

        **Standard AccessList CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_standard_acl(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the standard access list. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: StandardACL
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_standard_acl_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standard_acl_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_standard_acl_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_standard_acl  # noqa: E501

        **Standard AccessList CRUD**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_standard_acl_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the standard access list. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: StandardACL
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standard_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_standard_acl`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_standard_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/standardaccesslists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardACL',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standard_community_list(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_standard_community_list  # noqa: E501

        **Standard community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_standard_community_list(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Standard community list object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: StandardCommunityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_standard_community_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standard_community_list_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_standard_community_list_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_standard_community_list  # noqa: E501

        **Standard community list object CRUD.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_standard_community_list_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: UUID of the Standard community list object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: StandardCommunityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standard_community_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_standard_community_list`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_standard_community_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/standardcommunitylists/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardCommunityList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_time_range(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_range(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a TimeRange object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_time_range_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_time_range_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_time_range_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_range_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a TimeRange object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_time_range`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timeranges/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeRange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_time_zone_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_zone_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Time Zone object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the object on given target ID.
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_time_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_time_zone_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_time_zone_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_zone_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Time Zone object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the object on given target ID.
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_time_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_time_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timezoneobjects/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_time_zone_object_override(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_time_zone_object_override  # noqa: E501

        **Retrieves all (Domain and Device) overrides on a TimeZoneObject. Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_zone_object_override(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TimeZoneObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_time_zone_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_time_zone_object_override_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_time_zone_object_override_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_time_zone_object_override  # noqa: E501

        **Retrieves all (Domain and Device) overrides on a TimeZoneObject. Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_zone_object_override_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: TimeZoneObjectOverrideListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_zone_object_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_time_zone_object_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_time_zone_object_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timezoneobjects/{containerUUID}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeZoneObjectOverrideListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tunnel_tags(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tunnel_tags(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a tunnel tag. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tunnel_tags_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tunnel_tags_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_tunnel_tags_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tunnel_tags_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a tunnel tag. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tunnel_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_tunnel_tags`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_tunnel_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/tunneltags/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TunnelTags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_url_category(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_url_category  # noqa: E501

        **Retrieves the url category object associated with the specified ID. If no ID is specified, retrieves list of all url category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_category(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_url_category_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_url_category_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_url_category_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_url_category  # noqa: E501

        **Retrieves the url category object associated with the specified ID. If no ID is specified, retrieves list of all url category objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_category_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_url_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_url_category`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_url_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlcategories/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_url_group_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_group_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the url group object on given target ID.
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_url_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_url_group_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_url_group_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_group_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the url group object on given target ID.
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_url_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_url_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_url_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_url_group_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_url_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URLGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_group_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: UrlGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_url_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_url_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_url_group_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_url_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URLGroup.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_group_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: UrlGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_url_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_url_group_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_url_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_url_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UrlGroupOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_url_object(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_object(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the url object on given target ID.
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_url_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_url_object_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_url_object_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_object_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the url object on given target ID.
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_url_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_url_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_url_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_url_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_url_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URL object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: UrlOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_url_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_url_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_url_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_url_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a URL object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_url_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: UrlOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_url_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_url_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_url_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_url_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UrlOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variable_set(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_variable_set  # noqa: E501

        **Retrieves the variable set object associated with the specified ID. If no ID is specified, retrieves list of all variable set objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variable_set(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the variable set object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VariableSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variable_set_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variable_set_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_variable_set_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_variable_set  # noqa: E501

        **Retrieves the variable set object associated with the specified ID. If no ID is specified, retrieves list of all variable set objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variable_set_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the variable set object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VariableSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variable_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_variable_set`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_variable_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/variablesets/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VariableSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vlan_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vlan_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vlan_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vlan_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vlan_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vlan_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vlan_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vlan_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vlan_tag(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_tag(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the vlantag object on given target ID.
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vlan_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vlan_tag_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vlan_tag_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_tag_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the vlantag object on given target ID.
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vlan_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vlan_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vlan_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vlan_tag_group(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_tag_group(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the vlan group tag object on given target ID.
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vlan_tag_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vlan_tag_group_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vlan_tag_group_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_tag_group_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str override_target_id: Retrieves the override(s) associated with the vlan group tag object on given target ID.
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid', 'override_target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vlan_tag_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vlan_tag_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vlan_tag_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'override_target_id' in params:
            query_params.append(('overrideTargetId', params['override_target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vlan_tag_group_override(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_tag_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanGroupTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_tag_group_override(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTagGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vlan_tag_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vlan_tag_group_override_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vlan_tag_group_override_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vlan_tag_group_override  # noqa: E501

        **Retrieves all(Domain and Device) overrides on a VlanGroupTag Object.Response will always be in expanded form. If passed, the \"expanded\" query parameter will be ignored.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vlan_tag_group_override_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Input NOT Expected here (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTagGroupOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vlan_tag_group_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vlan_tag_group_override`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vlan_tag_group_override`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vlan_tag_group_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags/{containerUUID}/overrides/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroupOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpn_pki_enrollment_model(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_vpn_pki_enrollment_model  # noqa: E501

        **Retrieves the Cert Enrollment object associated with the specified ID. If no ID is specified for a GET, retrieves list of all PKI enrollment objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpn_pki_enrollment_model(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for Cert Enrollment object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VpnPKIEnrollmentModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpn_pki_enrollment_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpn_pki_enrollment_model_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vpn_pki_enrollment_model_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_vpn_pki_enrollment_model  # noqa: E501

        **Retrieves the Cert Enrollment object associated with the specified ID. If no ID is specified for a GET, retrieves list of all PKI enrollment objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpn_pki_enrollment_model_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for Cert Enrollment object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VpnPKIEnrollmentModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpn_pki_enrollment_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vpn_pki_enrollment_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vpn_pki_enrollment_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/certenrollments/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VpnPKIEnrollmentModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dns_server_group_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dns_server_group_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for DNS Server Group object. (required)
        :param DNSServerGroupObject body: Input representation of DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dns_server_group_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dns_server_group_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_dns_server_group_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_dns_server_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the DNS Server Group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all DNS Server Group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dns_server_group_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for DNS Server Group object. (required)
        :param DNSServerGroupObject body: Input representation of DNS Server Group object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DNSServerGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dns_server_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_dns_server_group_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_dns_server_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_dns_server_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/dnsservergroups/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DNSServerGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_fqdn_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fqdn_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for FQDN object. (required)
        :param FQDNObject body: Input representation of FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_fqdn_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_fqdn_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_fqdn_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_fqdn_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the FQDN object associated with the specified ID. If no ID is specified for a GET, retrieves list of all FQDN objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fqdn_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for FQDN object. (required)
        :param FQDNObject body: Input representation of FQDN object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FQDNObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fqdn_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_fqdn_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_fqdn_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_fqdn_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/fqdns/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FQDNObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_host_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_host_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for host object. (required)
        :param HostObject body: Input representation of host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_host_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_host_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_host_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_host_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the host object associated with the specified ID. If no ID is specified for a GET, retrieves list of all host objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_host_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for host object. (required)
        :param HostObject body: Input representation of host object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: HostObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_host_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_host_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_host_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_host_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/hosts/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_icmpv4_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_icmpv4_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param ICMPV4Object body: The input icmpv4 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_icmpv4_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_icmpv4_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_icmpv4_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_icmpv4_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv4 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv4 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_icmpv4_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param ICMPV4Object body: The input icmpv4 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV4Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_icmpv4_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_icmpv4_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_icmpv4_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_icmpv4_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv4objects/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV4Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_icmpv6_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_icmpv6_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param ICMPV6Object body: The input icmpv6 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_icmpv6_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_icmpv6_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_icmpv6_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_icmpv6_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the icmpv6 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all icmpv6 objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_icmpv6_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param ICMPV6Object body: The input icmpv6 object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ICMPV6Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_icmpv6_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_icmpv6_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_icmpv6_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_icmpv6_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/icmpv6objects/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ICMPV6Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ik_ev1_i_psec_proposal(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ik_ev1_i_psec_proposal(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 IPSec Proposal object. (required)
        :param IKEv1IPsecProposal body: Input representation of IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ik_ev1_i_psec_proposal_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ik_ev1_i_psec_proposal_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ik_ev1_i_psec_proposal_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ik_ev1_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ik_ev1_i_psec_proposal_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 IPSec Proposal object. (required)
        :param IKEv1IPsecProposal body: Input representation of IKEv1 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv1IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ik_ev1_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ik_ev1_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ik_ev1_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ik_ev1_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1ipsecproposals/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv1IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ik_ev2_i_psec_proposal(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ik_ev2_i_psec_proposal(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 IPSec Proposal object. (required)
        :param IKEv2IPsecProposal body: Input representation of IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ik_ev2_i_psec_proposal_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ik_ev2_i_psec_proposal_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ik_ev2_i_psec_proposal_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ik_ev2_i_psec_proposal  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 IPSec Proposal associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 IPSec Proposal objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ik_ev2_i_psec_proposal_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 IPSec Proposal object. (required)
        :param IKEv2IPsecProposal body: Input representation of IKEv2 IPSec Proposal object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IKEv2IPsecProposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ik_ev2_i_psec_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ik_ev2_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ik_ev2_i_psec_proposal`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ik_ev2_i_psec_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2ipsecproposals/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IKEv2IPsecProposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ikev1_policy_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ikev1_policy_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 policy object. (required)
        :param Ikev1PolicyObject body: Input representation of IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ikev1_policy_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ikev1_policy_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ikev1_policy_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ikev1_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv1 policy object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv1 policy objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ikev1_policy_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv1 policy object. (required)
        :param Ikev1PolicyObject body: Input representation of IKEv1 policy object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev1PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ikev1_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ikev1_policy_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ikev1_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ikev1_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev1policies/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev1PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ikev2_policy_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ikev2_policy_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 monitor object. (required)
        :param Ikev2PolicyObject body: Input representation of IKEv2 object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ikev2_policy_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ikev2_policy_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ikev2_policy_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_ikev2_policy_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IKEv2 object associated with the specified ID. If no ID is specified for a GET, retrieves list of all IKEv2 monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ikev2_policy_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for IKEv2 monitor object. (required)
        :param Ikev2PolicyObject body: Input representation of IKEv2 object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ikev2PolicyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ikev2_policy_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ikev2_policy_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ikev2_policy_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ikev2_policy_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ikev2policies/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ikev2PolicyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_interface_group_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_interface_group_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param InterfaceGroupObject body: The input interface group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_interface_group_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_interface_group_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_interface_group_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_interface_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Interface group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all interface group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_interface_group_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param InterfaceGroupObject body: The input interface group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_interface_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_interface_group_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_interface_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_interface_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/interfacegroups/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_key_chain_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_key_chain_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for KeyChain object. (required)
        :param KeyChainObject body: Input representation of KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_key_chain_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_key_chain_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_key_chain_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_key_chain_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the Keychain object associated with the specified ID. If no ID is specified for a GET, retrieves list of all Keychain objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_key_chain_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for KeyChain object. (required)
        :param KeyChainObject body: Input representation of KeyChain object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: KeyChainObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_key_chain_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_key_chain_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_key_chain_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_key_chain_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/keychains/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyChainObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_network_group(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_network_group(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a network group. (required)
        :param NetworkGroup body: Input representation of network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_network_group_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_network_group_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_network_group_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_network_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all network group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_network_group_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a network group. (required)
        :param NetworkGroup body: Input representation of network group. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_network_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_network_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_network_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_network_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networkgroups/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_network_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_network_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param NetworkObject body: The input network object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_network_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_network_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_network_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_network_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the network objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all network objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_network_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param NetworkObject body: The input network object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: NetworkObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_network_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_network_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_network_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_network_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/networks/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_port_object_group(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_port_object_group(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the port object group. (required)
        :param PortObjectGroup body: The input port object group model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_port_object_group_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_port_object_group_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_port_object_group_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_port_object_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the port object group object associated with the specified ID. If no ID is specified for a GET, retrieves list of all port object group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_port_object_group_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the port object group. (required)
        :param PortObjectGroup body: The input port object group model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: PortObjectGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_port_object_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_port_object_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_port_object_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_port_object_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/portobjectgroups/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortObjectGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_protocol_port_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_protocol_port_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param ProtocolPortObject body: The input protocol port object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_protocol_port_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_protocol_port_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_protocol_port_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_protocol_port_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the protocol(tcp/udp) port object associated with the specified ID. If no ID is specified for a GET, retrieves list of all protocol(tcp/udp) port objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_protocol_port_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param ProtocolPortObject body: The input protocol port object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: ProtocolPortObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_protocol_port_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_protocol_port_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_protocol_port_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_protocol_port_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/protocolportobjects/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolPortObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_range_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_range_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for address range. (required)
        :param RangeObject body: Input representation of address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_range_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_range_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_range_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_range_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the address range object associated with the specified ID. If no ID is specified for a GET, retrieves list of all address range objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_range_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for address range. (required)
        :param RangeObject body: Input representation of address range. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: RangeObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_range_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_range_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_range_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_range_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/ranges/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RangeObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_security_zone_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_security_zone_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param SecurityZoneObject body: The input security zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_security_zone_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_security_zone_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_security_zone_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_security_zone_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the security zone objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all security zone objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_security_zone_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param SecurityZoneObject body: The input security zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SecurityZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_security_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_security_zone_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_security_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_security_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/securityzones/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sla_monitor_object_model(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sla_monitor_object_model(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for sla monitor object. (required)
        :param SLAMonitorObjectModel body: Input representation of sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sla_monitor_object_model_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sla_monitor_object_model_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_sla_monitor_object_model_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_sla_monitor_object_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the sla monitor object associated with the specified ID. If no ID is specified for a GET, retrieves list of all sla monitor objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sla_monitor_object_model_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for sla monitor object. (required)
        :param SLAMonitorObjectModel body: Input representation of sla monitor object. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: SLAMonitorObjectModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sla_monitor_object_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_sla_monitor_object_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_sla_monitor_object_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_sla_monitor_object_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/slamonitors/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SLAMonitorObjectModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_time_range(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_time_range(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a TimeRange object. (required)
        :param TimeRange body: The input TimeRange object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_time_range_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_time_range_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_time_range_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_time_range  # noqa: E501

        **Retrieves, deletes, creates and modifies the TimeRange object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_time_range_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a TimeRange object. (required)
        :param TimeRange body: The input TimeRange object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeRange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_time_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_time_range`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timeranges/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeRange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_time_zone_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_time_zone_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Time Zone object. (required)
        :param TimeZoneObject body: The input Time Zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_time_zone_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_time_zone_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_time_zone_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_time_zone_object  # noqa: E501

        **Retrieves, deletes, creates and modifies the Time Zone Object. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_time_zone_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the Time Zone object. (required)
        :param TimeZoneObject body: The input Time Zone object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TimeZoneObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_time_zone_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_time_zone_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_time_zone_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_time_zone_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/timezoneobjects/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeZoneObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tunnel_tags(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tunnel_tags(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a tunnel tag. (required)
        :param TunnelTags body: The input tunnel tags model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tunnel_tags_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tunnel_tags_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_tunnel_tags_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_tunnel_tags  # noqa: E501

        **Retrieves the tunnel tag object associated with the specified ID. If no ID is specified, retrieves list of all tunnel tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tunnel_tags_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a tunnel tag. (required)
        :param TunnelTags body: The input tunnel tags model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: TunnelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tunnel_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_tunnel_tags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_tunnel_tags`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_tunnel_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/tunneltags/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TunnelTags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_url_group_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_url_group_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param URLGroupObject body: The input url group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_url_group_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_url_group_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_url_group_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_url_group_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url group objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all url group objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_url_group_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param URLGroupObject body: The input url group object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_url_group_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_url_group_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_url_group_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_url_group_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urlgroups/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_url_object(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_url_object(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param URLObject body: The input url object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_url_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_url_object_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_url_object_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_url_object  # noqa: E501

        **Retrieves, deletes, creates, or modifies the url objects associated with the specified ID. If no ID is specified, retrieves list of all url objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_url_object_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param URLObject body: The input url object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: URLObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_url_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_url_object`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_url_object`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_url_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/urls/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='URLObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vlan_tag(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vlan_tag(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param VlanTag body: The input vlantag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vlan_tag_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vlan_tag_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_vlan_tag_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_vlan_tag  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlantag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlantag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vlan_tag_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param VlanTag body: The input vlantag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vlan_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_vlan_tag`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_vlan_tag`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_vlan_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlantags/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vlan_tag_group(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vlan_tag_group(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param VlanTagGroup body: The input vlan group tag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vlan_tag_group_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vlan_tag_group_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_vlan_tag_group_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_vlan_tag_group  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vlan group tag objects associated with the specified ID. If no ID is specified for a GET, retrieves list of all vlan group tag objects. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vlan_tag_group_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of the object. (required)
        :param VlanTagGroup body: The input vlan group tag object model. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VlanTagGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vlan_tag_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_vlan_tag_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_vlan_tag_group`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_vlan_tag_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/object/vlangrouptags/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanTagGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
