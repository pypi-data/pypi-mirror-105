# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fmc_client.api_client import ApiClient


class DevicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_device(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Device body: Input representation of device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_device_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_device_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_device_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Device body: Input representation of device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_device`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_device_copy_config_request(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_device_copy_config_request  # noqa: E501

        **Copy configuration operation on device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_copy_config_request(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCopyConfigRequest body: Input for Copy configuration request. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DeviceCopyConfigRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_device_copy_config_request_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_device_copy_config_request_with_http_info(body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_device_copy_config_request_with_http_info(self, body, domain_uuid, **kwargs):  # noqa: E501
        """create_device_copy_config_request  # noqa: E501

        **Copy configuration operation on device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_copy_config_request_with_http_info(body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCopyConfigRequest body: Input for Copy configuration request. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: DeviceCopyConfigRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device_copy_config_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_device_copy_config_request`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_device_copy_config_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/copyconfigrequests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceCopyConfigRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_fp_logical_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_fp_logical_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FPLogicalInterface body: The input logical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_fp_logical_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_fp_logical_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_fp_logical_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_fp_logical_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FPLogicalInterface body: The input logical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fp_logical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_fp_logical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fplogicalinterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPLogicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ftd_bridge_group_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_bridge_group_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDBridgeGroupInterface body: The input bridge group interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ftd_bridge_group_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ftd_bridge_group_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ftd_bridge_group_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_bridge_group_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDBridgeGroupInterface body: The input bridge group interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ftd_bridge_group_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ftd_bridge_group_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/bridgegroupinterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDBridgeGroupInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ftd_ether_channel_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_ether_channel_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDEtherChannelInterface body: The input ethernet channel interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ftd_ether_channel_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ftd_ether_channel_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ftd_ether_channel_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_ether_channel_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDEtherChannelInterface body: The input ethernet channel interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ftd_ether_channel_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ftd_ether_channel_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/etherchannelinterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDEtherChannelInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ftd_redundant_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_redundant_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDRedundantInterface body: The input redundant interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ftd_redundant_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ftd_redundant_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ftd_redundant_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_redundant_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDRedundantInterface body: The input redundant interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ftd_redundant_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ftd_redundant_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/redundantinterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDRedundantInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ftd_vlan_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_vlan_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDVlanInterface body: The input NGFW vlan interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ftd_vlan_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ftd_vlan_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ftd_vlan_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftd_vlan_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDVlanInterface body: The input NGFW vlan interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ftd_vlan_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ftd_vlan_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/vlaninterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVlanInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ftdvti_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftdvti_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDVTIInterface body: The input NGFW vti interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ftdvti_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ftdvti_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_ftdvti_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ftdvti_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDVTIInterface body: The input NGFW vti interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ftdvti_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_ftdvti_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualtunnelinterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVTIInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_inline_set(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_inline_set(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineSet body: The input inline set model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_inline_set_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_inline_set_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_inline_set_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_inline_set_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineSet body: The input inline set model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_inline_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_inline_set`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_inline_set`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_inline_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/inlinesets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_interface_event(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_interface_event  # noqa: E501

        **Retrieves list of all netmod events on the device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_interface_event(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InterfaceEvent body: The input representing action to be performed on netmod events. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_interface_event_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_interface_event_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_interface_event_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_interface_event  # noqa: E501

        **Retrieves list of all netmod events on the device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_interface_event_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InterfaceEvent body: The input representing action to be performed on netmod events. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InterfaceEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_interface_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_interface_event`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_interface_event`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_interface_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/interfaceevents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_ftd_sub_interface(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_ftd_sub_interface(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDSubInterface body: The input sub-interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for FTD sub interfaces.
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_ftd_sub_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_ftd_sub_interface_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_ftd_sub_interface_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_ftd_sub_interface_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FTDSubInterface body: The input sub-interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for FTD sub interfaces.
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_ftd_sub_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_multiple_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_ftd_sub_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/subinterfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDSubInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_i_pv4_static_route_model(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_i_pv4_static_route_model(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for IPv4 static routes.
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_i_pv4_static_route_model_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_i_pv4_static_route_model_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_i_pv4_static_route_model_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_i_pv4_static_route_model_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for IPv4 static routes.
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_multiple_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv4staticroutes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple_i_pv6_static_route_model(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_i_pv6_static_route_model(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for IPv6 static routes.
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple_i_pv6_static_route_model_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple_i_pv6_static_route_model_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_multiple_i_pv6_static_route_model_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_multiple_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple_i_pv6_static_route_model_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param bool bulk: Enables bulk create for IPv6 static routes.
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_multiple_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_multiple_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_multiple_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv6staticroutes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_router_model(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_router_model(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VirtualRouterModel body: The input Virtual Router Model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_virtual_router_model_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_virtual_router_model_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_virtual_router_model_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_router_model_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VirtualRouterModel body: The input Virtual Router Model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_router_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_virtual_router_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualRouterModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_switch(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_switch(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VirtualSwitch body: The input virtual switch model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_virtual_switch_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_virtual_switch_with_http_info(body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_virtual_switch_with_http_info(self, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_switch_with_http_info(body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VirtualSwitch body: The input virtual switch model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_virtual_switch`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_virtual_switch`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_virtual_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualswitches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vrf_i_pv4_static_route_model(self, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vrf_i_pv4_static_route_model(body, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VrfIPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vrf_i_pv4_static_route_model_with_http_info(body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vrf_i_pv4_static_route_model_with_http_info(body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_vrf_i_pv4_static_route_model_with_http_info(self, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vrf_i_pv4_static_route_model_with_http_info(body, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VrfIPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vrf_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `create_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_vrf_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv4staticroutes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vrf_i_pv6_static_route_model(self, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vrf_i_pv6_static_route_model(body, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VrfIPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vrf_i_pv6_static_route_model_with_http_info(body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vrf_i_pv6_static_route_model_with_http_info(body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def create_vrf_i_pv6_static_route_model_with_http_info(self, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """create_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vrf_i_pv6_static_route_model_with_http_info(body, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VrfIPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vrf_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `create_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `create_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `create_vrf_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv6staticroutes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_device(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_device(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_device_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_device_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_device_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """delete_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_device_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_device`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_fp_logical_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fp_logical_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a logical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_fp_logical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_fp_logical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_fp_logical_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fp_logical_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a logical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fp_logical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_fp_logical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fplogicalinterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPLogicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ftd_bridge_group_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_bridge_group_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a bridge group interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ftd_bridge_group_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ftd_bridge_group_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ftd_bridge_group_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_bridge_group_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a bridge group interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ftd_bridge_group_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ftd_bridge_group_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/bridgegroupinterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDBridgeGroupInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ftd_ether_channel_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_ether_channel_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a ethernet channel interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ftd_ether_channel_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ftd_ether_channel_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ftd_ether_channel_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_ether_channel_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a ethernet channel interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ftd_ether_channel_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ftd_ether_channel_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/etherchannelinterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDEtherChannelInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ftd_redundant_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_redundant_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a redundant interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ftd_redundant_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ftd_redundant_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ftd_redundant_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_redundant_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a redundant interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ftd_redundant_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ftd_redundant_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/redundantinterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDRedundantInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ftd_sub_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_sub_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a sub-interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ftd_sub_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ftd_sub_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ftd_sub_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_sub_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a sub-interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ftd_sub_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ftd_sub_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/subinterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDSubInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ftd_vlan_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_vlan_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vlan interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ftd_vlan_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ftd_vlan_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ftd_vlan_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftd_vlan_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vlan interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ftd_vlan_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ftd_vlan_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/vlaninterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVlanInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ftdvti_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftdvti_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vti interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ftdvti_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ftdvti_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_ftdvti_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ftdvti_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vti interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ftdvti_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_ftdvti_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualtunnelinterfaces/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVTIInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_i_pv4_static_route_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_i_pv4_static_route_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_i_pv4_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_i_pv4_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_i_pv4_static_route_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_i_pv4_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv4staticroutes/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_i_pv6_static_route_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_i_pv6_static_route_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_i_pv6_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_i_pv6_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_i_pv6_static_route_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_i_pv6_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv6staticroutes/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_inline_set(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_inline_set(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of an inline set. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_inline_set_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_inline_set_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_inline_set_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_inline_set_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of an inline set. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_inline_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_inline_set`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_inline_set`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_inline_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/inlinesets/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_virtual_router_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_virtual_router_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_virtual_router_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_virtual_router_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_virtual_router_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_virtual_router_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_virtual_router_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_virtual_router_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualRouterModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_virtual_switch(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_virtual_switch(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a virtual switch. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_virtual_switch_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_virtual_switch_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_virtual_switch_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_virtual_switch_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a virtual switch. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_virtual_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_virtual_switch`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_virtual_switch`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_virtual_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualswitches/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vrf_i_pv4_static_route_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vrf_i_pv4_static_route_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_vrf_i_pv4_static_route_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vrf_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `delete_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_vrf_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv4staticroutes/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vrf_i_pv6_static_route_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vrf_i_pv6_static_route_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vrf_i_pv6_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vrf_i_pv6_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def delete_vrf_i_pv6_static_route_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """delete_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vrf_i_pv6_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vrf_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `delete_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `delete_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `delete_vrf_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv6staticroutes/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_bgp_general_setting_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_bgp_general_setting_model  # noqa: E501

        **Retrieves BGP general settings associated with the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bgp_general_setting_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: BGPGeneralSettingModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_bgp_general_setting_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_bgp_general_setting_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_bgp_general_setting_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_bgp_general_setting_model  # noqa: E501

        **Retrieves BGP general settings associated with the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bgp_general_setting_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: BGPGeneralSettingModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_bgp_general_setting_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_bgp_general_setting_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_bgp_general_setting_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/bgpgeneralsettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BGPGeneralSettingModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_bgpi_pv_address_family_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bgpi_pv_address_family_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: BGPIPvAddressFamilyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_bgpi_pv_address_family_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_bgpi_pv_address_family_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_bgpi_pv_address_family_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bgpi_pv_address_family_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: BGPIPvAddressFamilyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_bgpi_pv_address_family_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_bgpi_pv_address_family_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/bgp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BGPIPvAddressFamilyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_device(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_device(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DeviceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_device_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_device_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_device_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_all_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_device_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: DeviceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_fp_logical_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fp_logical_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FPLogicalInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_fp_logical_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_fp_logical_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_fp_logical_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fp_logical_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FPLogicalInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_fp_logical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_fp_logical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fplogicalinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPLogicalInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_fp_physical_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fp_physical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the physical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all physical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fp_physical_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FPPhysicalInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_fp_physical_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_fp_physical_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_fp_physical_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_fp_physical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the physical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all physical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_fp_physical_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FPPhysicalInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_fp_physical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_fp_physical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_fp_physical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fpphysicalinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPPhysicalInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftd_bridge_group_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_bridge_group_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDBridgeGroupInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftd_bridge_group_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftd_bridge_group_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftd_bridge_group_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_bridge_group_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDBridgeGroupInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftd_bridge_group_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftd_bridge_group_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/bridgegroupinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDBridgeGroupInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftd_ether_channel_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_ether_channel_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDEtherChannelInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftd_ether_channel_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftd_ether_channel_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftd_ether_channel_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_ether_channel_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDEtherChannelInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftd_ether_channel_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftd_ether_channel_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/etherchannelinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDEtherChannelInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftd_physical_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_physical_interface  # noqa: E501

        **Retrieves the physical interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all physical interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_physical_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDPhysicalInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftd_physical_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftd_physical_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftd_physical_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_physical_interface  # noqa: E501

        **Retrieves the physical interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all physical interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_physical_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDPhysicalInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftd_physical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftd_physical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftd_physical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/physicalinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDPhysicalInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftd_redundant_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_redundant_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDRedundantInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftd_redundant_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftd_redundant_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftd_redundant_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_redundant_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDRedundantInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftd_redundant_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftd_redundant_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/redundantinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDRedundantInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftd_sub_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_sub_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDSubInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftd_sub_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftd_sub_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftd_sub_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_sub_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDSubInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftd_sub_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftd_sub_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/subinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDSubInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftd_vlan_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_vlan_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDVlanInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftd_vlan_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftd_vlan_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftd_vlan_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftd_vlan_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDVlanInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftd_vlan_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftd_vlan_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/vlaninterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVlanInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ftdvti_interface(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftdvti_interface(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDVTIInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ftdvti_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ftdvti_interface_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ftdvti_interface_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ftdvti_interface_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FTDVTIInterfaceListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ftdvti_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ftdvti_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualtunnelinterfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVTIInterfaceListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_i_pv4_static_route_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv4_static_route_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv4StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_i_pv4_static_route_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_i_pv4_static_route_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_i_pv4_static_route_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv4_static_route_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv4StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv4staticroutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4StaticRouteModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_i_pv6_static_route_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv6_static_route_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv6StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_i_pv6_static_route_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_i_pv6_static_route_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_i_pv6_static_route_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_i_pv6_static_route_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: IPv6StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv6staticroutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6StaticRouteModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_inline_set(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_inline_set(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InlineSetListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_inline_set_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_inline_set_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_inline_set_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_inline_set_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InlineSetListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_inline_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_inline_set`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_inline_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/inlinesets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSetListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ospf_interface_policy_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospf_interface_policy_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: OspfInterfacePolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ospf_interface_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ospf_interface_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ospf_interface_policy_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospf_interface_policy_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: OspfInterfacePolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ospf_interface_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ospf_interface_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfinterface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OspfInterfacePolicyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ospf_policy_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF V2 associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospf_policy_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: OspfPolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ospf_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ospf_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ospf_policy_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF V2 associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospf_policy_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: OspfPolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ospf_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ospf_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfv2routes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OspfPolicyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ospfv3_interface_policy_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospfv3_interface_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPFv3 Interface associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospfv3_interface_policy_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ospfv3InterfacePolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ospfv3_interface_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ospfv3_interface_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ospfv3_interface_policy_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospfv3_interface_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPFv3 Interface associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospfv3_interface_policy_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ospfv3InterfacePolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ospfv3_interface_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ospfv3_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ospfv3_interface_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfv3interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ospfv3InterfacePolicyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ospfv3_policy_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospfv3_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPF V3 associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospfv3_policy_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ospfv3PolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ospfv3_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ospfv3_policy_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_ospfv3_policy_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_ospfv3_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPF V3 associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ospfv3_policy_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: Ospfv3PolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ospfv3_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_ospfv3_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_ospfv3_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfv3routes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ospfv3PolicyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_static_route_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_static_route_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_static_route_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_static_route_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_static_route_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_static_route_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/staticroutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StaticRouteModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_virtual_router_model(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_virtual_router_model(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VirtualRouterModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_virtual_router_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_virtual_router_model_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_virtual_router_model_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_virtual_router_model_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VirtualRouterModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_virtual_router_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_virtual_router_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualRouterModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_virtual_switch(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_virtual_switch(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VirtualSwitchListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_virtual_switch_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_virtual_switch_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_virtual_switch_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_virtual_switch_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VirtualSwitchListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_virtual_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_virtual_switch`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_virtual_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualswitches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualSwitchListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vrf_bgpi_pv_address_family_model(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device for specified vrf.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_bgpi_pv_address_family_model(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfBGPIPvAddressFamilyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vrf_bgpi_pv_address_family_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vrf_bgpi_pv_address_family_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vrf_bgpi_pv_address_family_model_with_http_info(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device for specified vrf.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_bgpi_pv_address_family_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfBGPIPvAddressFamilyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtualrouter_uuid', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vrf_bgpi_pv_address_family_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_all_vrf_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vrf_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vrf_bgpi_pv_address_family_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/bgp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfBGPIPvAddressFamilyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vrf_i_pv4_static_route_model(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_i_pv4_static_route_model(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfIPv4StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vrf_i_pv4_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vrf_i_pv4_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vrf_i_pv4_static_route_model_with_http_info(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_i_pv4_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfIPv4StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtualrouter_uuid', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vrf_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_all_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vrf_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv4staticroutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv4StaticRouteModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vrf_i_pv6_static_route_model(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_i_pv6_static_route_model(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfIPv6StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vrf_i_pv6_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vrf_i_pv6_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vrf_i_pv6_static_route_model_with_http_info(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_i_pv6_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfIPv6StaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtualrouter_uuid', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vrf_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_all_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vrf_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv6staticroutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv6StaticRouteModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vrf_ospf_interface_policy_model(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_ospf_interface_policy_model(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfOspfInterfacePolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vrf_ospf_interface_policy_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vrf_ospf_interface_policy_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vrf_ospf_interface_policy_model_with_http_info(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_ospf_interface_policy_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfOspfInterfacePolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtualrouter_uuid', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vrf_ospf_interface_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_all_vrf_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vrf_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vrf_ospf_interface_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ospfinterface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfOspfInterfacePolicyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vrf_ospf_policy_model(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPFV2 associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_ospf_policy_model(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfOspfPolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vrf_ospf_policy_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vrf_ospf_policy_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vrf_ospf_policy_model_with_http_info(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPFV2 associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_ospf_policy_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfOspfPolicyModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtualrouter_uuid', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vrf_ospf_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_all_vrf_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vrf_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vrf_ospf_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ospfv2routes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfOspfPolicyModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vrf_static_route_model(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified virtual router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_static_route_model(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfStaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vrf_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vrf_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_all_vrf_static_route_model_with_http_info(self, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_all_vrf_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified virtual router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vrf_static_route_model_with_http_info(virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: VrfStaticRouteModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtualrouter_uuid', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vrf_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_all_vrf_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_all_vrf_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_all_vrf_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/staticroutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfStaticRouteModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bgp_general_setting_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_bgp_general_setting_model  # noqa: E501

        **Retrieves BGP general settings associated with the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bgp_general_setting_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a BGP general settings. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: BGPGeneralSettingModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bgp_general_setting_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bgp_general_setting_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_bgp_general_setting_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_bgp_general_setting_model  # noqa: E501

        **Retrieves BGP general settings associated with the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bgp_general_setting_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a BGP general settings. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: BGPGeneralSettingModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bgp_general_setting_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_bgp_general_setting_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_bgp_general_setting_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_bgp_general_setting_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/bgpgeneralsettings/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BGPGeneralSettingModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bgpi_pv_address_family_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bgpi_pv_address_family_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a BGP (ipv4 or ipv6) model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: BGPIPvAddressFamilyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bgpi_pv_address_family_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bgpi_pv_address_family_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_bgpi_pv_address_family_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bgpi_pv_address_family_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a BGP (ipv4 or ipv6) model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: BGPIPvAddressFamilyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bgpi_pv_address_family_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_bgpi_pv_address_family_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/bgp/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BGPIPvAddressFamilyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_commands(self, command, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_commands  # noqa: E501

        **Retrieves the show command output from the device. Make sure the minimum device version required for using commands api is >= 6.6.0.<br/> This api supports multi threading. Only 1 request can be handled per device concurrently and across devices upto 10 devices are supported by commands api concurrently.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commands(command, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command: The command filter query parameter should have value of show commands. The maximum word size of this field is 2. For eg: show interface, show running-config etc. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str parameters: The parameters filter query parameter should have values containing command values exceeding word size of 2 should be given as part of parameters field. For eg: ip brief, vpn etc.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: CommandsListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_commands_with_http_info(command, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_commands_with_http_info(command, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_commands_with_http_info(self, command, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_commands  # noqa: E501

        **Retrieves the show command output from the device. Make sure the minimum device version required for using commands api is >= 6.6.0.<br/> This api supports multi threading. Only 1 request can be handled per device concurrently and across devices upto 10 devices are supported by commands api concurrently.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commands_with_http_info(command, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command: The command filter query parameter should have value of show commands. The maximum word size of this field is 2. For eg: show interface, show running-config etc. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param str parameters: The parameters filter query parameter should have values containing command values exceeding word size of 2 should be given as part of parameters field. For eg: ip brief, vpn etc.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: CommandsListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command', 'container_uuid', 'domain_uuid', 'parameters', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_commands" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `get_commands`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_commands`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_commands`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'parameters' in params:
            query_params.append(('parameters', params['parameters']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/operational/commands', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommandsListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_with_http_info(object_id, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_device_with_http_info(self, object_id, domain_uuid, **kwargs):  # noqa: E501
        """get_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_with_http_info(object_id, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_device`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fp_interface_statistics(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fp_interface_statistics  # noqa: E501

        **Retrieves list of statistics for all interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fp_interface_statistics(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FPInterfaceStatisticsListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fp_interface_statistics_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fp_interface_statistics_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_fp_interface_statistics_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fp_interface_statistics  # noqa: E501

        **Retrieves list of statistics for all interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fp_interface_statistics_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: FPInterfaceStatisticsListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fp_interface_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_fp_interface_statistics`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_fp_interface_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fpinterfacestatistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPInterfaceStatisticsListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fp_logical_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fp_logical_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a logical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fp_logical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fp_logical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_fp_logical_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fp_logical_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a logical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fp_logical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_fp_logical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fplogicalinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPLogicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fp_physical_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fp_physical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the physical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all physical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fp_physical_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a physical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fp_physical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fp_physical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_fp_physical_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_fp_physical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the physical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all physical interfaces associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fp_physical_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a physical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fp_physical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_fp_physical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_fp_physical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_fp_physical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fpphysicalinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPPhysicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftd_bridge_group_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_bridge_group_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a bridge group interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftd_bridge_group_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftd_bridge_group_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftd_bridge_group_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_bridge_group_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a bridge group interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftd_bridge_group_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftd_bridge_group_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/bridgegroupinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDBridgeGroupInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftd_ether_channel_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_ether_channel_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a ethernet channel interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftd_ether_channel_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftd_ether_channel_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftd_ether_channel_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_ether_channel_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a ethernet channel interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftd_ether_channel_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftd_ether_channel_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/etherchannelinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDEtherChannelInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftd_physical_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_physical_interface  # noqa: E501

        **Retrieves the physical interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all physical interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_physical_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW physical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftd_physical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftd_physical_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftd_physical_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_physical_interface  # noqa: E501

        **Retrieves the physical interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all physical interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_physical_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW physical interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftd_physical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftd_physical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftd_physical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftd_physical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/physicalinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDPhysicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftd_redundant_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_redundant_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a redundant interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftd_redundant_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftd_redundant_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftd_redundant_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_redundant_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a redundant interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftd_redundant_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftd_redundant_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/redundantinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDRedundantInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftd_sub_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_sub_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a sub-interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftd_sub_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftd_sub_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftd_sub_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_sub_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a sub-interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftd_sub_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftd_sub_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/subinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDSubInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftd_vlan_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_vlan_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vlan interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftd_vlan_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftd_vlan_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftd_vlan_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div>**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftd_vlan_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vlan interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftd_vlan_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftd_vlan_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/vlaninterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVlanInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ftdvti_interface(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftdvti_interface(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vti interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ftdvti_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ftdvti_interface_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ftdvti_interface_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ftdvti_interface_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vti interface. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ftdvti_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ftdvti_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualtunnelinterfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVTIInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_health_monitor_model(self, filter, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_health_monitor_model  # noqa: E501

        **Retrieves HealthMonitor metrics for the device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_monitor_model(filter, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: The metric filter query parameter should have healthmonitor name.Currently supports only <code>metric:memory & metric:cpu</code> (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HealthMonitorModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_health_monitor_model_with_http_info(filter, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_health_monitor_model_with_http_info(filter, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_health_monitor_model_with_http_info(self, filter, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_health_monitor_model  # noqa: E501

        **Retrieves HealthMonitor metrics for the device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_monitor_model_with_http_info(filter, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: The metric filter query parameter should have healthmonitor name.Currently supports only <code>metric:memory & metric:cpu</code> (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HealthMonitorModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_health_monitor_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if self.api_client.client_side_validation and ('filter' not in params or
                                                       params['filter'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filter` when calling `get_health_monitor_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_health_monitor_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_health_monitor_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/operational/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HealthMonitorModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_i_pv4_static_route_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv4_static_route_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_i_pv4_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_i_pv4_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_i_pv4_static_route_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv4_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv4staticroutes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_i_pv6_static_route_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv6_static_route_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_i_pv6_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_i_pv6_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_i_pv6_static_route_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_i_pv6_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv6staticroutes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inline_set(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inline_set(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of an inline set. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inline_set_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_inline_set_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_inline_set_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inline_set_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of an inline set. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inline_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_inline_set`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_inline_set`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_inline_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/inlinesets/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_event(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_interface_event  # noqa: E501

        **Retrieves list of all netmod events on the device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interface_event(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InterfaceEventListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_interface_event_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_event_with_http_info(container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_interface_event_with_http_info(self, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_interface_event  # noqa: E501

        **Retrieves list of all netmod events on the device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interface_event_with_http_info(container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: InterfaceEventListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_uuid', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_interface_event`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_interface_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/interfaceevents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceEventListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ospf_interface_policy_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospf_interface_policy_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Interface Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: OspfInterfacePolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ospf_interface_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ospf_interface_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ospf_interface_policy_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospf_interface_policy_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Interface Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: OspfInterfacePolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ospf_interface_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ospf_interface_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfinterface/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OspfInterfacePolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ospf_policy_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF V2 associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospf_policy_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: OspfPolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ospf_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ospf_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ospf_policy_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF V2 associated with the specified ID. Also, retrieves list of all OSPF v2 process. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospf_policy_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: OspfPolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ospf_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ospf_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfv2routes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OspfPolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ospfv3_interface_policy_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospfv3_interface_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPFv3 Interface associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospfv3_interface_policy_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPFv3 Interface Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ospfv3InterfacePolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ospfv3_interface_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ospfv3_interface_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ospfv3_interface_policy_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospfv3_interface_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPFv3 Interface associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospfv3_interface_policy_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPFv3 Interface Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ospfv3InterfacePolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ospfv3_interface_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ospfv3_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ospfv3_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ospfv3_interface_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfv3interfaces/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ospfv3InterfacePolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ospfv3_policy_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospfv3_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPF V3 associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospfv3_policy_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPFv3 Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ospfv3PolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ospfv3_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ospfv3_policy_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_ospfv3_policy_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_ospfv3_policy_model  # noqa: E501

        **Retrieves list of OSPF v3 process. Also, deletes, creates, or modifies the OSPF V3 associated with the specified ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ospfv3_policy_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPFv3 Policy. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Ospfv3PolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ospfv3_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_ospfv3_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_ospfv3_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_ospfv3_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ospfv3routes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ospfv3PolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_route_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_route_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Static Route (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_static_route_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified device. When device is in multi virtual router mode, this API is applicable to Global Virtual Router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_route_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Static Route (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/staticroutes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_router_model(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_router_model(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_virtual_router_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_virtual_router_model_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_virtual_router_model_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_router_model_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_router_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_virtual_router_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualRouterModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_switch(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_switch(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a virtual switch. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_virtual_switch_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_virtual_switch_with_http_info(object_id, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_virtual_switch_with_http_info(self, object_id, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_switch_with_http_info(object_id, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a virtual switch. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_virtual_switch`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_virtual_switch`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_virtual_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualswitches/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vrf_bgpi_pv_address_family_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device for specified vrf.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_bgpi_pv_address_family_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a BGP general settings. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfBGPIPvAddressFamilyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vrf_bgpi_pv_address_family_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vrf_bgpi_pv_address_family_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vrf_bgpi_pv_address_family_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_bgpi_pv_address_family_model  # noqa: E501

        **Retrieves list of all BGP (ipv4 and ipv6) associated with the specified device for specified vrf.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_bgpi_pv_address_family_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a BGP general settings. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfBGPIPvAddressFamilyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vrf_bgpi_pv_address_family_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vrf_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_vrf_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vrf_bgpi_pv_address_family_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vrf_bgpi_pv_address_family_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/bgp/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfBGPIPvAddressFamilyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vrf_i_pv4_static_route_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_i_pv4_static_route_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vrf_i_pv4_static_route_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vrf_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vrf_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv4staticroutes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vrf_i_pv6_static_route_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_i_pv6_static_route_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vrf_i_pv6_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vrf_i_pv6_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vrf_i_pv6_static_route_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_i_pv6_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vrf_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vrf_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv6staticroutes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vrf_ospf_interface_policy_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_ospf_interface_policy_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Interface Policy. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfOspfInterfacePolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vrf_ospf_interface_policy_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vrf_ospf_interface_policy_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vrf_ospf_interface_policy_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_ospf_interface_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPF Interface associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_ospf_interface_policy_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Interface Policy. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfOspfInterfacePolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vrf_ospf_interface_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vrf_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_vrf_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vrf_ospf_interface_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vrf_ospf_interface_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ospfinterface/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfOspfInterfacePolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vrf_ospf_policy_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPFV2 associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_ospf_policy_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Policy. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfOspfPolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vrf_ospf_policy_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vrf_ospf_policy_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vrf_ospf_policy_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_ospf_policy_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the OSPFV2 associated with the specified ID. Also, retrieves list of all OSPF v2 process.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_ospf_policy_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a OSPF Policy. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfOspfPolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vrf_ospf_policy_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vrf_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_vrf_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vrf_ospf_policy_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vrf_ospf_policy_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ospfv2routes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfOspfPolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vrf_static_route_model(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified virtual router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_static_route_model(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Static Route (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfStaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vrf_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vrf_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_vrf_static_route_model_with_http_info(self, object_id, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """get_vrf_static_route_model  # noqa: E501

        **Retrieves list of all Static routes (ipv4 and ipv6) associated with the specified virtual router.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vrf_static_route_model_with_http_info(object_id, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Static Route (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfStaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vrf_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_vrf_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `get_vrf_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `get_vrf_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_vrf_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/staticroutes/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfStaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_device(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a device. (required)
        :param Device body: Input representation of device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_device_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_device_with_http_info(object_id, body, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_device_with_http_info(self, object_id, body, domain_uuid, **kwargs):  # noqa: E501
        """update_device  # noqa: E501

        **Retrieves or modifies the device record associated with the specified ID. Registers or unregisters a device. If no ID is specified for a GET, retrieves list of all device records. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_with_http_info(object_id, body, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Identifier for a device. (required)
        :param Device body: Input representation of device. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_device`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_device`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_fp_logical_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fp_logical_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a logical interface. (required)
        :param FPLogicalInterface body: The input logical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_fp_logical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_fp_logical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_fp_logical_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_fp_logical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the logical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all logical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fp_logical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a logical interface. (required)
        :param FPLogicalInterface body: The input logical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPLogicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fp_logical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_fp_logical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_fp_logical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fplogicalinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPLogicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_fp_physical_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_fp_physical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the physical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all physical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fp_physical_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a physical interface. (required)
        :param FPPhysicalInterface body: The input physical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_fp_physical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_fp_physical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_fp_physical_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_fp_physical_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the physical interface associated with the specified NGIPS device ID and interface ID. If no ID is specified, retrieves list of all physical interfaces associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fp_physical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a physical interface. (required)
        :param FPPhysicalInterface body: The input physical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FPPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fp_physical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_fp_physical_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_fp_physical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_fp_physical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_fp_physical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/fpphysicalinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FPPhysicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftd_bridge_group_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_bridge_group_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a bridge group interface. (required)
        :param FTDBridgeGroupInterface body: The input bridge group interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftd_bridge_group_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftd_bridge_group_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftd_bridge_group_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_bridge_group_interface  # noqa: E501

        **Retrieves the bridge group interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all bridge group interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_bridge_group_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a bridge group interface. (required)
        :param FTDBridgeGroupInterface body: The input bridge group interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDBridgeGroupInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftd_bridge_group_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftd_bridge_group_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftd_bridge_group_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/bridgegroupinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDBridgeGroupInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftd_ether_channel_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_ether_channel_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a ethernet channel interface. (required)
        :param FTDEtherChannelInterface body: The input ethernet channel interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftd_ether_channel_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftd_ether_channel_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftd_ether_channel_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_ether_channel_interface  # noqa: E501

        **Retrieves the ethernet channel interface associated with the specified NGFW device ID and interface ID. If no ID is specified, retrieves list of all ethernet channel interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_ether_channel_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a ethernet channel interface. (required)
        :param FTDEtherChannelInterface body: The input ethernet channel interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDEtherChannelInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftd_ether_channel_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftd_ether_channel_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftd_ether_channel_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/etherchannelinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDEtherChannelInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftd_physical_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_physical_interface  # noqa: E501

        **Retrieves the physical interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all physical interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_physical_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW physical interface. (required)
        :param FTDPhysicalInterface body: The input NGFW physical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftd_physical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftd_physical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftd_physical_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_physical_interface  # noqa: E501

        **Retrieves the physical interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all physical interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_physical_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW physical interface. (required)
        :param FTDPhysicalInterface body: The input NGFW physical interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDPhysicalInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftd_physical_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftd_physical_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftd_physical_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftd_physical_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftd_physical_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/physicalinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDPhysicalInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftd_redundant_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_redundant_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a redundant interface. (required)
        :param FTDRedundantInterface body: The input redundant interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftd_redundant_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftd_redundant_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftd_redundant_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_redundant_interface  # noqa: E501

        **Retrieves the redundant interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all redundant interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_redundant_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a redundant interface. (required)
        :param FTDRedundantInterface body: The input redundant interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDRedundantInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftd_redundant_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftd_redundant_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftd_redundant_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/redundantinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDRedundantInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftd_sub_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_sub_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a sub-interface. (required)
        :param FTDSubInterface body: The input sub-interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftd_sub_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftd_sub_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftd_sub_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_sub_interface  # noqa: E501

        **Retrieves the sub-interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all sub-interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_sub_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a sub-interface. (required)
        :param FTDSubInterface body: The input sub-interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDSubInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftd_sub_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftd_sub_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftd_sub_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/subinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDSubInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftd_vlan_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_vlan_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vlan interface. (required)
        :param FTDVlanInterface body: The input NGFW vlan interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftd_vlan_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftd_vlan_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftd_vlan_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftd_vlan_interface  # noqa: E501

        **Retrieves the vlan interface associated with the specified NGFW device ID and interface ID. If no interface ID is specified, retrieves list of all vlan interfaces associated with the specified NGFW device ID. <div class=\"alert alert-warning\">More details on netmod events(out of sync interfaces):<b> GET /interfaceevents</b></div> _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftd_vlan_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vlan interface. (required)
        :param FTDVlanInterface body: The input NGFW vlan interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVlanInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftd_vlan_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftd_vlan_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftd_vlan_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/vlaninterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVlanInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ftdvti_interface(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftdvti_interface(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vti interface. (required)
        :param FTDVTIInterface body: The input NGFW vti interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ftdvti_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ftdvti_interface_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_ftdvti_interface_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_ftdvti_interface  # noqa: E501

        **Retrieves, deletes, creates, or modifies the vti interface associated with the specified NGFW device ID and/or interface ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ftdvti_interface_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a NGFW vti interface. (required)
        :param FTDVTIInterface body: The input NGFW vti interface model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: FTDVTIInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ftdvti_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_ftdvti_interface`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_ftdvti_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualtunnelinterfaces/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FTDVTIInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_i_pv4_static_route_model(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_i_pv4_static_route_model(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param IPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_i_pv4_static_route_model_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_i_pv4_static_route_model_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_i_pv4_static_route_model_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified ID. Also, retrieves list of all IPv4 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_i_pv4_static_route_model_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param IPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv4staticroutes/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_i_pv6_static_route_model(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_i_pv6_static_route_model(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param IPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_i_pv6_static_route_model_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_i_pv6_static_route_model_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_i_pv6_static_route_model_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified ID. Also, retrieves list of all IPv6 Static routes. When device is in multi virtual router mode, this API is applicable to Global Virtual Router. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_i_pv6_static_route_model_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param IPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: IPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/ipv6staticroutes/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_inline_set(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_inline_set(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of an inline set. (required)
        :param InlineSet body: The input inline set model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_inline_set_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_inline_set_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_inline_set_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_inline_set  # noqa: E501

        **Retrieves, deletes, creates, or modifies the inline set associated with the specified NGIPS device ID and inline set ID. If no inline set ID is specified, retrieves list of all inline sets associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_inline_set_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of an inline set. (required)
        :param InlineSet body: The input inline set model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: InlineSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_inline_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_inline_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_inline_set`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_inline_set`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_inline_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/inlinesets/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_virtual_router_model(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_virtual_router_model(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Virtual Router (required)
        :param VirtualRouterModel body: The input Virtual Router Model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_virtual_router_model_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_virtual_router_model_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_virtual_router_model_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_virtual_router_model  # noqa: E501

        **Retrieves list of all virtual routers created in the specified device. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_virtual_router_model_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a Virtual Router (required)
        :param VirtualRouterModel body: The input Virtual Router Model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualRouterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_virtual_router_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_virtual_router_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_virtual_router_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualRouterModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_virtual_switch(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_virtual_switch(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a virtual switch. (required)
        :param VirtualSwitch body: The input virtual switch model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_virtual_switch_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_virtual_switch_with_http_info(object_id, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_virtual_switch_with_http_info(self, object_id, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_virtual_switch  # noqa: E501

        **Retrieves, deletes, creates, or modifies the virtual switch associated with the specified NGIPS device ID and virtual switch ID. If no virtual switch ID is specified, retrieves list of all virtual switches associated with the specified NGIPS device ID. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_virtual_switch_with_http_info(object_id, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a virtual switch. (required)
        :param VirtualSwitch body: The input virtual switch model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VirtualSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_virtual_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_virtual_switch`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_virtual_switch`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_virtual_switch`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_virtual_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/virtualswitches/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vrf_i_pv4_static_route_model(self, object_id, virtualrouter_uuid, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vrf_i_pv4_static_route_model(object_id, virtualrouter_uuid, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param VrfIPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, body, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_vrf_i_pv4_static_route_model_with_http_info(self, object_id, virtualrouter_uuid, body, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_vrf_i_pv4_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv4 Static Route associated with the specified virtual router. Also, retrieves list of all IPv4 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vrf_i_pv4_static_route_model_with_http_info(object_id, virtualrouter_uuid, body, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv4 Static Route. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param VrfIPv4StaticRouteModel body: The input IPv4 Static Route model. (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv4StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'virtualrouter_uuid', 'body', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vrf_i_pv4_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `update_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_vrf_i_pv4_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_vrf_i_pv4_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv4staticroutes/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv4StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vrf_i_pv6_static_route_model(self, object_id, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vrf_i_pv6_static_route_model(object_id, body, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param VrfIPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vrf_i_pv6_static_route_model_with_http_info(object_id, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vrf_i_pv6_static_route_model_with_http_info(object_id, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs)  # noqa: E501
            return data

    def update_vrf_i_pv6_static_route_model_with_http_info(self, object_id, body, virtualrouter_uuid, container_uuid, domain_uuid, **kwargs):  # noqa: E501
        """update_vrf_i_pv6_static_route_model  # noqa: E501

        **Retrieves, deletes, creates, or modifies the IPv6 Static Route associated with the specified virtual router. Also, retrieves list of all IPv6 Static routes. _Check the response section for applicable examples (if any)._**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vrf_i_pv6_static_route_model_with_http_info(object_id, body, virtualrouter_uuid, container_uuid, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: Unique identifier of a IPv6 Static Route. (required)
        :param VrfIPv6StaticRouteModel body: The input IPv6 Static Route model. (required)
        :param str virtualrouter_uuid: Unique identifier of Virtual Router (required)
        :param str container_uuid: The container id under which this specific resource is contained. (required)
        :param str domain_uuid: Domain UUID (required)
        :return: VrfIPv6StaticRouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'body', 'virtualrouter_uuid', 'container_uuid', 'domain_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vrf_i_pv6_static_route_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `update_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'virtualrouter_uuid' is set
        if self.api_client.client_side_validation and ('virtualrouter_uuid' not in params or
                                                       params['virtualrouter_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtualrouter_uuid` when calling `update_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'container_uuid' is set
        if self.api_client.client_side_validation and ('container_uuid' not in params or
                                                       params['container_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `container_uuid` when calling `update_vrf_i_pv6_static_route_model`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `update_vrf_i_pv6_static_route_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'virtualrouter_uuid' in params:
            path_params['virtualrouterUUID'] = params['virtualrouter_uuid']  # noqa: E501
        if 'container_uuid' in params:
            path_params['containerUUID'] = params['container_uuid']  # noqa: E501
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/devices/devicerecords/{containerUUID}/routing/virtualrouters/{virtualrouterUUID}/ipv6staticroutes/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VrfIPv6StaticRouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
