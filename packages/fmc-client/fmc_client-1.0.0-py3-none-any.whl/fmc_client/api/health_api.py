# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fmc_client.api_client import ApiClient


class HealthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_health_alert_model(self, domain_uuid, **kwargs):  # noqa: E501
        """get_health_alert_model  # noqa: E501

        **Retrieves Health Alerts.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_alert_model(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: Various filter criteria can be specified using the format <code>startTime:start_time_in_secs;endTime:end_time_in_secs;deviceUUIDs:List_of_device_uuids;status:List_of_statuses;moduleIDs:List_of_moduleIDs.</code><br/><br/><code>startTime</code> -- start time in unix format - startTime and endTime should be specified together<br/><code>endTime</code> -- end time in unix format - startTime and endTime should be specified together<br/><code>deviceUUIDs</code> -- List of device UUIDs (UUID is 0 for fmc ).<br/><code>status</code> -- List of status codes to filter delimited by comma, e.g. green,red,yellow.<br/><code>moduleIDs</code> -- List of module ids to filter, delimited by comma.<br/>.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HealthAlertModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_health_alert_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_health_alert_model_with_http_info(domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_health_alert_model_with_http_info(self, domain_uuid, **kwargs):  # noqa: E501
        """get_health_alert_model  # noqa: E501

        **Retrieves Health Alerts.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_alert_model_with_http_info(domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_uuid: Domain UUID (required)
        :param str filter: Various filter criteria can be specified using the format <code>startTime:start_time_in_secs;endTime:end_time_in_secs;deviceUUIDs:List_of_device_uuids;status:List_of_statuses;moduleIDs:List_of_moduleIDs.</code><br/><br/><code>startTime</code> -- start time in unix format - startTime and endTime should be specified together<br/><code>endTime</code> -- end time in unix format - startTime and endTime should be specified together<br/><code>deviceUUIDs</code> -- List of device UUIDs (UUID is 0 for fmc ).<br/><code>status</code> -- List of status codes to filter delimited by comma, e.g. green,red,yellow.<br/><code>moduleIDs</code> -- List of module ids to filter, delimited by comma.<br/>.
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HealthAlertModelListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_uuid', 'filter', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_health_alert_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_health_alert_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/health/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HealthAlertModelListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_health_metric(self, filter, domain_uuid, **kwargs):  # noqa: E501
        """get_health_metric  # noqa: E501

        **Retrieves HealthMonitor metrics for the device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_metric(filter, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Various filter criteria can be specified using the format <code>deviceUUIDs:uuid1,uuid2;metric:metric_name;startTime:start_time_in_secs;endTime:end_time_in_secs;step:step_in_secs;regexFilter:filter_on_metric</code><br/><br/><code>deviceUUIDs</code> --List UUID of the device to be queried.<br/><code>metric</code> -- name of the prometheus metric to be queried.<br/><code>startTime</code> -- start time in unix format seconds.<br/><code>endTime</code> -- end time in unix format seconds.<br/><code>step</code> -- step interval in seconds over which the data is returned.<br/><code>regexFilter</code> -- filter to be applied on the metric names. Supports GO style regex e.g snort.&#42;&#124;lina.&#42; <br/><code>queryFunction</code> -- optional query function which has to be applied to the query, can be one of <code>\"avg\", \"rate\", \"min\", \"max\"</code><br/>. For e.g. to query all the memory metrics for LINA the filter parameter should be  <code>deviceUUID:&lt;uuid&gt;;metric:mem;startTime:&lt;time&gt;;endTime:&lt;time&gt;;step:60;regexFilter:used_percentage_lina</code> (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HealthMetricListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_health_metric_with_http_info(filter, domain_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_health_metric_with_http_info(filter, domain_uuid, **kwargs)  # noqa: E501
            return data

    def get_health_metric_with_http_info(self, filter, domain_uuid, **kwargs):  # noqa: E501
        """get_health_metric  # noqa: E501

        **Retrieves HealthMonitor metrics for the device.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_metric_with_http_info(filter, domain_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Various filter criteria can be specified using the format <code>deviceUUIDs:uuid1,uuid2;metric:metric_name;startTime:start_time_in_secs;endTime:end_time_in_secs;step:step_in_secs;regexFilter:filter_on_metric</code><br/><br/><code>deviceUUIDs</code> --List UUID of the device to be queried.<br/><code>metric</code> -- name of the prometheus metric to be queried.<br/><code>startTime</code> -- start time in unix format seconds.<br/><code>endTime</code> -- end time in unix format seconds.<br/><code>step</code> -- step interval in seconds over which the data is returned.<br/><code>regexFilter</code> -- filter to be applied on the metric names. Supports GO style regex e.g snort.&#42;&#124;lina.&#42; <br/><code>queryFunction</code> -- optional query function which has to be applied to the query, can be one of <code>\"avg\", \"rate\", \"min\", \"max\"</code><br/>. For e.g. to query all the memory metrics for LINA the filter parameter should be  <code>deviceUUID:&lt;uuid&gt;;metric:mem;startTime:&lt;time&gt;;endTime:&lt;time&gt;;step:60;regexFilter:used_percentage_lina</code> (required)
        :param str domain_uuid: Domain UUID (required)
        :param int offset: Index of first item to return.
        :param int limit: Number of items to return.
        :param bool expanded: If set to true, the GET response displays a list of objects with additional attributes.
        :return: HealthMetricListContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'domain_uuid', 'offset', 'limit', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_health_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if self.api_client.client_side_validation and ('filter' not in params or
                                                       params['filter'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filter` when calling `get_health_metric`")  # noqa: E501
        # verify the required parameter 'domain_uuid' is set
        if self.api_client.client_side_validation and ('domain_uuid' not in params or
                                                       params['domain_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `domain_uuid` when calling `get_health_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_uuid' in params:
            path_params['domainUUID'] = params['domain_uuid']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/fmc_config/v1/domain/{domainUUID}/health/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HealthMetricListContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
