{"mode":"Text","textContent":"from vexcode import *\nfrom math import *\n\ndef main():\n\n    def goto(xdes, ydes):\n        xnow = location.position(X, MM)\n        ynow = location.position(Y, MM)\n        if (xdes == xnow and ydes == ynow):\n            brain.print('#ERROR\\n')\n            brain.print('   /Coordinate error\\n')\n            brain.print('   /The robot is already at the desired coordinates\\n')\n            brain.print('#After eliminating the cause of the error, restart the program')\n            stop_project()\n        xdir  = 0\n        xdis = abs(xdes - xnow)\n        if xnow > xdes:\n            xdir = -1\n        else:\n            xdir = 1\n        ydir  = 0 \n        ydis = abs(ydes - ynow)\n        if ynow > ydes:\n            ydir = -1\n        else:\n            ydir = 1\n        dis = ydis ** 2 + xdis ** 2\n        dis = dis ** 0.5\n        a = xdis\n        b = ydis\n        c = dis\n        alpha = asin(a / c);\n        pi = math.pi\n        angle = 180 / pi * alpha\n        if (ydir == -1):\n            rot = drivetrain.rotation(DEGREES)\n            drivetrain.turn_for(LEFT, rot, DEGREES)\n            drivetrain.turn_for(RIGHT, 180, DEGREES)\n            if (xdir == 1):\n                drivetrain.turn_for(LEFT, angle, DEGREES)\n            elif (xdir == -1):\n                drivetrain.turn_for(RIGHT, angle, DEGREES)\n            else:\n                pass\n            distoob = distance.get_distance(MM)\n            if (xdis == 1 and distoob < dis):\n                brain.clear()\n                brain.print('#ERROR\\n')\n                brain.print('   /Obstacle error\\n')\n                brain.print('   /The robot has detected an obstacle in front of it\\n')\n                brain.print('   /The robot will not be able to reach the coordinate until the obstacle is removed\\n')\n                brain.print('#After eliminating the cause of the error, restart the program')\n                stop_project()\n            elif (xdir == -1 and distoob < dis):\n                brain.clear()\n                brain.print('#ERROR\\n')\n                brain.print('   /Obstacle error\\n')\n                brain.print('   /The robot has detected an obstacle in front of it\\n')\n                brain.print('   /The robot will not be able to reach the coordinate until the obstacle is removed\\n')\n                brain.print('#After eliminating the cause of the error, restart the program')\n                stop_project()\n            else:\n                drivetrain.drive_for(FORWARD, dis, MM)\n        elif (ydir == 1):\n            rot = drivetrain.rotation(DEGREES)\n            drivetrain.turn_for(LEFT, rot, DEGREES)\n            if (xdir == 1):\n                drivetrain.turn_for(RIGHT, angle, DEGREES)\n            elif (xdir == -1):\n                drivetrain.turn_for(LEFT, angle, DEGREES)\n            else:\n                pass\n            distoob = distance.get_distance(MM)\n            if (xdir == 1 and distoob < dis):\n                brain.clear()\n                brain.print('#ERROR\\n')\n                brain.print('   /Obstacle error\\n')\n                brain.print('   /The robot has detected an obstacle in front of it\\n')\n                brain.print('   /The robot will not be able to reach the coordinate until the obstacle is removed\\n')\n                brain.print('#After eliminating the cause of the error, restart the program')\n                stop_project()\n            if (xdir == -1 and distoob < dis):\n                brain.clear()\n                brain.print('#ERROR\\n')\n                brain.print('   /Obstacle error\\n')\n                brain.print('   /The robot has detected an obstacle in front of it\\n')\n                brain.print('   /The robot will not be able to reach the coordinate until the obstacle is removed\\n')\n                brain.print('#After eliminating the cause of the error, restart the program')\n                stop_project()\n            else:\n                drivetrain.drive_for(FORWARD, dis, MM)\n        elif (ydir == 0):\n            rot = drivetrain.rotation(DEGREES)\n            drivetrain.turn_for(LEFT, rot, DEGREES)\n            if (xdir == 1):\n                drivetrain.turn_for(RIGHT, angle, DEGREES)\n            elif (xdir == -1):\n                drivetrain.turn_for(LEFT, angle, DEGREES)\n            else:\n                pass\n            distoob = distance.get_distance(MM)\n            if (xdir == 1 and distoob < dis):\n                brain.clear()\n                brain.print('#ERROR\\n')\n                brain.print('   /Obstacle error\\n')\n                brain.print('   /The robot has detected an obstacle in front of it\\n')\n                brain.print('   /The robot will not be able to reach the coordinate until the obstacle is removed\\n')\n                brain.print('#After eliminating the cause of the error, restart the program')\n                stop_project()\n            if (xdir == -1 and distoob < dis):\n                brain.clear()\n                brain.print('#ERROR\\n')\n                brain.print('   /Obstacle error\\n')\n                brain.print('   /The robot has detected an obstacle in front of it\\n')\n                brain.print('   /The robot will not be able to reach the coordinate until the obstacle is removed\\n')\n                brain.print('#After eliminating the cause of the error, restart the program')\n                stop_project()\n            else:\n                drivetrain.drive_for(FORWARD, dis, MM)\n        wait(3, SECONDS)\n        brain.clear()\n    goto(100, 100)\nvr_thread(main())","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"ArtCanvas"}