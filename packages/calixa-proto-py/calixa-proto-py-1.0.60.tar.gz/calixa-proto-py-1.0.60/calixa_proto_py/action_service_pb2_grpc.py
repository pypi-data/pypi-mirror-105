# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import action_service_pb2 as action__service__pb2
import entity_pb2 as entity__pb2


class ActionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListActions = channel.unary_stream(
                '/calixa.domain.action.ActionService/ListActions',
                request_serializer=action__service__pb2.GetActionsRequest.SerializeToString,
                response_deserializer=entity__pb2.Entity.FromString,
                )
        self.InvokeAction = channel.unary_unary(
                '/calixa.domain.action.ActionService/InvokeAction',
                request_serializer=action__service__pb2.InvokeActionRequest.SerializeToString,
                response_deserializer=action__service__pb2.InvokeActionResponse.FromString,
                )


class ActionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvokeAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListActions': grpc.unary_stream_rpc_method_handler(
                    servicer.ListActions,
                    request_deserializer=action__service__pb2.GetActionsRequest.FromString,
                    response_serializer=entity__pb2.Entity.SerializeToString,
            ),
            'InvokeAction': grpc.unary_unary_rpc_method_handler(
                    servicer.InvokeAction,
                    request_deserializer=action__service__pb2.InvokeActionRequest.FromString,
                    response_serializer=action__service__pb2.InvokeActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.action.ActionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ActionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/calixa.domain.action.ActionService/ListActions',
            action__service__pb2.GetActionsRequest.SerializeToString,
            entity__pb2.Entity.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvokeAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.action.ActionService/InvokeAction',
            action__service__pb2.InvokeActionRequest.SerializeToString,
            action__service__pb2.InvokeActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
