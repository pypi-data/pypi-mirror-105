# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['nautobot_netbox_importer',
 'nautobot_netbox_importer.diffsync',
 'nautobot_netbox_importer.diffsync.adapters',
 'nautobot_netbox_importer.diffsync.models',
 'nautobot_netbox_importer.management.commands',
 'nautobot_netbox_importer.tests']

package_data = \
{'': ['*'], 'nautobot_netbox_importer.tests': ['fixtures/*']}

install_requires = \
['colorama>=0.4.4,<0.5.0', 'diffsync>=1.3.0,<2.0.0', 'tqdm>=4.59.0,<5.0.0']

setup_kwargs = {
    'name': 'nautobot-netbox-importer',
    'version': '1.3.0',
    'description': 'Data importer from NetBox 2.10.x to Nautobot',
    'long_description': '# Nautobot NetBox Importer\n\nA plugin for [Nautobot](https://github.com/nautobot/nautobot).\n\n## Installation\n\nThe plugin is available as a Python package in PyPI and can be installed with pip:\n\n```shell\npip install nautobot-netbox-importer\n```\n\n> The plugin is compatible with Nautobot 1.0.0b3 and later and can handle JSON data exported from NetBox 2.10.3 thru 2.10.8  at present.\n\nOnce installed, the plugin needs to be enabled in your `nautobot_config.py`:\n\n```python\nPLUGINS = ["nautobot_netbox_importer"]\n```\n\n## Usage\n\n### Getting a data export from NetBox\n\nFrom the NetBox root directory, run the following command to produce a JSON file (here, `/tmp/netbox_data.json`) describing the contents of your NetBox database:\n\n```shell\npython netbox/manage.py dumpdata \\\n    --traceback --format=json \\\n    --exclude admin.logentry --exclude sessions.session \\\n    --exclude extras.ObjectChange --exclude extras.Script --exclude extras.Report \\\n    > /tmp/netbox_data.json\n```\n\n### Importing the data into Nautobot\n\nFrom within the Nautobot application environment, run `nautobot-server import_netbox_json <json_file> <netbox_version>`, for example `nautobot-server import_netbox_json /tmp/netbox_data.json 2.10.3`.\n\n### Importing change logging (ObjectChange) records\n\nBecause the database change log can be a massive amount of data, and often this historical information does not need to be imported, `ObjectChange` records are not included in the database export command above and are not handled by the `import_netbox_json` command. To import `ObjectChange` records specifically, **after** the previous Netbox import process has succeeded, you can do the following.\n\n#### Getting a data export from NetBox with ONLY ObjectChange items\n\n```shell\npython netbox/manage.py dumpdata extras.ObjectChange\\\n    --traceback --format=json \\\n    > /tmp/netbox_only_objectchange.json\n```\n\n#### Importing the ObjectChanges into Nautobot\n\nFrom within the Nautobot application environment, run `nautobot-server import_netbox_objectchange_json <json_file_without_objectchanges> <json_file_only_objectchanges> <netbox_version>`, for example `nautobot-server import_netbox_objectchange_json imp/script/import_netbox_json.json imp/script/netbox_only_objectchange.json 2.10.3`.\n\n## Contributing\n\nMost of the internal logic of this plugin is based on the [DiffSync](https://github.com/networktocode/diffsync) library, which in turn is built atop [Pydantic](https://github.com/samuelcolvin/pydantic/).\nA basic understanding of these two libraries will be helpful to those wishing to contribute to this project.\n\nPull requests are welcomed and automatically built and tested against multiple version of Python and multiple versions of Nautobot through TravisCI.\n\nThe project is packaged with a light development environment based on `docker-compose` to help with the local development of the project and to run the tests within TravisCI.\n\nThe project is following Network to Code software development guideline and is leveraging:\n\n- Black, Pylint, Bandit and pydocstyle for Python linting and formatting.\n- Django unit test to ensure the plugin is working properly.\n- Poetry for packaging and dependency management.\n\n### Development Environment\n\nThe development environment can be used in 2 ways. First, with a local poetry environment if you wish to develop outside of Docker. Second, inside of a docker container.\n\n#### Invoke tasks\n\nThe [PyInvoke](http://www.pyinvoke.org/) library is used to provide some helper commands based on the environment.  There are a few configuration parameters which can be passed to PyInvoke to override the default configuration:\n\n* `nautobot_ver`: the version of Nautobot to use as a base for any built docker containers (default: develop-latest)\n* `project_name`: the default docker compose project name (default: nautobot-netbox-importer)\n* `python_ver`: the version of Python to use as a base for any built docker containers (default: 3.6)\n* `local`: a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers)\n* `compose_dir`: the full path to a directory containing the project compose files\n* `compose_files`: a list of compose files applied in order (see [Multiple Compose files](https://docs.docker.com/compose/extends/#multiple-compose-files) for more information)\n\nUsing PyInvoke these configuration options can be overridden using [several methods](http://docs.pyinvoke.org/en/stable/concepts/configuration.html).  Perhaps the simplest is simply setting an environment variable `INVOKE_NAUTOBOT-NETBOX-IMPORTER_VARIABLE_NAME` where `VARIABLE_NAME` is the variable you are trying to override.  The only exception is `compose_files`, because it is a list it must be overridden in a yaml file.  There is an example `invoke.yml` in this directory which can be used as a starting point.\n\n#### Local Poetry Development Environment\n\n1.  Copy `development/creds.example.env` to `development/creds.env` (This file will be ignored by git and docker)\n2.  Uncomment the `POSTGRES_HOST`, `REDIS_HOST`, and `NAUTOBOT_ROOT` variables in `development/creds.env`\n3.  Create an invoke.yml with the following contents at the root of the repo:\n\n```shell\n---\nnautobot_netbox_importer:\n  local: true\n  compose_files:\n    - "docker-compose.requirements.yml"\n```\n\n3.  Run the following commands:\n\n```shell\npoetry shell\npoetry install\npip install nautobot\nexport $(cat development/dev.env | xargs)\nexport $(cat development/creds.env | xargs)\n```\n\n4.  You can now run nautobot-server commands as you would from the [Nautobot documentation](https://nautobot.readthedocs.io/en/latest/) for example to start the development server:\n\n```shell\nnautobot-server runserver 0.0.0.0:8080 --insecure\n```\n\nNautobot server can now be accessed at [http://localhost:8080](http://localhost:8080).\n\n#### Docker Development Environment\n\nThis project is managed by [Python Poetry](https://python-poetry.org/) and has a few requirements to setup your development environment:\n\n1.  Install Poetry, see the [Poetry Documentation](https://python-poetry.org/docs/#installation) for your operating system.\n2.  Install Docker, see the [Docker documentation](https://docs.docker.com/get-docker/) for your operating system.\n\nOnce you have Poetry and Docker installed you can run the following commands to install all other development dependencies in an isolated python virtual environment:\n\n```shell\npoetry shell\npoetry install\ninvoke start\n```\n\nNautobot server can now be accessed at [http://localhost:8080](http://localhost:8080).\n\n### CLI Helper Commands\n\nThe project includes a CLI helper based on [invoke](http://www.pyinvoke.org/) to help setup the development environment. The commands are listed below in 3 categories `dev environment`, `utility` and `testing`.\n\nEach command can be executed with `invoke <command>`. Environment variables `INVOKE_NAUTOBOT_NETBOX_IMPORTER_PYTHON_VER` and `INVOKE_NAUTOBOT_NETBOX_IMPORTER_NAUTOBOT_VER` may be specified to override the default versions. Each command also has its own help `invoke <command> --help`\n\n#### Docker dev environment\n\n```no-highlight\n  build               Build Nautobot docker image.\n  debug               Start Nautobot and its dependencies in debug mode.\n  destroy             Destroy all containers and volumes.\n  restart             Gracefully restart all containers.\n  start               Start Nautobot and its dependencies in detached mode.\n  stop                Stop Nautobot and its dependencies.\n```\n\n#### Utility\n\n```no-highlight\n  check-migrations    Check for missing migrations.\n  cli                 Launch a bash shell inside the running Nautobot container.\n  createsuperuser     Create a new Nautobot superuser account (default: "admin"), will prompt for password.\n  generate-packages   Generate all Python packages inside docker and copy the file locally under dist/.\n  makemigrations      Perform makemigrations operation in Django.\n  migrate             Perform migrate operation in Django.\n  nbshell             Launch an interactive nbshell session.\n  post-upgrade        Performs Nautobot common post-upgrade operations using a single entrypoint.\n  vscode              Launch Visual Studio Code with the appropriate Environment variables to run in a container.\n```\n\n#### Testing\n\n```no-highlight\n  bandit              Run bandit to validate basic static code security analysis.\n  black               Check Python code style with Black.\n  flake8              Check for PEP8 compliance and other style issues.\n  hadolint            Check Dockerfile for hadolint compliance and other style issues.\n  pydocstyle          Run pydocstyle to validate docstring formatting adheres to standards.\n  pylint              Run pylint code analysis.\n  tests               Run all tests for this plugin.\n  unittest            Run Django unit tests for the plugin.\n  unittest-coverage   Report on code test coverage as measured by \'invoke unittest\'.\n```\n\n## Questions\n\nFor any questions or comments, please check the [FAQ](FAQ.md) first and feel free to swing by the [#nautobot slack channel](https://networktocode.slack.com/).\nSign up [here](http://slack.networktocode.com/)\n\n## Screenshots\n\n![Screenshot of the start of synchronization](https://raw.githubusercontent.com/nautobot/nautobot-plugin-netbox-importer/develop/media/screenshot1.png "Beginning synchronization")\n\n![Screenshot of the completed process](https://raw.githubusercontent.com/nautobot/nautobot-plugin-netbox-importer/develop/media/screenshot2.png "Synchronization complete!")\n',
    'author': 'Network to Code, LLC',
    'author_email': 'opensource@networktocode.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/nautobot/nautobot-plugin-netbox-importer',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
