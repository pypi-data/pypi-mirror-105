# Paginators for boto3 {{ package.service_name.class_name }} module

> [Index](../README.md) > [{{ package.service_name.class_name }}](./README.md) > Paginators

Auto-generated documentation for [{{ package.service_name.class_name }}]({{ package.service_name.boto3_doc_link }})
type annotations stubs module [{{ package.service_name.module_name }}]({{ package.service_name.pypi_link }}).

{% for paginator in package.paginators -%}
## {{ paginator.name }}

Type annotations for `boto3.client("{{ package.service_name.boto3_name }}").get_paginator("{{ paginator.operation_name }}")`.

Can be used directly:

```python
from {{ package.service_name.module_name }}.paginator import {{ paginator.name }}

def get_{{ paginator.operation_name }}_paginator() -> {{ paginator.name }}:
    return boto3.client("{{ package.service_name.boto3_name }}").get_paginator("{{ paginator.operation_name }}")
```

Boto3 documentation: [{{ package.service_name.class_name }}.Paginator.{{ paginator.paginator_name }}]({{ paginator.boto3_doc_link }})

Arguments for `{{ paginator.name }}.paginate` method:

{% with arguments=paginator.methods[0].arguments[1:] -%}
{% include "common/arguments_list.md.jinja2" with context -%}
{% endwith %}

`{{ paginator.name }}.paginate`  returns {% with type_annotation=paginator.methods[0].return_type -%}
{% include "common/type_annotation.md.jinja2" with context -%}
{% endwith -%}.

{% endfor %}
