# coding: utf-8

"""
    Clash Royale API

    Unofficial Swagger definition for the official Clash Royale API  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyroyale.configuration import Configuration


class RiverRaceLogEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'season_id': 'int',
        'section_index': 'int',
        'created_date': 'str',
        'standings': 'list[RiverRaceStanding]'
    }

    attribute_map = {
        'season_id': 'seasonId',
        'section_index': 'sectionIndex',
        'created_date': 'createdDate',
        'standings': 'standings'
    }

    def __init__(self, season_id=None, section_index=None, created_date=None, standings=None, local_vars_configuration=None):  # noqa: E501
        """RiverRaceLogEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._season_id = None
        self._section_index = None
        self._created_date = None
        self._standings = None
        self.discriminator = None

        if season_id is not None:
            self.season_id = season_id
        if section_index is not None:
            self.section_index = section_index
        if created_date is not None:
            self.created_date = created_date
        if standings is not None:
            self.standings = standings

    @property
    def season_id(self):
        """Gets the season_id of this RiverRaceLogEntry.  # noqa: E501


        :return: The season_id of this RiverRaceLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id):
        """Sets the season_id of this RiverRaceLogEntry.


        :param season_id: The season_id of this RiverRaceLogEntry.  # noqa: E501
        :type: int
        """

        self._season_id = season_id

    @property
    def section_index(self):
        """Gets the section_index of this RiverRaceLogEntry.  # noqa: E501


        :return: The section_index of this RiverRaceLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._section_index

    @section_index.setter
    def section_index(self, section_index):
        """Sets the section_index of this RiverRaceLogEntry.


        :param section_index: The section_index of this RiverRaceLogEntry.  # noqa: E501
        :type: int
        """

        self._section_index = section_index

    @property
    def created_date(self):
        """Gets the created_date of this RiverRaceLogEntry.  # noqa: E501


        :return: The created_date of this RiverRaceLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this RiverRaceLogEntry.


        :param created_date: The created_date of this RiverRaceLogEntry.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def standings(self):
        """Gets the standings of this RiverRaceLogEntry.  # noqa: E501


        :return: The standings of this RiverRaceLogEntry.  # noqa: E501
        :rtype: list[RiverRaceStanding]
        """
        return self._standings

    @standings.setter
    def standings(self, standings):
        """Sets the standings of this RiverRaceLogEntry.


        :param standings: The standings of this RiverRaceLogEntry.  # noqa: E501
        :type: list[RiverRaceStanding]
        """

        self._standings = standings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiverRaceLogEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RiverRaceLogEntry):
            return True

        return self.to_dict() != other.to_dict()
