# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountQuotaValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notice_enabled': 'bool',
        'notice_threshold': 'int',
        'transactions_notice_enabled': 'bool',
        'transactions_notice_threshold': 'int'
    }

    attribute_map = {
        'notice_enabled': 'noticeEnabled',
        'notice_threshold': 'noticeThreshold',
        'transactions_notice_enabled': 'transactionsNoticeEnabled',
        'transactions_notice_threshold': 'transactionsNoticeThreshold'
    }

    def __init__(self, notice_enabled=None, notice_threshold=None, transactions_notice_enabled=None, transactions_notice_threshold=None):  # noqa: E501
        """AccountQuotaValues - a model defined in Swagger"""  # noqa: E501
        self._notice_enabled = None
        self._notice_threshold = None
        self._transactions_notice_enabled = None
        self._transactions_notice_threshold = None
        self.discriminator = None
        if notice_enabled is not None:
            self.notice_enabled = notice_enabled
        if notice_threshold is not None:
            self.notice_threshold = notice_threshold
        if transactions_notice_enabled is not None:
            self.transactions_notice_enabled = transactions_notice_enabled
        if transactions_notice_threshold is not None:
            self.transactions_notice_threshold = transactions_notice_threshold

    @property
    def notice_enabled(self):
        """Gets the notice_enabled of this AccountQuotaValues.  # noqa: E501

        Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.  # noqa: E501

        :return: The notice_enabled of this AccountQuotaValues.  # noqa: E501
        :rtype: bool
        """
        return self._notice_enabled

    @notice_enabled.setter
    def notice_enabled(self, notice_enabled):
        """Sets the notice_enabled of this AccountQuotaValues.

        Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.  # noqa: E501

        :param notice_enabled: The notice_enabled of this AccountQuotaValues.  # noqa: E501
        :type: bool
        """

        self._notice_enabled = notice_enabled

    @property
    def notice_threshold(self):
        """Gets the notice_threshold of this AccountQuotaValues.  # noqa: E501

        Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).  # noqa: E501

        :return: The notice_threshold of this AccountQuotaValues.  # noqa: E501
        :rtype: int
        """
        return self._notice_threshold

    @notice_threshold.setter
    def notice_threshold(self, notice_threshold):
        """Sets the notice_threshold of this AccountQuotaValues.

        Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).  # noqa: E501

        :param notice_threshold: The notice_threshold of this AccountQuotaValues.  # noqa: E501
        :type: int
        """

        self._notice_threshold = notice_threshold

    @property
    def transactions_notice_enabled(self):
        """Gets the transactions_notice_enabled of this AccountQuotaValues.  # noqa: E501

        Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.  # noqa: E501

        :return: The transactions_notice_enabled of this AccountQuotaValues.  # noqa: E501
        :rtype: bool
        """
        return self._transactions_notice_enabled

    @transactions_notice_enabled.setter
    def transactions_notice_enabled(self, transactions_notice_enabled):
        """Sets the transactions_notice_enabled of this AccountQuotaValues.

        Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.  # noqa: E501

        :param transactions_notice_enabled: The transactions_notice_enabled of this AccountQuotaValues.  # noqa: E501
        :type: bool
        """

        self._transactions_notice_enabled = transactions_notice_enabled

    @property
    def transactions_notice_threshold(self):
        """Gets the transactions_notice_threshold of this AccountQuotaValues.  # noqa: E501

        Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).  # noqa: E501

        :return: The transactions_notice_threshold of this AccountQuotaValues.  # noqa: E501
        :rtype: int
        """
        return self._transactions_notice_threshold

    @transactions_notice_threshold.setter
    def transactions_notice_threshold(self, transactions_notice_threshold):
        """Sets the transactions_notice_threshold of this AccountQuotaValues.

        Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).  # noqa: E501

        :param transactions_notice_threshold: The transactions_notice_threshold of this AccountQuotaValues.  # noqa: E501
        :type: int
        """

        self._transactions_notice_threshold = transactions_notice_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountQuotaValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountQuotaValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
