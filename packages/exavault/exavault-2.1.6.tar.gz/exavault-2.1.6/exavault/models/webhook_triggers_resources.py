# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookTriggersResources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload': 'bool',
        'download': 'bool',
        'delete': 'bool',
        'rename': 'bool',
        'copy': 'bool',
        'move': 'bool',
        'compress': 'bool',
        'extract': 'bool',
        'create_folder': 'bool'
    }

    attribute_map = {
        'upload': 'upload',
        'download': 'download',
        'delete': 'delete',
        'rename': 'rename',
        'copy': 'copy',
        'move': 'move',
        'compress': 'compress',
        'extract': 'extract',
        'create_folder': 'createFolder'
    }

    def __init__(self, upload=None, download=None, delete=None, rename=None, copy=None, move=None, compress=None, extract=None, create_folder=None):  # noqa: E501
        """WebhookTriggersResources - a model defined in Swagger"""  # noqa: E501
        self._upload = None
        self._download = None
        self._delete = None
        self._rename = None
        self._copy = None
        self._move = None
        self._compress = None
        self._extract = None
        self._create_folder = None
        self.discriminator = None
        if upload is not None:
            self.upload = upload
        if download is not None:
            self.download = download
        if delete is not None:
            self.delete = delete
        if rename is not None:
            self.rename = rename
        if copy is not None:
            self.copy = copy
        if move is not None:
            self.move = move
        if compress is not None:
            self.compress = compress
        if extract is not None:
            self.extract = extract
        if create_folder is not None:
            self.create_folder = create_folder

    @property
    def upload(self):
        """Gets the upload of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are uploaded.  # noqa: E501

        :return: The upload of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this WebhookTriggersResources.

        Send webhook messages when resources are uploaded.  # noqa: E501

        :param upload: The upload of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._upload = upload

    @property
    def download(self):
        """Gets the download of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are downloaded.  # noqa: E501

        :return: The download of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this WebhookTriggersResources.

        Send webhook messages when resources are downloaded.  # noqa: E501

        :param download: The download of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def delete(self):
        """Gets the delete of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are deleted  # noqa: E501

        :return: The delete of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this WebhookTriggersResources.

        Send webhook messages when resources are deleted  # noqa: E501

        :param delete: The delete of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def rename(self):
        """Gets the rename of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are renamed.  # noqa: E501

        :return: The rename of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this WebhookTriggersResources.

        Send webhook messages when resources are renamed.  # noqa: E501

        :param rename: The rename of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._rename = rename

    @property
    def copy(self):
        """Gets the copy of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are copied.  # noqa: E501

        :return: The copy of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._copy

    @copy.setter
    def copy(self, copy):
        """Sets the copy of this WebhookTriggersResources.

        Send webhook messages when resources are copied.  # noqa: E501

        :param copy: The copy of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._copy = copy

    @property
    def move(self):
        """Gets the move of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are moved.  # noqa: E501

        :return: The move of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this WebhookTriggersResources.

        Send webhook messages when resources are moved.  # noqa: E501

        :param move: The move of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._move = move

    @property
    def compress(self):
        """Gets the compress of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are compressed into an archive.  # noqa: E501

        :return: The compress of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this WebhookTriggersResources.

        Send webhook messages when resources are compressed into an archive.  # noqa: E501

        :param compress: The compress of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._compress = compress

    @property
    def extract(self):
        """Gets the extract of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when resources are extracted from an archive.  # noqa: E501

        :return: The extract of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._extract

    @extract.setter
    def extract(self, extract):
        """Sets the extract of this WebhookTriggersResources.

        Send webhook messages when resources are extracted from an archive.  # noqa: E501

        :param extract: The extract of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._extract = extract

    @property
    def create_folder(self):
        """Gets the create_folder of this WebhookTriggersResources.  # noqa: E501

        Send webhook messages when a new folder is created.  # noqa: E501

        :return: The create_folder of this WebhookTriggersResources.  # noqa: E501
        :rtype: bool
        """
        return self._create_folder

    @create_folder.setter
    def create_folder(self, create_folder):
        """Sets the create_folder of this WebhookTriggersResources.

        Send webhook messages when a new folder is created.  # noqa: E501

        :param create_folder: The create_folder of this WebhookTriggersResources.  # noqa: E501
        :type: bool
        """

        self._create_folder = create_folder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookTriggersResources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookTriggersResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
