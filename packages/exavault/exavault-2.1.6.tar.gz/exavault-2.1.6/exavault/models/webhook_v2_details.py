# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookV2Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attempt_id': 'str',
        'account_name': 'str',
        'event_timestamp': 'datetime',
        'ip_address': 'str',
        'protocol': 'str',
        'username': 'str',
        'event': 'str',
        'event_data': 'WebhookV2EventData'
    }

    attribute_map = {
        'attempt_id': 'attemptId',
        'account_name': 'accountName',
        'event_timestamp': 'eventTimestamp',
        'ip_address': 'ipAddress',
        'protocol': 'protocol',
        'username': 'username',
        'event': 'event',
        'event_data': 'eventData'
    }

    def __init__(self, attempt_id=None, account_name=None, event_timestamp=None, ip_address=None, protocol=None, username=None, event=None, event_data=None):  # noqa: E501
        """WebhookV2Details - a model defined in Swagger"""  # noqa: E501
        self._attempt_id = None
        self._account_name = None
        self._event_timestamp = None
        self._ip_address = None
        self._protocol = None
        self._username = None
        self._event = None
        self._event_data = None
        self.discriminator = None
        if attempt_id is not None:
            self.attempt_id = attempt_id
        if account_name is not None:
            self.account_name = account_name
        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if ip_address is not None:
            self.ip_address = ip_address
        if protocol is not None:
            self.protocol = protocol
        if username is not None:
            self.username = username
        if event is not None:
            self.event = event
        if event_data is not None:
            self.event_data = event_data

    @property
    def attempt_id(self):
        """Gets the attempt_id of this WebhookV2Details.  # noqa: E501

        Entry - retry identifier  # noqa: E501

        :return: The attempt_id of this WebhookV2Details.  # noqa: E501
        :rtype: str
        """
        return self._attempt_id

    @attempt_id.setter
    def attempt_id(self, attempt_id):
        """Sets the attempt_id of this WebhookV2Details.

        Entry - retry identifier  # noqa: E501

        :param attempt_id: The attempt_id of this WebhookV2Details.  # noqa: E501
        :type: str
        """

        self._attempt_id = attempt_id

    @property
    def account_name(self):
        """Gets the account_name of this WebhookV2Details.  # noqa: E501

        Account master username  # noqa: E501

        :return: The account_name of this WebhookV2Details.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this WebhookV2Details.

        Account master username  # noqa: E501

        :param account_name: The account_name of this WebhookV2Details.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this WebhookV2Details.  # noqa: E501

        Date and time event originally took place  # noqa: E501

        :return: The event_timestamp of this WebhookV2Details.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this WebhookV2Details.

        Date and time event originally took place  # noqa: E501

        :param event_timestamp: The event_timestamp of this WebhookV2Details.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def ip_address(self):
        """Gets the ip_address of this WebhookV2Details.  # noqa: E501

        IP address of related activity  # noqa: E501

        :return: The ip_address of this WebhookV2Details.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this WebhookV2Details.

        IP address of related activity  # noqa: E501

        :param ip_address: The ip_address of this WebhookV2Details.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def protocol(self):
        """Gets the protocol of this WebhookV2Details.  # noqa: E501

        Type of connection used for related activity  # noqa: E501

        :return: The protocol of this WebhookV2Details.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this WebhookV2Details.

        Type of connection used for related activity  # noqa: E501

        :param protocol: The protocol of this WebhookV2Details.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def username(self):
        """Gets the username of this WebhookV2Details.  # noqa: E501

        Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or \"publ  # noqa: E501

        :return: The username of this WebhookV2Details.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this WebhookV2Details.

        Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or \"publ  # noqa: E501

        :param username: The username of this WebhookV2Details.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def event(self):
        """Gets the event of this WebhookV2Details.  # noqa: E501

        Type of related activity  # noqa: E501

        :return: The event of this WebhookV2Details.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WebhookV2Details.

        Type of related activity  # noqa: E501

        :param event: The event of this WebhookV2Details.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def event_data(self):
        """Gets the event_data of this WebhookV2Details.  # noqa: E501


        :return: The event_data of this WebhookV2Details.  # noqa: E501
        :rtype: WebhookV2EventData
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this WebhookV2Details.


        :param event_data: The event_data of this WebhookV2Details.  # noqa: E501
        :type: WebhookV2EventData
        """

        self._event_data = event_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookV2Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookV2Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
