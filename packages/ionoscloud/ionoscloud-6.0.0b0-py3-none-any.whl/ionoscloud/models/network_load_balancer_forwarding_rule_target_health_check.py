# coding: utf-8

"""
    CLOUD API

    An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.  # noqa: E501

    The version of the OpenAPI document: 6.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud.configuration import Configuration


class NetworkLoadBalancerForwardingRuleTargetHealthCheck(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check': 'bool',
        'check_interval': 'int',
        'maintenance': 'bool',
    }

    attribute_map = {
        'check': 'check',
        'check_interval': 'checkInterval',
        'maintenance': 'maintenance',
    }

    def __init__(self, check=None, check_interval=None, maintenance=None, local_vars_configuration=None):  # noqa: E501
        """NetworkLoadBalancerForwardingRuleTargetHealthCheck - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._check = None
        self._check_interval = None
        self._maintenance = None
        self.discriminator = None

        if check is not None:
            self.check = check
        if check_interval is not None:
            self.check_interval = check_interval
        if maintenance is not None:
            self.maintenance = maintenance

    @property
    def check(self):
        """Gets the check of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501

        Check specifies whether the target VM's health is checked. If turned off, a target VM is always considered available. If turned on, the target VM is available when accepting periodic TCP connections, to ensure that it is really able to serve requests. The address and port to send the tests to are those of the target VM. The health check only consists of a connection attempt.  # noqa: E501

        :return: The check of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501
        :rtype: bool
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.

        Check specifies whether the target VM's health is checked. If turned off, a target VM is always considered available. If turned on, the target VM is available when accepting periodic TCP connections, to ensure that it is really able to serve requests. The address and port to send the tests to are those of the target VM. The health check only consists of a connection attempt.  # noqa: E501

        :param check: The check of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501
        :type check: bool
        """

        self._check = check

    @property
    def check_interval(self):
        """Gets the check_interval of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501

        CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.  # noqa: E501

        :return: The check_interval of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501
        :rtype: int
        """
        return self._check_interval

    @check_interval.setter
    def check_interval(self, check_interval):
        """Sets the check_interval of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.

        CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.  # noqa: E501

        :param check_interval: The check_interval of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501
        :type check_interval: int
        """

        self._check_interval = check_interval

    @property
    def maintenance(self):
        """Gets the maintenance of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501

        Maintenance specifies if a target VM should be marked as down, even if it is not.  # noqa: E501

        :return: The maintenance of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501
        :rtype: bool
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.

        Maintenance specifies if a target VM should be marked as down, even if it is not.  # noqa: E501

        :param maintenance: The maintenance of this NetworkLoadBalancerForwardingRuleTargetHealthCheck.  # noqa: E501
        :type maintenance: bool
        """

        self._maintenance = maintenance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkLoadBalancerForwardingRuleTargetHealthCheck):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkLoadBalancerForwardingRuleTargetHealthCheck):
            return True

        return self.to_dict() != other.to_dict()
