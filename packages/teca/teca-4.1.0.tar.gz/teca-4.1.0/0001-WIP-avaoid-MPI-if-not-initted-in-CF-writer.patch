From 0d90e935f8b5e914ff6cb7db986efed9e250a6c3 Mon Sep 17 00:00:00 2001
From: Burlen Loring <bloring@lbl.gov>
Date: Wed, 24 Jun 2020 12:29:00 -0700
Subject: [PATCH] WIP -- avaoid MPI if not initted in CF writer

---
 io/teca_cf_layout_manager.cxx | 17 +++++++++++------
 io/teca_netcdf_util.cxx       | 28 +++++++++++++++++++++++++---
 2 files changed, 36 insertions(+), 9 deletions(-)

diff --git a/io/teca_cf_layout_manager.cxx b/io/teca_cf_layout_manager.cxx
index fdf359f..d07a199 100644
--- a/io/teca_cf_layout_manager.cxx
+++ b/io/teca_cf_layout_manager.cxx
@@ -127,8 +127,13 @@ int teca_cf_layout_manager::define(const teca_metadata &md_in,
     int rank = 0;
     int n_ranks = 1;
 #if defined(TECA_HAS_MPI)
-    MPI_Comm_rank(this->comm, &rank);
-    MPI_Comm_size(this->comm, &n_ranks);
+    int is_init = 0;
+    MPI_Initialized(&is_init);
+    if (is_init)
+    {
+        MPI_Comm_rank(this->comm, &rank);
+        MPI_Comm_size(this->comm, &n_ranks);
+    }
 #endif
 
     // get the cordinate axes
@@ -372,8 +377,8 @@ int teca_cf_layout_manager::define(const teca_metadata &md_in,
         }
 
 #if defined(TECA_HAS_NETCDF_MPI)
-        if ((ierr = nc_var_par_access(this->handle.get(), var_id,
-            NC_INDEPENDENT)) != NC_NOERR)
+        if (is_init && ((ierr = nc_var_par_access(this->handle.get(),
+            var_id, NC_INDEPENDENT)) != NC_NOERR))
         {
             TECA_ERROR("Failed to set inidependant mode on variable \"" << name << "\"")
             return -1;
@@ -468,8 +473,8 @@ int teca_cf_layout_manager::define(const teca_metadata &md_in,
         {
         std::lock_guard<std::mutex> lock(teca_netcdf_util::get_netcdf_mutex());
 #endif
-        if ((ierr = nc_var_par_access(this->handle.get(), var_id,
-            NC_INDEPENDENT)) != NC_NOERR)
+        if (is_init && ((ierr = nc_var_par_access(this->handle.get(), var_id,
+            NC_INDEPENDENT)) != NC_NOERR))
         {
             TECA_ERROR("Failed to set inidependant mode on variable \"" << name << "\"")
             return -1;
diff --git a/io/teca_netcdf_util.cxx b/io/teca_netcdf_util.cxx
index 375054d..2f6d187 100644
--- a/io/teca_netcdf_util.cxx
+++ b/io/teca_netcdf_util.cxx
@@ -57,7 +57,10 @@ int netcdf_handle::open(MPI_Comm comm, const std::string &file_path, int mode)
 #if !defined(TECA_HAS_NETCDF_MPI)
 #if defined(TECA_HAS_MPI)
     int n_ranks = 1;
-    MPI_Comm_size(comm, &n_ranks);
+    int is_init = 0;
+    MPI_Initialized(&is_init);
+    if (is_init)
+        MPI_Comm_size(comm, &n_ranks);
     if (n_ranks > 1)
     {
         // it would open all kinds of confusion and chaos to let this call
@@ -73,6 +76,14 @@ int netcdf_handle::open(MPI_Comm comm, const std::string &file_path, int mode)
     return this->open(file_path, mode);
 #endif
 #else
+    int is_init = 0;
+    MPI_Initialized(&is_init);
+    if (!is_init)
+    {
+        // forward to the non-collective library call
+        return this->open(file_path, mode);
+    }
+
     // open the file for collective parallel i/o
     if (m_handle)
     {
@@ -141,7 +152,10 @@ int netcdf_handle::create(MPI_Comm comm, const std::string &file_path, int mode)
 #if !defined(TECA_HAS_NETCDF_MPI)
 #if defined(TECA_HAS_MPI)
     int n_ranks = 1;
-    MPI_Comm_size(comm, &n_ranks);
+    int is_init = 0;
+    MPI_Initialized(&is_init);
+    if (is_init)
+        MPI_Comm_size(comm, &n_ranks);
     if (n_ranks > 1)
     {
         // it would create all kinds of confusion and chaos to let this call
@@ -157,6 +171,14 @@ int netcdf_handle::create(MPI_Comm comm, const std::string &file_path, int mode)
     return this->create(file_path, mode);
 #endif
 #else
+    // forward to the non-collective library call if MPI is not in use
+    int is_init = 0;
+    MPI_Initialized(&is_init);
+    if (!is_init)
+    {
+        return this->create(file_path, mode);
+    }
+
     // create the file for collective parallel i/o
     if (m_handle)
     {
@@ -201,7 +223,7 @@ int netcdf_handle::create(MPI_Comm comm, const std::string &file_path, int mode)
 int netcdf_handle::flush()
 {
 #if !defined(HDF5_THREAD_SAFE)
-        std::lock_guard<std::mutex> lock(teca_netcdf_util::get_netcdf_mutex());
+    std::lock_guard<std::mutex> lock(teca_netcdf_util::get_netcdf_mutex());
 #endif
     int ierr = 0;
     if ((ierr = nc_sync(m_handle)) != NC_NOERR)
-- 
2.21.0

