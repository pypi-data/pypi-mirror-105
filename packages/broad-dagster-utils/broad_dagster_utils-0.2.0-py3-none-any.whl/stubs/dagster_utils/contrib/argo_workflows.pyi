from argo.workflows.client import ArchivedWorkflowServiceApi
from argo.workflows.client.models import V1alpha1Workflow as V1alpha1Workflow, V1alpha1WorkflowList as V1alpha1WorkflowList
from typing import Any, Iterator, Optional
from typing_extensions import Protocol as Protocol

def generate_argo_archived_workflows_client(host_url: str, access_token: str) -> ArchivedWorkflowServiceApi: ...

class ArgoFetchListOperation:
    def __call__(self, *args: Any, list_options_continue: Optional[str]=..., **kwargs: Any) -> V1alpha1WorkflowList: ...

class ArgoArchivedWorkflowsClient:
    argo_url: str
    access_token: str
    def client(self) -> ArchivedWorkflowServiceApi: ...
    def list_archived_workflows(self) -> Iterator[V1alpha1Workflow]: ...
    def get_archived_workflow(self, uid: str) -> V1alpha1Workflow: ...
    def __init__(self, argo_url: Any, access_token: Any) -> None: ...

class ExtendedArgoWorkflow:
    client: Any = ...
    def __init__(self, workflow: V1alpha1Workflow, argo_url: str, access_token: str) -> None: ...
    def inflate(self) -> ExtendedArgoWorkflow: ...
    def params_dict(self) -> dict[str, Any]: ...
    def __getattr__(self, name: str) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
